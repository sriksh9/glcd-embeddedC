

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Jun 16 12:59:16 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21  0000                     
    22                           ; Version 1.41
    23                           ; Generated 25/01/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F45K22 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     _ANSELD	set	3899
    57  0000                     _ANSELB	set	3897
    58  0000                     _PORTB	set	3969
    59  0000                     _PORTD	set	3971
    60  0000                     _TRISB	set	3987
    61  0000                     _TRISD	set	3989
    62  0000                     _PORTBbits	set	3969
    63                           
    64                           	psect	smallconst
    65  000600                     __psmallconst:
    66                           	opt stack 0
    67  000600  00                 	db	0
    68  000601                     STR_1:
    69  000601  48                 	db	72	;'H'
    70  000602  45                 	db	69	;'E'
    71  000603  4C                 	db	76	;'L'
    72  000604  4C                 	db	76	;'L'
    73  000605  4F                 	db	79	;'O'
    74  000606  21                 	db	33
    75  000607  2E                 	db	46
    76  000608  2E                 	db	46
    77  000609  00                 	db	0
    78  0000                     
    79                           ; #config settings
    80  00060A  00                 	db	0	; dummy byte at the end
    81  0000                     
    82                           	psect	cinit
    83  000FD2                     __pcinit:
    84                           	opt stack 0
    85  000FD2                     start_initialization:
    86                           	opt stack 0
    87  000FD2                     __initialization:
    88                           	opt stack 0
    89  000FD2                     end_of_initialization:
    90                           	opt stack 0
    91  000FD2                     __end_of__initialization:
    92                           	opt stack 0
    93  000FD2  0E00               	movlw	low (__Lmediumconst shr (0+16))
    94  000FD4  6EF8               	movwf	tblptru,c
    95  000FD6  0100               	movlb	0
    96  000FD8  EFD1  F006         	goto	_main	;jump to C main() function
    97                           tblptru	equ	0xFF8
    98                           
    99                           	psect	cstackCOMRAM
   100  000001                     __pcstackCOMRAM:
   101                           	opt stack 0
   102  000001                     goto_col@Col_Data:
   103                           	opt stack 0
   104  000001                     goto_row@row:
   105                           	opt stack 0
   106  000001                     glcd_write@data:
   107                           	opt stack 0
   108                           
   109                           ; 1 bytes @ 0x0
   110  000001                     	ds	1
   111  000002                     goto_col@col:
   112                           	opt stack 0
   113  000002                     goto_row@Col_Data:
   114                           	opt stack 0
   115  000002                     glcd_text@text:
   116                           	opt stack 0
   117                           
   118                           ; 1 bytes @ 0x1
   119  000002                     	ds	1
   120  000003                     goto_xy@y:
   121                           	opt stack 0
   122  000003                     glcd_string@str:
   123                           	opt stack 0
   124                           
   125                           ; 2 bytes @ 0x2
   126  000003                     	ds	1
   127  000004                     goto_xy@x:
   128                           	opt stack 0
   129                           
   130                           ; 1 bytes @ 0x3
   131  000004                     	ds	1
   132  000005                     ??_glcd_string:
   133  000005                     glcd_clear_line@ln:
   134                           	opt stack 0
   135                           
   136                           ; 1 bytes @ 0x4
   137  000005                     	ds	1
   138  000006                     glcd_clear_line@i:
   139                           	opt stack 0
   140                           
   141                           ; 2 bytes @ 0x5
   142  000006                     	ds	1
   143  000007                     glcd_string@i:
   144                           	opt stack 0
   145                           
   146                           ; 1 bytes @ 0x6
   147  000007                     	ds	1
   148  000008                     glcd_clear@m:
   149                           	opt stack 0
   150                           
   151                           ; 2 bytes @ 0x7
   152  000008                     	ds	2
   153  00000A                     ??_main:
   154                           
   155                           ; 1 bytes @ 0x9
   156  00000A                     	ds	2
   157  00000C                     main@i_249:
   158                           	opt stack 0
   159                           
   160                           ; 2 bytes @ 0xB
   161  00000C                     	ds	2
   162  00000E                     main@i_252:
   163                           	opt stack 0
   164                           
   165                           ; 2 bytes @ 0xD
   166  00000E                     	ds	2
   167                           tblptru	equ	0xFF8
   168                           
   169 ;;
   170 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   171 ;;
   172 ;; *************** function _main *****************
   173 ;; Defined at:
   174 ;;		line 14 in file "glcd_trail.c"
   175 ;; Parameters:    Size  Location     Type
   176 ;;		None
   177 ;; Auto vars:     Size  Location     Type
   178 ;;  i               2   13[COMRAM] int 
   179 ;;  i               2   11[COMRAM] int 
   180 ;;  i               2    0        int 
   181 ;; Return value:  Size  Location     Type
   182 ;;                  1    wreg      void 
   183 ;; Registers used:
   184 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   185 ;; Tracked objects:
   186 ;;		On entry : 0/0
   187 ;;		On exit  : 0/0
   188 ;;		Unchanged: 0/0
   189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   190 ;;      Params:         0       0       0       0       0       0       0
   191 ;;      Locals:         4       0       0       0       0       0       0
   192 ;;      Temps:          2       0       0       0       0       0       0
   193 ;;      Totals:         6       0       0       0       0       0       0
   194 ;;Total ram usage:        6 bytes
   195 ;; Hardware stack levels required when called:    5
   196 ;; This function calls:
   197 ;;		_glcd_clear
   198 ;;		_glcd_on
   199 ;;		_glcd_string
   200 ;;		_goto_xy
   201 ;; This function is called by:
   202 ;;		Startup code after reset
   203 ;; This function uses a non-reentrant model
   204 ;;
   205                           
   206                           	psect	text0
   207  000DA2                     __ptext0:
   208                           	opt stack 0
   209  000DA2                     _main:
   210                           	opt stack 26
   211                           
   212                           ;glcd_trail.c: 15: int i;
   213                           ;glcd_trail.c: 16: ANSELB = 0;
   214                           
   215                           ;incstack = 0
   216  000DA2  0E00               	movlw	0
   217  000DA4  010F               	movlb	15	; () banked
   218  000DA6  6F39               	movwf	57,b	;volatile
   219                           
   220                           ;glcd_trail.c: 17: ANSELD = 0;
   221  000DA8  0E00               	movlw	0
   222  000DAA  010F               	movlb	15	; () banked
   223  000DAC  6F3B               	movwf	59,b	;volatile
   224                           
   225                           ; BSR set to: 15
   226                           ;glcd_trail.c: 18: glcd_on();
   227  000DAE  EC99  F007         	call	_glcd_on	;wreg free
   228                           
   229                           ;glcd_trail.c: 19: glcd_clear();
   230  000DB2  ECAD  F007         	call	_glcd_clear	;wreg free
   231                           
   232                           ;glcd_trail.c: 20: _delay((unsigned long)((1000)*(16000000/4000.0)));
   233  000DB6  0E15               	movlw	21
   234  000DB8  6E0B               	movwf	(??_main+1)& (0+255),c
   235  000DBA  0E4B               	movlw	75
   236  000DBC  6E0A               	movwf	??_main& (0+255),c
   237  000DBE  0EBE               	movlw	190
   238  000DC0                     u597:
   239  000DC0  2EE8               	decfsz	wreg,f,c
   240  000DC2  D7FE               	bra	u597
   241  000DC4  2E0A               	decfsz	??_main& (0+255),f,c
   242  000DC6  D7FC               	bra	u597
   243  000DC8  2E0B               	decfsz	(??_main+1)& (0+255),f,c
   244  000DCA  D7FA               	bra	u597
   245  000DCC  D000               	nop2	
   246  000DCE                     l1347:
   247                           
   248                           ;glcd_trail.c: 22: {
   249                           ;glcd_trail.c: 23: for(int i=0; i<8; i++)
   250  000DCE  0E00               	movlw	0
   251  000DD0  6E0D               	movwf	main@i_249+1,c
   252  000DD2  0E00               	movlw	0
   253  000DD4  6E0C               	movwf	main@i_249,c
   254  000DD6                     l1349:
   255  000DD6  BE0D               	btfsc	main@i_249+1,7,c
   256  000DD8  D006               	goto	l1353
   257  000DDA  500D               	movf	main@i_249+1,w,c
   258  000DDC  E120               	bnz	l1363
   259  000DDE  0E08               	movlw	8
   260  000DE0  5C0C               	subwf	main@i_249,w,c
   261  000DE2  B0D8               	btfsc	status,0,c
   262  000DE4  D01C               	goto	l1363
   263  000DE6                     l1353:
   264                           
   265                           ;glcd_trail.c: 24: {
   266                           ;glcd_trail.c: 25: glcd_clear();
   267  000DE6  ECAD  F007         	call	_glcd_clear	;wreg free
   268                           
   269                           ;glcd_trail.c: 26: goto_xy(0,i);
   270  000DEA  C00C  F003         	movff	main@i_249,goto_xy@y
   271  000DEE  0E00               	movlw	0
   272  000DF0  ECE1  F007         	call	_goto_xy
   273                           
   274                           ;glcd_trail.c: 27: glcd_string("HELLO!..");
   275  000DF4  0E01               	movlw	low STR_1
   276  000DF6  6E03               	movwf	glcd_string@str,c
   277  000DF8  0E06               	movlw	high STR_1
   278  000DFA  6E04               	movwf	glcd_string@str+1,c
   279  000DFC  EC37  F007         	call	_glcd_string	;wreg free
   280                           
   281                           ;glcd_trail.c: 28: _delay((unsigned long)((1000)*(16000000/4000.0)));
   282  000E00  0E15               	movlw	21
   283  000E02  6E0B               	movwf	(??_main+1)& (0+255),c
   284  000E04  0E4B               	movlw	75
   285  000E06  6E0A               	movwf	??_main& (0+255),c
   286  000E08  0EBE               	movlw	190
   287  000E0A                     u607:
   288  000E0A  2EE8               	decfsz	wreg,f,c
   289  000E0C  D7FE               	bra	u607
   290  000E0E  2E0A               	decfsz	??_main& (0+255),f,c
   291  000E10  D7FC               	bra	u607
   292  000E12  2E0B               	decfsz	(??_main+1)& (0+255),f,c
   293  000E14  D7FA               	bra	u607
   294  000E16  D000               	nop2	
   295  000E18  4A0C               	infsnz	main@i_249,f,c
   296  000E1A  2A0D               	incf	main@i_249+1,f,c
   297  000E1C  D7DC               	goto	l1349
   298  000E1E                     l1363:
   299                           
   300                           ;glcd_trail.c: 30: }
   301                           ;glcd_trail.c: 31: for(int i=0; i<8; i++)
   302  000E1E  0E00               	movlw	0
   303  000E20  6E0F               	movwf	main@i_252+1,c
   304  000E22  0E00               	movlw	0
   305  000E24  6E0E               	movwf	main@i_252,c
   306  000E26                     l1365:
   307  000E26  BE0F               	btfsc	main@i_252+1,7,c
   308  000E28  D006               	goto	l1369
   309  000E2A  500F               	movf	main@i_252+1,w,c
   310  000E2C  E1D0               	bnz	l1347
   311  000E2E  0E08               	movlw	8
   312  000E30  5C0E               	subwf	main@i_252,w,c
   313  000E32  B0D8               	btfsc	status,0,c
   314  000E34  D7CC               	goto	l1347
   315  000E36                     l1369:
   316                           
   317                           ;glcd_trail.c: 32: {
   318                           ;glcd_trail.c: 33: glcd_clear();
   319  000E36  ECAD  F007         	call	_glcd_clear	;wreg free
   320                           
   321                           ;glcd_trail.c: 34: goto_xy(65,i);
   322  000E3A  C00E  F003         	movff	main@i_252,goto_xy@y
   323  000E3E  0E41               	movlw	65
   324  000E40  ECE1  F007         	call	_goto_xy
   325                           
   326                           ;glcd_trail.c: 35: glcd_string("HELLO!..");
   327  000E44  0E01               	movlw	low STR_1
   328  000E46  6E03               	movwf	glcd_string@str,c
   329  000E48  0E06               	movlw	high STR_1
   330  000E4A  6E04               	movwf	glcd_string@str+1,c
   331  000E4C  EC37  F007         	call	_glcd_string	;wreg free
   332                           
   333                           ;glcd_trail.c: 36: _delay((unsigned long)((1000)*(16000000/4000.0)));
   334  000E50  0E15               	movlw	21
   335  000E52  6E0B               	movwf	(??_main+1)& (0+255),c
   336  000E54  0E4B               	movlw	75
   337  000E56  6E0A               	movwf	??_main& (0+255),c
   338  000E58  0EBE               	movlw	190
   339  000E5A                     u617:
   340  000E5A  2EE8               	decfsz	wreg,f,c
   341  000E5C  D7FE               	bra	u617
   342  000E5E  2E0A               	decfsz	??_main& (0+255),f,c
   343  000E60  D7FC               	bra	u617
   344  000E62  2E0B               	decfsz	(??_main+1)& (0+255),f,c
   345  000E64  D7FA               	bra	u617
   346  000E66  D000               	nop2	
   347  000E68  4A0E               	infsnz	main@i_252,f,c
   348  000E6A  2A0F               	incf	main@i_252+1,f,c
   349  000E6C  D7DC               	goto	l1365
   350  000E6E                     __end_of_main:
   351                           	opt stack 0
   352                           tblptru	equ	0xFF8
   353                           wreg	equ	0xFE8
   354                           status	equ	0xFD8
   355                           
   356 ;; *************** function _glcd_string *****************
   357 ;; Defined at:
   358 ;;		line 625 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
   359 ;; Parameters:    Size  Location     Type
   360 ;;  str             2    2[COMRAM] PTR unsigned char 
   361 ;;		 -> STR_2(9), STR_1(9), 
   362 ;; Auto vars:     Size  Location     Type
   363 ;;  i               1    6[COMRAM] unsigned char 
   364 ;; Return value:  Size  Location     Type
   365 ;;                  1    wreg      void 
   366 ;; Registers used:
   367 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   368 ;; Tracked objects:
   369 ;;		On entry : 0/0
   370 ;;		On exit  : 0/0
   371 ;;		Unchanged: 0/0
   372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   373 ;;      Params:         2       0       0       0       0       0       0
   374 ;;      Locals:         1       0       0       0       0       0       0
   375 ;;      Temps:          2       0       0       0       0       0       0
   376 ;;      Totals:         5       0       0       0       0       0       0
   377 ;;Total ram usage:        5 bytes
   378 ;; Hardware stack levels used:    1
   379 ;; Hardware stack levels required when called:    3
   380 ;; This function calls:
   381 ;;		_glcd_text
   382 ;; This function is called by:
   383 ;;		_main
   384 ;; This function uses a non-reentrant model
   385 ;;
   386                           
   387                           	psect	text1
   388  000E6E                     __ptext1:
   389                           	opt stack 0
   390  000E6E                     _glcd_string:
   391                           	opt stack 27
   392                           
   393                           ;glcd.h: 627: unsigned char i = 0;
   394                           
   395                           ;incstack = 0
   396  000E6E  0E00               	movlw	0
   397  000E70  6E07               	movwf	glcd_string@i,c
   398                           
   399                           ;glcd.h: 628: while(str[i]!='\0')
   400  000E72  D013               	goto	l1237
   401  000E74                     l1233:
   402                           
   403                           ;glcd.h: 629: {
   404                           ;glcd.h: 630: glcd_text(str[i]);
   405  000E74  5007               	movf	glcd_string@i,w,c
   406  000E76  0D01               	mullw	1
   407  000E78  C003  F005         	movff	glcd_string@str,??_glcd_string
   408  000E7C  C004  F006         	movff	glcd_string@str+1,??_glcd_string+1
   409  000E80  50F3               	movf	prodl,w,c
   410  000E82  2605               	addwf	??_glcd_string,f,c
   411  000E84  50F4               	movf	prodh,w,c
   412  000E86  2206               	addwfc	??_glcd_string+1,f,c
   413  000E88  C005  FFF6         	movff	??_glcd_string,tblptrl
   414  000E8C  C006  FFF7         	movff	??_glcd_string+1,tblptrh
   415  000E90                     	if	0	;tblptru may be non-zero
   416  000E90                     	endif
   417  000E90                     	if	0	;tblptru may be non-zero
   418  000E90                     	endif
   419  000E90  0008               	tblrd		*
   420  000E92  50F5               	movf	tablat,w,c
   421  000E94  EC06  F003         	call	_glcd_text
   422                           
   423                           ;glcd.h: 631: i++;
   424  000E98  2A07               	incf	glcd_string@i,f,c
   425  000E9A                     l1237:
   426  000E9A  5007               	movf	glcd_string@i,w,c
   427  000E9C  0D01               	mullw	1
   428  000E9E  C003  F005         	movff	glcd_string@str,??_glcd_string
   429  000EA2  C004  F006         	movff	glcd_string@str+1,??_glcd_string+1
   430  000EA6  50F3               	movf	prodl,w,c
   431  000EA8  2605               	addwf	??_glcd_string,f,c
   432  000EAA  50F4               	movf	prodh,w,c
   433  000EAC  2206               	addwfc	??_glcd_string+1,f,c
   434  000EAE  C005  FFF6         	movff	??_glcd_string,tblptrl
   435  000EB2  C006  FFF7         	movff	??_glcd_string+1,tblptrh
   436  000EB6                     	if	0	;tblptru may be non-zero
   437  000EB6                     	endif
   438  000EB6                     	if	0	;tblptru may be non-zero
   439  000EB6                     	endif
   440  000EB6  0008               	tblrd		*
   441  000EB8  50F5               	movf	tablat,w,c
   442  000EBA  0900               	iorlw	0
   443  000EBC  B4D8               	btfsc	status,2,c
   444  000EBE  0012               	return	
   445  000EC0  D7D9               	goto	l1233
   446  000EC2                     __end_of_glcd_string:
   447                           	opt stack 0
   448                           tblptru	equ	0xFF8
   449                           tblptrh	equ	0xFF7
   450                           tblptrl	equ	0xFF6
   451                           tablat	equ	0xFF5
   452                           prodh	equ	0xFF4
   453                           prodl	equ	0xFF3
   454                           wreg	equ	0xFE8
   455                           status	equ	0xFD8
   456                           
   457 ;; *************** function _glcd_text *****************
   458 ;; Defined at:
   459 ;;		line 201 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
   460 ;; Parameters:    Size  Location     Type
   461 ;;  text            1    wreg     unsigned char 
   462 ;; Auto vars:     Size  Location     Type
   463 ;;  text            1    1[COMRAM] unsigned char 
   464 ;; Return value:  Size  Location     Type
   465 ;;                  1    wreg      void 
   466 ;; Registers used:
   467 ;;		wreg, status,2, status,0, cstack
   468 ;; Tracked objects:
   469 ;;		On entry : 0/0
   470 ;;		On exit  : 0/0
   471 ;;		Unchanged: 0/0
   472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   473 ;;      Params:         0       0       0       0       0       0       0
   474 ;;      Locals:         1       0       0       0       0       0       0
   475 ;;      Temps:          0       0       0       0       0       0       0
   476 ;;      Totals:         1       0       0       0       0       0       0
   477 ;;Total ram usage:        1 bytes
   478 ;; Hardware stack levels used:    1
   479 ;; Hardware stack levels required when called:    2
   480 ;; This function calls:
   481 ;;		_glcd_write
   482 ;; This function is called by:
   483 ;;		_glcd_string
   484 ;;		_glcd_num
   485 ;; This function uses a non-reentrant model
   486 ;;
   487                           
   488                           	psect	text2
   489  00060C                     __ptext2:
   490                           	opt stack 0
   491  00060C                     _glcd_text:
   492                           	opt stack 27
   493                           
   494                           ;incstack = 0
   495                           ;glcd_text@text stored from wreg
   496  00060C  6E02               	movwf	glcd_text@text,c
   497                           
   498                           ;glcd.h: 203: switch (text)
   499  00060E  D34F               	goto	l969
   500  000610                     l887:
   501                           
   502                           ;glcd.h: 207: glcd_write(0x00);
   503  000610  0E00               	movlw	0
   504  000612  ECCA  F007         	call	_glcd_write
   505                           
   506                           ;glcd.h: 208: glcd_write(0x7E);
   507  000616  0E7E               	movlw	126
   508  000618  ECCA  F007         	call	_glcd_write
   509                           
   510                           ;glcd.h: 209: glcd_write(0x09);
   511  00061C  0E09               	movlw	9
   512  00061E  ECCA  F007         	call	_glcd_write
   513                           
   514                           ;glcd.h: 210: glcd_write(0x09);
   515  000622  0E09               	movlw	9
   516  000624  ECCA  F007         	call	_glcd_write
   517                           
   518                           ;glcd.h: 211: glcd_write(0x09);
   519  000628  0E09               	movlw	9
   520  00062A  ECCA  F007         	call	_glcd_write
   521                           
   522                           ;glcd.h: 212: glcd_write(0x7E);
   523  00062E  0E7E               	movlw	126
   524  000630  ECCA  F007         	call	_glcd_write
   525                           
   526                           ;glcd.h: 213: glcd_write(0x00);
   527  000634  0E00               	movlw	0
   528  000636  ECCA  F007         	call	_glcd_write
   529                           
   530                           ;glcd.h: 214: break;
   531  00063A  0012               	return	
   532  00063C                     l889:
   533                           
   534                           ;glcd.h: 217: glcd_write(0x00);
   535  00063C  0E00               	movlw	0
   536  00063E  ECCA  F007         	call	_glcd_write
   537                           
   538                           ;glcd.h: 218: glcd_write(0x7F);
   539  000642  0E7F               	movlw	127
   540  000644  ECCA  F007         	call	_glcd_write
   541                           
   542                           ;glcd.h: 219: glcd_write(0x49);
   543  000648  0E49               	movlw	73
   544  00064A  ECCA  F007         	call	_glcd_write
   545                           
   546                           ;glcd.h: 220: glcd_write(0x49);
   547  00064E  0E49               	movlw	73
   548  000650  ECCA  F007         	call	_glcd_write
   549                           
   550                           ;glcd.h: 221: glcd_write(0x49);
   551  000654  0E49               	movlw	73
   552  000656  ECCA  F007         	call	_glcd_write
   553                           
   554                           ;glcd.h: 222: glcd_write(0x36);
   555  00065A  0E36               	movlw	54
   556  00065C  ECCA  F007         	call	_glcd_write
   557                           
   558                           ;glcd.h: 223: glcd_write(0x00);
   559  000660  0E00               	movlw	0
   560  000662  ECCA  F007         	call	_glcd_write
   561                           
   562                           ;glcd.h: 224: break;
   563  000666  0012               	return	
   564  000668                     l891:
   565                           
   566                           ;glcd.h: 227: glcd_write(0x00);
   567  000668  0E00               	movlw	0
   568  00066A  ECCA  F007         	call	_glcd_write
   569                           
   570                           ;glcd.h: 228: glcd_write(0x3E);
   571  00066E  0E3E               	movlw	62
   572  000670  ECCA  F007         	call	_glcd_write
   573                           
   574                           ;glcd.h: 229: glcd_write(0x41);
   575  000674  0E41               	movlw	65
   576  000676  ECCA  F007         	call	_glcd_write
   577                           
   578                           ;glcd.h: 230: glcd_write(0x41);
   579  00067A  0E41               	movlw	65
   580  00067C  ECCA  F007         	call	_glcd_write
   581                           
   582                           ;glcd.h: 231: glcd_write(0x41);
   583  000680  0E41               	movlw	65
   584  000682  ECCA  F007         	call	_glcd_write
   585                           
   586                           ;glcd.h: 232: glcd_write(0x22);
   587  000686  0E22               	movlw	34
   588  000688  ECCA  F007         	call	_glcd_write
   589                           
   590                           ;glcd.h: 233: glcd_write(0x00);
   591  00068C  0E00               	movlw	0
   592  00068E  ECCA  F007         	call	_glcd_write
   593                           
   594                           ;glcd.h: 234: break;
   595  000692  0012               	return	
   596  000694                     l893:
   597                           
   598                           ;glcd.h: 237: glcd_write(0x00);
   599  000694  0E00               	movlw	0
   600  000696  ECCA  F007         	call	_glcd_write
   601                           
   602                           ;glcd.h: 238: glcd_write(0x7F);
   603  00069A  0E7F               	movlw	127
   604  00069C  ECCA  F007         	call	_glcd_write
   605                           
   606                           ;glcd.h: 239: glcd_write(0x41);
   607  0006A0  0E41               	movlw	65
   608  0006A2  ECCA  F007         	call	_glcd_write
   609                           
   610                           ;glcd.h: 240: glcd_write(0x41);
   611  0006A6  0E41               	movlw	65
   612  0006A8  ECCA  F007         	call	_glcd_write
   613                           
   614                           ;glcd.h: 241: glcd_write(0x41);
   615  0006AC  0E41               	movlw	65
   616  0006AE  ECCA  F007         	call	_glcd_write
   617                           
   618                           ;glcd.h: 242: glcd_write(0x3E);
   619  0006B2  0E3E               	movlw	62
   620  0006B4  ECCA  F007         	call	_glcd_write
   621                           
   622                           ;glcd.h: 243: glcd_write(0x00);
   623  0006B8  0E00               	movlw	0
   624  0006BA  ECCA  F007         	call	_glcd_write
   625                           
   626                           ;glcd.h: 244: break;
   627  0006BE  0012               	return	
   628  0006C0                     l895:
   629                           
   630                           ;glcd.h: 247: glcd_write(0x00);
   631  0006C0  0E00               	movlw	0
   632  0006C2  ECCA  F007         	call	_glcd_write
   633                           
   634                           ;glcd.h: 248: glcd_write(0x7F);
   635  0006C6  0E7F               	movlw	127
   636  0006C8  ECCA  F007         	call	_glcd_write
   637                           
   638                           ;glcd.h: 249: glcd_write(0x49);
   639  0006CC  0E49               	movlw	73
   640  0006CE  ECCA  F007         	call	_glcd_write
   641                           
   642                           ;glcd.h: 250: glcd_write(0x49);
   643  0006D2  0E49               	movlw	73
   644  0006D4  ECCA  F007         	call	_glcd_write
   645                           
   646                           ;glcd.h: 251: glcd_write(0x49);
   647  0006D8  0E49               	movlw	73
   648  0006DA  ECCA  F007         	call	_glcd_write
   649                           
   650                           ;glcd.h: 252: glcd_write(0x41);
   651  0006DE  0E41               	movlw	65
   652  0006E0  ECCA  F007         	call	_glcd_write
   653                           
   654                           ;glcd.h: 253: glcd_write(0x00);
   655  0006E4  0E00               	movlw	0
   656  0006E6  ECCA  F007         	call	_glcd_write
   657                           
   658                           ;glcd.h: 254: break;
   659  0006EA  0012               	return	
   660  0006EC                     l897:
   661                           
   662                           ;glcd.h: 257: glcd_write(0x00);
   663  0006EC  0E00               	movlw	0
   664  0006EE  ECCA  F007         	call	_glcd_write
   665                           
   666                           ;glcd.h: 258: glcd_write(0x7F);
   667  0006F2  0E7F               	movlw	127
   668  0006F4  ECCA  F007         	call	_glcd_write
   669                           
   670                           ;glcd.h: 259: glcd_write(0x09);
   671  0006F8  0E09               	movlw	9
   672  0006FA  ECCA  F007         	call	_glcd_write
   673                           
   674                           ;glcd.h: 260: glcd_write(0x09);
   675  0006FE  0E09               	movlw	9
   676  000700  ECCA  F007         	call	_glcd_write
   677                           
   678                           ;glcd.h: 261: glcd_write(0x09);
   679  000704  0E09               	movlw	9
   680  000706  ECCA  F007         	call	_glcd_write
   681                           
   682                           ;glcd.h: 262: glcd_write(0x01);
   683  00070A  0E01               	movlw	1
   684  00070C  ECCA  F007         	call	_glcd_write
   685                           
   686                           ;glcd.h: 263: glcd_write(0x00);
   687  000710  0E00               	movlw	0
   688  000712  ECCA  F007         	call	_glcd_write
   689                           
   690                           ;glcd.h: 264: break;
   691  000716  0012               	return	
   692  000718                     l899:
   693                           
   694                           ;glcd.h: 267: glcd_write(0x00);
   695  000718  0E00               	movlw	0
   696  00071A  ECCA  F007         	call	_glcd_write
   697                           
   698                           ;glcd.h: 268: glcd_write(0x3E);
   699  00071E  0E3E               	movlw	62
   700  000720  ECCA  F007         	call	_glcd_write
   701                           
   702                           ;glcd.h: 269: glcd_write(0x41);
   703  000724  0E41               	movlw	65
   704  000726  ECCA  F007         	call	_glcd_write
   705                           
   706                           ;glcd.h: 270: glcd_write(0x41);
   707  00072A  0E41               	movlw	65
   708  00072C  ECCA  F007         	call	_glcd_write
   709                           
   710                           ;glcd.h: 271: glcd_write(0x49);
   711  000730  0E49               	movlw	73
   712  000732  ECCA  F007         	call	_glcd_write
   713                           
   714                           ;glcd.h: 272: glcd_write(0x3A);
   715  000736  0E3A               	movlw	58
   716  000738  ECCA  F007         	call	_glcd_write
   717                           
   718                           ;glcd.h: 273: glcd_write(0x00);
   719  00073C  0E00               	movlw	0
   720  00073E  ECCA  F007         	call	_glcd_write
   721                           
   722                           ;glcd.h: 274: break;
   723  000742  0012               	return	
   724  000744                     l901:
   725                           
   726                           ;glcd.h: 277: glcd_write(0x00);
   727  000744  0E00               	movlw	0
   728  000746  ECCA  F007         	call	_glcd_write
   729                           
   730                           ;glcd.h: 278: glcd_write(0x7F);
   731  00074A  0E7F               	movlw	127
   732  00074C  ECCA  F007         	call	_glcd_write
   733                           
   734                           ;glcd.h: 279: glcd_write(0x08);
   735  000750  0E08               	movlw	8
   736  000752  ECCA  F007         	call	_glcd_write
   737                           
   738                           ;glcd.h: 280: glcd_write(0x08);
   739  000756  0E08               	movlw	8
   740  000758  ECCA  F007         	call	_glcd_write
   741                           
   742                           ;glcd.h: 281: glcd_write(0x08);
   743  00075C  0E08               	movlw	8
   744  00075E  ECCA  F007         	call	_glcd_write
   745                           
   746                           ;glcd.h: 282: glcd_write(0x7F);
   747  000762  0E7F               	movlw	127
   748  000764  ECCA  F007         	call	_glcd_write
   749                           
   750                           ;glcd.h: 283: glcd_write(0x00);
   751  000768  0E00               	movlw	0
   752  00076A  ECCA  F007         	call	_glcd_write
   753                           
   754                           ;glcd.h: 284: break;
   755  00076E  0012               	return	
   756  000770                     l903:
   757                           
   758                           ;glcd.h: 287: glcd_write(0x00);
   759  000770  0E00               	movlw	0
   760  000772  ECCA  F007         	call	_glcd_write
   761                           
   762                           ;glcd.h: 288: glcd_write(0x00);
   763  000776  0E00               	movlw	0
   764  000778  ECCA  F007         	call	_glcd_write
   765                           
   766                           ;glcd.h: 289: glcd_write(0x41);
   767  00077C  0E41               	movlw	65
   768  00077E  ECCA  F007         	call	_glcd_write
   769                           
   770                           ;glcd.h: 290: glcd_write(0x7F);
   771  000782  0E7F               	movlw	127
   772  000784  ECCA  F007         	call	_glcd_write
   773                           
   774                           ;glcd.h: 291: glcd_write(0x41);
   775  000788  0E41               	movlw	65
   776  00078A  ECCA  F007         	call	_glcd_write
   777                           
   778                           ;glcd.h: 292: glcd_write(0x00);
   779  00078E  0E00               	movlw	0
   780  000790  ECCA  F007         	call	_glcd_write
   781                           
   782                           ;glcd.h: 293: glcd_write(0x00);
   783  000794  0E00               	movlw	0
   784  000796  ECCA  F007         	call	_glcd_write
   785                           
   786                           ;glcd.h: 294: break;
   787  00079A  0012               	return	
   788  00079C                     l905:
   789                           
   790                           ;glcd.h: 297: glcd_write(0x00);
   791  00079C  0E00               	movlw	0
   792  00079E  ECCA  F007         	call	_glcd_write
   793                           
   794                           ;glcd.h: 298: glcd_write(0x30);
   795  0007A2  0E30               	movlw	48
   796  0007A4  ECCA  F007         	call	_glcd_write
   797                           
   798                           ;glcd.h: 299: glcd_write(0x40);
   799  0007A8  0E40               	movlw	64
   800  0007AA  ECCA  F007         	call	_glcd_write
   801                           
   802                           ;glcd.h: 300: glcd_write(0x40);
   803  0007AE  0E40               	movlw	64
   804  0007B0  ECCA  F007         	call	_glcd_write
   805                           
   806                           ;glcd.h: 301: glcd_write(0x40);
   807  0007B4  0E40               	movlw	64
   808  0007B6  ECCA  F007         	call	_glcd_write
   809                           
   810                           ;glcd.h: 302: glcd_write(0x3F);
   811  0007BA  0E3F               	movlw	63
   812  0007BC  ECCA  F007         	call	_glcd_write
   813                           
   814                           ;glcd.h: 303: glcd_write(0x00);
   815  0007C0  0E00               	movlw	0
   816  0007C2  ECCA  F007         	call	_glcd_write
   817                           
   818                           ;glcd.h: 304: break;
   819  0007C6  0012               	return	
   820  0007C8                     l907:
   821                           
   822                           ;glcd.h: 307: glcd_write(0x00);
   823  0007C8  0E00               	movlw	0
   824  0007CA  ECCA  F007         	call	_glcd_write
   825                           
   826                           ;glcd.h: 308: glcd_write(0x7F);
   827  0007CE  0E7F               	movlw	127
   828  0007D0  ECCA  F007         	call	_glcd_write
   829                           
   830                           ;glcd.h: 309: glcd_write(0x08);
   831  0007D4  0E08               	movlw	8
   832  0007D6  ECCA  F007         	call	_glcd_write
   833                           
   834                           ;glcd.h: 310: glcd_write(0x14);
   835  0007DA  0E14               	movlw	20
   836  0007DC  ECCA  F007         	call	_glcd_write
   837                           
   838                           ;glcd.h: 311: glcd_write(0x22);
   839  0007E0  0E22               	movlw	34
   840  0007E2  ECCA  F007         	call	_glcd_write
   841                           
   842                           ;glcd.h: 312: glcd_write(0x41);
   843  0007E6  0E41               	movlw	65
   844  0007E8  ECCA  F007         	call	_glcd_write
   845                           
   846                           ;glcd.h: 313: glcd_write(0x00);
   847  0007EC  0E00               	movlw	0
   848  0007EE  ECCA  F007         	call	_glcd_write
   849                           
   850                           ;glcd.h: 314: break;
   851  0007F2  0012               	return	
   852  0007F4                     l909:
   853                           
   854                           ;glcd.h: 317: glcd_write(0x00);
   855  0007F4  0E00               	movlw	0
   856  0007F6  ECCA  F007         	call	_glcd_write
   857                           
   858                           ;glcd.h: 318: glcd_write(0x7F);
   859  0007FA  0E7F               	movlw	127
   860  0007FC  ECCA  F007         	call	_glcd_write
   861                           
   862                           ;glcd.h: 319: glcd_write(0x40);
   863  000800  0E40               	movlw	64
   864  000802  ECCA  F007         	call	_glcd_write
   865                           
   866                           ;glcd.h: 320: glcd_write(0x40);
   867  000806  0E40               	movlw	64
   868  000808  ECCA  F007         	call	_glcd_write
   869                           
   870                           ;glcd.h: 321: glcd_write(0x40);
   871  00080C  0E40               	movlw	64
   872  00080E  ECCA  F007         	call	_glcd_write
   873                           
   874                           ;glcd.h: 322: glcd_write(0x40);
   875  000812  0E40               	movlw	64
   876  000814  ECCA  F007         	call	_glcd_write
   877                           
   878                           ;glcd.h: 323: glcd_write(0x00);
   879  000818  0E00               	movlw	0
   880  00081A  ECCA  F007         	call	_glcd_write
   881                           
   882                           ;glcd.h: 324: break;
   883  00081E  0012               	return	
   884  000820                     l911:
   885                           
   886                           ;glcd.h: 327: glcd_write(0x00);
   887  000820  0E00               	movlw	0
   888  000822  ECCA  F007         	call	_glcd_write
   889                           
   890                           ;glcd.h: 328: glcd_write(0x7F);
   891  000826  0E7F               	movlw	127
   892  000828  ECCA  F007         	call	_glcd_write
   893                           
   894                           ;glcd.h: 329: glcd_write(0x02);
   895  00082C  0E02               	movlw	2
   896  00082E  ECCA  F007         	call	_glcd_write
   897                           
   898                           ;glcd.h: 330: glcd_write(0x0C);
   899  000832  0E0C               	movlw	12
   900  000834  ECCA  F007         	call	_glcd_write
   901                           
   902                           ;glcd.h: 331: glcd_write(0x02);
   903  000838  0E02               	movlw	2
   904  00083A  ECCA  F007         	call	_glcd_write
   905                           
   906                           ;glcd.h: 332: glcd_write(0x7F);
   907  00083E  0E7F               	movlw	127
   908  000840  ECCA  F007         	call	_glcd_write
   909                           
   910                           ;glcd.h: 333: glcd_write(0x00);
   911  000844  0E00               	movlw	0
   912  000846  ECCA  F007         	call	_glcd_write
   913                           
   914                           ;glcd.h: 334: break;
   915  00084A  0012               	return	
   916  00084C                     l913:
   917                           
   918                           ;glcd.h: 337: glcd_write(0x00);
   919  00084C  0E00               	movlw	0
   920  00084E  ECCA  F007         	call	_glcd_write
   921                           
   922                           ;glcd.h: 338: glcd_write(0x7F);
   923  000852  0E7F               	movlw	127
   924  000854  ECCA  F007         	call	_glcd_write
   925                           
   926                           ;glcd.h: 339: glcd_write(0x02);
   927  000858  0E02               	movlw	2
   928  00085A  ECCA  F007         	call	_glcd_write
   929                           
   930                           ;glcd.h: 340: glcd_write(0x04);
   931  00085E  0E04               	movlw	4
   932  000860  ECCA  F007         	call	_glcd_write
   933                           
   934                           ;glcd.h: 341: glcd_write(0x08);
   935  000864  0E08               	movlw	8
   936  000866  ECCA  F007         	call	_glcd_write
   937                           
   938                           ;glcd.h: 342: glcd_write(0x7F);
   939  00086A  0E7F               	movlw	127
   940  00086C  ECCA  F007         	call	_glcd_write
   941                           
   942                           ;glcd.h: 343: glcd_write(0x00);
   943  000870  0E00               	movlw	0
   944  000872  ECCA  F007         	call	_glcd_write
   945                           
   946                           ;glcd.h: 344: break;
   947  000876  0012               	return	
   948  000878                     l915:
   949                           
   950                           ;glcd.h: 347: glcd_write(0x00);
   951  000878  0E00               	movlw	0
   952  00087A  ECCA  F007         	call	_glcd_write
   953                           
   954                           ;glcd.h: 348: glcd_write(0x3E);
   955  00087E  0E3E               	movlw	62
   956  000880  ECCA  F007         	call	_glcd_write
   957                           
   958                           ;glcd.h: 349: glcd_write(0x41);
   959  000884  0E41               	movlw	65
   960  000886  ECCA  F007         	call	_glcd_write
   961                           
   962                           ;glcd.h: 350: glcd_write(0x41);
   963  00088A  0E41               	movlw	65
   964  00088C  ECCA  F007         	call	_glcd_write
   965                           
   966                           ;glcd.h: 351: glcd_write(0x41);
   967  000890  0E41               	movlw	65
   968  000892  ECCA  F007         	call	_glcd_write
   969                           
   970                           ;glcd.h: 352: glcd_write(0x3E);
   971  000896  0E3E               	movlw	62
   972  000898  ECCA  F007         	call	_glcd_write
   973                           
   974                           ;glcd.h: 353: glcd_write(0x00);
   975  00089C  0E00               	movlw	0
   976  00089E  ECCA  F007         	call	_glcd_write
   977                           
   978                           ;glcd.h: 354: break;
   979  0008A2  0012               	return	
   980  0008A4                     l917:
   981                           
   982                           ;glcd.h: 357: glcd_write(0x00);
   983  0008A4  0E00               	movlw	0
   984  0008A6  ECCA  F007         	call	_glcd_write
   985                           
   986                           ;glcd.h: 358: glcd_write(0x7F);
   987  0008AA  0E7F               	movlw	127
   988  0008AC  ECCA  F007         	call	_glcd_write
   989                           
   990                           ;glcd.h: 359: glcd_write(0x09);
   991  0008B0  0E09               	movlw	9
   992  0008B2  ECCA  F007         	call	_glcd_write
   993                           
   994                           ;glcd.h: 360: glcd_write(0x09);
   995  0008B6  0E09               	movlw	9
   996  0008B8  ECCA  F007         	call	_glcd_write
   997                           
   998                           ;glcd.h: 361: glcd_write(0x09);
   999  0008BC  0E09               	movlw	9
  1000  0008BE  ECCA  F007         	call	_glcd_write
  1001                           
  1002                           ;glcd.h: 362: glcd_write(0x06);
  1003  0008C2  0E06               	movlw	6
  1004  0008C4  ECCA  F007         	call	_glcd_write
  1005                           
  1006                           ;glcd.h: 363: glcd_write(0x00);
  1007  0008C8  0E00               	movlw	0
  1008  0008CA  ECCA  F007         	call	_glcd_write
  1009                           
  1010                           ;glcd.h: 364: break;
  1011  0008CE  0012               	return	
  1012  0008D0                     l919:
  1013                           
  1014                           ;glcd.h: 367: glcd_write(0x00);
  1015  0008D0  0E00               	movlw	0
  1016  0008D2  ECCA  F007         	call	_glcd_write
  1017                           
  1018                           ;glcd.h: 368: glcd_write(0x1E);
  1019  0008D6  0E1E               	movlw	30
  1020  0008D8  ECCA  F007         	call	_glcd_write
  1021                           
  1022                           ;glcd.h: 369: glcd_write(0x21);
  1023  0008DC  0E21               	movlw	33
  1024  0008DE  ECCA  F007         	call	_glcd_write
  1025                           
  1026                           ;glcd.h: 370: glcd_write(0x21);
  1027  0008E2  0E21               	movlw	33
  1028  0008E4  ECCA  F007         	call	_glcd_write
  1029                           
  1030                           ;glcd.h: 371: glcd_write(0x21);
  1031  0008E8  0E21               	movlw	33
  1032  0008EA  ECCA  F007         	call	_glcd_write
  1033                           
  1034                           ;glcd.h: 372: glcd_write(0x5E);
  1035  0008EE  0E5E               	movlw	94
  1036  0008F0  ECCA  F007         	call	_glcd_write
  1037                           
  1038                           ;glcd.h: 373: glcd_write(0x00);
  1039  0008F4  0E00               	movlw	0
  1040  0008F6  ECCA  F007         	call	_glcd_write
  1041                           
  1042                           ;glcd.h: 374: break;
  1043  0008FA  0012               	return	
  1044  0008FC                     l921:
  1045                           
  1046                           ;glcd.h: 377: glcd_write(0x00);
  1047  0008FC  0E00               	movlw	0
  1048  0008FE  ECCA  F007         	call	_glcd_write
  1049                           
  1050                           ;glcd.h: 378: glcd_write(0x7F);
  1051  000902  0E7F               	movlw	127
  1052  000904  ECCA  F007         	call	_glcd_write
  1053                           
  1054                           ;glcd.h: 379: glcd_write(0x09);
  1055  000908  0E09               	movlw	9
  1056  00090A  ECCA  F007         	call	_glcd_write
  1057                           
  1058                           ;glcd.h: 380: glcd_write(0x09);
  1059  00090E  0E09               	movlw	9
  1060  000910  ECCA  F007         	call	_glcd_write
  1061                           
  1062                           ;glcd.h: 381: glcd_write(0x09);
  1063  000914  0E09               	movlw	9
  1064  000916  ECCA  F007         	call	_glcd_write
  1065                           
  1066                           ;glcd.h: 382: glcd_write(0x76);
  1067  00091A  0E76               	movlw	118
  1068  00091C  ECCA  F007         	call	_glcd_write
  1069                           
  1070                           ;glcd.h: 383: glcd_write(0x00);
  1071  000920  0E00               	movlw	0
  1072  000922  ECCA  F007         	call	_glcd_write
  1073                           
  1074                           ;glcd.h: 384: break;
  1075  000926  0012               	return	
  1076  000928                     l923:
  1077                           
  1078                           ;glcd.h: 387: glcd_write(0x00);
  1079  000928  0E00               	movlw	0
  1080  00092A  ECCA  F007         	call	_glcd_write
  1081                           
  1082                           ;glcd.h: 388: glcd_write(0x26);
  1083  00092E  0E26               	movlw	38
  1084  000930  ECCA  F007         	call	_glcd_write
  1085                           
  1086                           ;glcd.h: 389: glcd_write(0x49);
  1087  000934  0E49               	movlw	73
  1088  000936  ECCA  F007         	call	_glcd_write
  1089                           
  1090                           ;glcd.h: 390: glcd_write(0x49);
  1091  00093A  0E49               	movlw	73
  1092  00093C  ECCA  F007         	call	_glcd_write
  1093                           
  1094                           ;glcd.h: 391: glcd_write(0x49);
  1095  000940  0E49               	movlw	73
  1096  000942  ECCA  F007         	call	_glcd_write
  1097                           
  1098                           ;glcd.h: 392: glcd_write(0x32);
  1099  000946  0E32               	movlw	50
  1100  000948  ECCA  F007         	call	_glcd_write
  1101                           
  1102                           ;glcd.h: 393: glcd_write(0x00);
  1103  00094C  0E00               	movlw	0
  1104  00094E  ECCA  F007         	call	_glcd_write
  1105                           
  1106                           ;glcd.h: 394: break;
  1107  000952  0012               	return	
  1108  000954                     l925:
  1109                           
  1110                           ;glcd.h: 397: glcd_write(0x00);
  1111  000954  0E00               	movlw	0
  1112  000956  ECCA  F007         	call	_glcd_write
  1113                           
  1114                           ;glcd.h: 398: glcd_write(0x01);
  1115  00095A  0E01               	movlw	1
  1116  00095C  ECCA  F007         	call	_glcd_write
  1117                           
  1118                           ;glcd.h: 399: glcd_write(0x01);
  1119  000960  0E01               	movlw	1
  1120  000962  ECCA  F007         	call	_glcd_write
  1121                           
  1122                           ;glcd.h: 400: glcd_write(0x7F);
  1123  000966  0E7F               	movlw	127
  1124  000968  ECCA  F007         	call	_glcd_write
  1125                           
  1126                           ;glcd.h: 401: glcd_write(0x01);
  1127  00096C  0E01               	movlw	1
  1128  00096E  ECCA  F007         	call	_glcd_write
  1129                           
  1130                           ;glcd.h: 402: glcd_write(0x01);
  1131  000972  0E01               	movlw	1
  1132  000974  ECCA  F007         	call	_glcd_write
  1133                           
  1134                           ;glcd.h: 403: glcd_write(0x00);
  1135  000978  0E00               	movlw	0
  1136  00097A  ECCA  F007         	call	_glcd_write
  1137                           
  1138                           ;glcd.h: 404: break;
  1139  00097E  0012               	return	
  1140  000980                     l927:
  1141                           
  1142                           ;glcd.h: 407: glcd_write(0x00);
  1143  000980  0E00               	movlw	0
  1144  000982  ECCA  F007         	call	_glcd_write
  1145                           
  1146                           ;glcd.h: 408: glcd_write(0x3F);
  1147  000986  0E3F               	movlw	63
  1148  000988  ECCA  F007         	call	_glcd_write
  1149                           
  1150                           ;glcd.h: 409: glcd_write(0x40);
  1151  00098C  0E40               	movlw	64
  1152  00098E  ECCA  F007         	call	_glcd_write
  1153                           
  1154                           ;glcd.h: 410: glcd_write(0x40);
  1155  000992  0E40               	movlw	64
  1156  000994  ECCA  F007         	call	_glcd_write
  1157                           
  1158                           ;glcd.h: 411: glcd_write(0x40);
  1159  000998  0E40               	movlw	64
  1160  00099A  ECCA  F007         	call	_glcd_write
  1161                           
  1162                           ;glcd.h: 412: glcd_write(0x3F);
  1163  00099E  0E3F               	movlw	63
  1164  0009A0  ECCA  F007         	call	_glcd_write
  1165                           
  1166                           ;glcd.h: 413: glcd_write(0x00);
  1167  0009A4  0E00               	movlw	0
  1168  0009A6  ECCA  F007         	call	_glcd_write
  1169                           
  1170                           ;glcd.h: 414: break;
  1171  0009AA  0012               	return	
  1172  0009AC                     l929:
  1173                           
  1174                           ;glcd.h: 417: glcd_write(0x00);
  1175  0009AC  0E00               	movlw	0
  1176  0009AE  ECCA  F007         	call	_glcd_write
  1177                           
  1178                           ;glcd.h: 418: glcd_write(0x1F);
  1179  0009B2  0E1F               	movlw	31
  1180  0009B4  ECCA  F007         	call	_glcd_write
  1181                           
  1182                           ;glcd.h: 419: glcd_write(0x20);
  1183  0009B8  0E20               	movlw	32
  1184  0009BA  ECCA  F007         	call	_glcd_write
  1185                           
  1186                           ;glcd.h: 420: glcd_write(0x40);
  1187  0009BE  0E40               	movlw	64
  1188  0009C0  ECCA  F007         	call	_glcd_write
  1189                           
  1190                           ;glcd.h: 421: glcd_write(0x20);
  1191  0009C4  0E20               	movlw	32
  1192  0009C6  ECCA  F007         	call	_glcd_write
  1193                           
  1194                           ;glcd.h: 422: glcd_write(0x1F);
  1195  0009CA  0E1F               	movlw	31
  1196  0009CC  ECCA  F007         	call	_glcd_write
  1197                           
  1198                           ;glcd.h: 423: glcd_write(0x00);
  1199  0009D0  0E00               	movlw	0
  1200  0009D2  ECCA  F007         	call	_glcd_write
  1201                           
  1202                           ;glcd.h: 424: break;
  1203  0009D6  0012               	return	
  1204  0009D8                     l931:
  1205                           
  1206                           ;glcd.h: 427: glcd_write(0x00);
  1207  0009D8  0E00               	movlw	0
  1208  0009DA  ECCA  F007         	call	_glcd_write
  1209                           
  1210                           ;glcd.h: 428: glcd_write(0x7F);
  1211  0009DE  0E7F               	movlw	127
  1212  0009E0  ECCA  F007         	call	_glcd_write
  1213                           
  1214                           ;glcd.h: 429: glcd_write(0x20);
  1215  0009E4  0E20               	movlw	32
  1216  0009E6  ECCA  F007         	call	_glcd_write
  1217                           
  1218                           ;glcd.h: 430: glcd_write(0x10);
  1219  0009EA  0E10               	movlw	16
  1220  0009EC  ECCA  F007         	call	_glcd_write
  1221                           
  1222                           ;glcd.h: 431: glcd_write(0x20);
  1223  0009F0  0E20               	movlw	32
  1224  0009F2  ECCA  F007         	call	_glcd_write
  1225                           
  1226                           ;glcd.h: 432: glcd_write(0x7F);
  1227  0009F6  0E7F               	movlw	127
  1228  0009F8  ECCA  F007         	call	_glcd_write
  1229                           
  1230                           ;glcd.h: 433: glcd_write(0x00);
  1231  0009FC  0E00               	movlw	0
  1232  0009FE  ECCA  F007         	call	_glcd_write
  1233                           
  1234                           ;glcd.h: 434: break;
  1235  000A02  0012               	return	
  1236  000A04                     l933:
  1237                           
  1238                           ;glcd.h: 437: glcd_write(0x00);
  1239  000A04  0E00               	movlw	0
  1240  000A06  ECCA  F007         	call	_glcd_write
  1241                           
  1242                           ;glcd.h: 438: glcd_write(0x41);
  1243  000A0A  0E41               	movlw	65
  1244  000A0C  ECCA  F007         	call	_glcd_write
  1245                           
  1246                           ;glcd.h: 439: glcd_write(0x22);
  1247  000A10  0E22               	movlw	34
  1248  000A12  ECCA  F007         	call	_glcd_write
  1249                           
  1250                           ;glcd.h: 440: glcd_write(0x1C);
  1251  000A16  0E1C               	movlw	28
  1252  000A18  ECCA  F007         	call	_glcd_write
  1253                           
  1254                           ;glcd.h: 441: glcd_write(0x22);
  1255  000A1C  0E22               	movlw	34
  1256  000A1E  ECCA  F007         	call	_glcd_write
  1257                           
  1258                           ;glcd.h: 442: glcd_write(0x41);
  1259  000A22  0E41               	movlw	65
  1260  000A24  ECCA  F007         	call	_glcd_write
  1261                           
  1262                           ;glcd.h: 443: glcd_write(0x00);
  1263  000A28  0E00               	movlw	0
  1264  000A2A  ECCA  F007         	call	_glcd_write
  1265                           
  1266                           ;glcd.h: 444: break;
  1267  000A2E  0012               	return	
  1268  000A30                     l935:
  1269                           
  1270                           ;glcd.h: 447: glcd_write(0x00);
  1271  000A30  0E00               	movlw	0
  1272  000A32  ECCA  F007         	call	_glcd_write
  1273                           
  1274                           ;glcd.h: 448: glcd_write(0x07);
  1275  000A36  0E07               	movlw	7
  1276  000A38  ECCA  F007         	call	_glcd_write
  1277                           
  1278                           ;glcd.h: 449: glcd_write(0x08);
  1279  000A3C  0E08               	movlw	8
  1280  000A3E  ECCA  F007         	call	_glcd_write
  1281                           
  1282                           ;glcd.h: 450: glcd_write(0x70);
  1283  000A42  0E70               	movlw	112
  1284  000A44  ECCA  F007         	call	_glcd_write
  1285                           
  1286                           ;glcd.h: 451: glcd_write(0x08);
  1287  000A48  0E08               	movlw	8
  1288  000A4A  ECCA  F007         	call	_glcd_write
  1289                           
  1290                           ;glcd.h: 452: glcd_write(0x07);
  1291  000A4E  0E07               	movlw	7
  1292  000A50  ECCA  F007         	call	_glcd_write
  1293                           
  1294                           ;glcd.h: 453: glcd_write(0x00);
  1295  000A54  0E00               	movlw	0
  1296  000A56  ECCA  F007         	call	_glcd_write
  1297                           
  1298                           ;glcd.h: 454: break;
  1299  000A5A  0012               	return	
  1300  000A5C                     l937:
  1301                           
  1302                           ;glcd.h: 457: glcd_write(0x00);
  1303  000A5C  0E00               	movlw	0
  1304  000A5E  ECCA  F007         	call	_glcd_write
  1305                           
  1306                           ;glcd.h: 458: glcd_write(0x61);
  1307  000A62  0E61               	movlw	97
  1308  000A64  ECCA  F007         	call	_glcd_write
  1309                           
  1310                           ;glcd.h: 459: glcd_write(0x51);
  1311  000A68  0E51               	movlw	81
  1312  000A6A  ECCA  F007         	call	_glcd_write
  1313                           
  1314                           ;glcd.h: 460: glcd_write(0x49);
  1315  000A6E  0E49               	movlw	73
  1316  000A70  ECCA  F007         	call	_glcd_write
  1317                           
  1318                           ;glcd.h: 461: glcd_write(0x45);
  1319  000A74  0E45               	movlw	69
  1320  000A76  ECCA  F007         	call	_glcd_write
  1321                           
  1322                           ;glcd.h: 462: glcd_write(0x43);
  1323  000A7A  0E43               	movlw	67
  1324  000A7C  ECCA  F007         	call	_glcd_write
  1325                           
  1326                           ;glcd.h: 463: glcd_write(0x00);
  1327  000A80  0E00               	movlw	0
  1328  000A82  ECCA  F007         	call	_glcd_write
  1329                           
  1330                           ;glcd.h: 464: break;
  1331  000A86  0012               	return	
  1332  000A88                     l939:
  1333                           
  1334                           ;glcd.h: 467: glcd_write(0x00);
  1335  000A88  0E00               	movlw	0
  1336  000A8A  ECCA  F007         	call	_glcd_write
  1337                           
  1338                           ;glcd.h: 468: glcd_write(0x3E);
  1339  000A8E  0E3E               	movlw	62
  1340  000A90  ECCA  F007         	call	_glcd_write
  1341                           
  1342                           ;glcd.h: 469: glcd_write(0x51);
  1343  000A94  0E51               	movlw	81
  1344  000A96  ECCA  F007         	call	_glcd_write
  1345                           
  1346                           ;glcd.h: 470: glcd_write(0x49);
  1347  000A9A  0E49               	movlw	73
  1348  000A9C  ECCA  F007         	call	_glcd_write
  1349                           
  1350                           ;glcd.h: 471: glcd_write(0x45);
  1351  000AA0  0E45               	movlw	69
  1352  000AA2  ECCA  F007         	call	_glcd_write
  1353                           
  1354                           ;glcd.h: 472: glcd_write(0x3E);
  1355  000AA6  0E3E               	movlw	62
  1356  000AA8  ECCA  F007         	call	_glcd_write
  1357                           
  1358                           ;glcd.h: 473: glcd_write(0x00);
  1359  000AAC  0E00               	movlw	0
  1360  000AAE  ECCA  F007         	call	_glcd_write
  1361                           
  1362                           ;glcd.h: 474: break;
  1363  000AB2  0012               	return	
  1364  000AB4                     l941:
  1365                           
  1366                           ;glcd.h: 477: glcd_write(0x00);
  1367  000AB4  0E00               	movlw	0
  1368  000AB6  ECCA  F007         	call	_glcd_write
  1369                           
  1370                           ;glcd.h: 478: glcd_write(0x04);
  1371  000ABA  0E04               	movlw	4
  1372  000ABC  ECCA  F007         	call	_glcd_write
  1373                           
  1374                           ;glcd.h: 479: glcd_write(0x02);
  1375  000AC0  0E02               	movlw	2
  1376  000AC2  ECCA  F007         	call	_glcd_write
  1377                           
  1378                           ;glcd.h: 480: glcd_write(0x7F);
  1379  000AC6  0E7F               	movlw	127
  1380  000AC8  ECCA  F007         	call	_glcd_write
  1381                           
  1382                           ;glcd.h: 481: glcd_write(0x00);
  1383  000ACC  0E00               	movlw	0
  1384  000ACE  ECCA  F007         	call	_glcd_write
  1385                           
  1386                           ;glcd.h: 482: glcd_write(0x00);
  1387  000AD2  0E00               	movlw	0
  1388  000AD4  ECCA  F007         	call	_glcd_write
  1389                           
  1390                           ;glcd.h: 483: glcd_write(0x00);
  1391  000AD8  0E00               	movlw	0
  1392  000ADA  ECCA  F007         	call	_glcd_write
  1393                           
  1394                           ;glcd.h: 484: break;
  1395  000ADE  0012               	return	
  1396  000AE0                     l943:
  1397                           
  1398                           ;glcd.h: 487: glcd_write(0x00);
  1399  000AE0  0E00               	movlw	0
  1400  000AE2  ECCA  F007         	call	_glcd_write
  1401                           
  1402                           ;glcd.h: 488: glcd_write(0x42);
  1403  000AE6  0E42               	movlw	66
  1404  000AE8  ECCA  F007         	call	_glcd_write
  1405                           
  1406                           ;glcd.h: 489: glcd_write(0x61);
  1407  000AEC  0E61               	movlw	97
  1408  000AEE  ECCA  F007         	call	_glcd_write
  1409                           
  1410                           ;glcd.h: 490: glcd_write(0x51);
  1411  000AF2  0E51               	movlw	81
  1412  000AF4  ECCA  F007         	call	_glcd_write
  1413                           
  1414                           ;glcd.h: 491: glcd_write(0x49);
  1415  000AF8  0E49               	movlw	73
  1416  000AFA  ECCA  F007         	call	_glcd_write
  1417                           
  1418                           ;glcd.h: 492: glcd_write(0x46);
  1419  000AFE  0E46               	movlw	70
  1420  000B00  ECCA  F007         	call	_glcd_write
  1421                           
  1422                           ;glcd.h: 493: glcd_write(0x00);
  1423  000B04  0E00               	movlw	0
  1424  000B06  ECCA  F007         	call	_glcd_write
  1425                           
  1426                           ;glcd.h: 494: break;
  1427  000B0A  0012               	return	
  1428  000B0C                     l945:
  1429                           
  1430                           ;glcd.h: 497: glcd_write(0x00);
  1431  000B0C  0E00               	movlw	0
  1432  000B0E  ECCA  F007         	call	_glcd_write
  1433                           
  1434                           ;glcd.h: 498: glcd_write(0x22);
  1435  000B12  0E22               	movlw	34
  1436  000B14  ECCA  F007         	call	_glcd_write
  1437                           
  1438                           ;glcd.h: 499: glcd_write(0x41);
  1439  000B18  0E41               	movlw	65
  1440  000B1A  ECCA  F007         	call	_glcd_write
  1441                           
  1442                           ;glcd.h: 500: glcd_write(0x49);
  1443  000B1E  0E49               	movlw	73
  1444  000B20  ECCA  F007         	call	_glcd_write
  1445                           
  1446                           ;glcd.h: 501: glcd_write(0x49);
  1447  000B24  0E49               	movlw	73
  1448  000B26  ECCA  F007         	call	_glcd_write
  1449                           
  1450                           ;glcd.h: 502: glcd_write(0x36);
  1451  000B2A  0E36               	movlw	54
  1452  000B2C  ECCA  F007         	call	_glcd_write
  1453                           
  1454                           ;glcd.h: 503: glcd_write(0x00);
  1455  000B30  0E00               	movlw	0
  1456  000B32  ECCA  F007         	call	_glcd_write
  1457                           
  1458                           ;glcd.h: 504: break;
  1459  000B36  0012               	return	
  1460  000B38                     l947:
  1461                           
  1462                           ;glcd.h: 507: glcd_write(0x00);
  1463  000B38  0E00               	movlw	0
  1464  000B3A  ECCA  F007         	call	_glcd_write
  1465                           
  1466                           ;glcd.h: 508: glcd_write(0x18);
  1467  000B3E  0E18               	movlw	24
  1468  000B40  ECCA  F007         	call	_glcd_write
  1469                           
  1470                           ;glcd.h: 509: glcd_write(0x14);
  1471  000B44  0E14               	movlw	20
  1472  000B46  ECCA  F007         	call	_glcd_write
  1473                           
  1474                           ;glcd.h: 510: glcd_write(0x12);
  1475  000B4A  0E12               	movlw	18
  1476  000B4C  ECCA  F007         	call	_glcd_write
  1477                           
  1478                           ;glcd.h: 511: glcd_write(0x7F);
  1479  000B50  0E7F               	movlw	127
  1480  000B52  ECCA  F007         	call	_glcd_write
  1481                           
  1482                           ;glcd.h: 512: glcd_write(0x10);
  1483  000B56  0E10               	movlw	16
  1484  000B58  ECCA  F007         	call	_glcd_write
  1485                           
  1486                           ;glcd.h: 513: glcd_write(0x00);
  1487  000B5C  0E00               	movlw	0
  1488  000B5E  ECCA  F007         	call	_glcd_write
  1489                           
  1490                           ;glcd.h: 514: break;
  1491  000B62  0012               	return	
  1492  000B64                     l949:
  1493                           
  1494                           ;glcd.h: 517: glcd_write(0x00);
  1495  000B64  0E00               	movlw	0
  1496  000B66  ECCA  F007         	call	_glcd_write
  1497                           
  1498                           ;glcd.h: 518: glcd_write(0x27);
  1499  000B6A  0E27               	movlw	39
  1500  000B6C  ECCA  F007         	call	_glcd_write
  1501                           
  1502                           ;glcd.h: 519: glcd_write(0x45);
  1503  000B70  0E45               	movlw	69
  1504  000B72  ECCA  F007         	call	_glcd_write
  1505                           
  1506                           ;glcd.h: 520: glcd_write(0x45);
  1507  000B76  0E45               	movlw	69
  1508  000B78  ECCA  F007         	call	_glcd_write
  1509                           
  1510                           ;glcd.h: 521: glcd_write(0x45);
  1511  000B7C  0E45               	movlw	69
  1512  000B7E  ECCA  F007         	call	_glcd_write
  1513                           
  1514                           ;glcd.h: 522: glcd_write(0x39);
  1515  000B82  0E39               	movlw	57
  1516  000B84  ECCA  F007         	call	_glcd_write
  1517                           
  1518                           ;glcd.h: 523: glcd_write(0x00);
  1519  000B88  0E00               	movlw	0
  1520  000B8A  ECCA  F007         	call	_glcd_write
  1521                           
  1522                           ;glcd.h: 524: break;
  1523  000B8E  0012               	return	
  1524  000B90                     l951:
  1525                           
  1526                           ;glcd.h: 527: glcd_write(0x00);
  1527  000B90  0E00               	movlw	0
  1528  000B92  ECCA  F007         	call	_glcd_write
  1529                           
  1530                           ;glcd.h: 528: glcd_write(0x3E);
  1531  000B96  0E3E               	movlw	62
  1532  000B98  ECCA  F007         	call	_glcd_write
  1533                           
  1534                           ;glcd.h: 529: glcd_write(0x49);
  1535  000B9C  0E49               	movlw	73
  1536  000B9E  ECCA  F007         	call	_glcd_write
  1537                           
  1538                           ;glcd.h: 530: glcd_write(0x49);
  1539  000BA2  0E49               	movlw	73
  1540  000BA4  ECCA  F007         	call	_glcd_write
  1541                           
  1542                           ;glcd.h: 531: glcd_write(0x49);
  1543  000BA8  0E49               	movlw	73
  1544  000BAA  ECCA  F007         	call	_glcd_write
  1545                           
  1546                           ;glcd.h: 532: glcd_write(0x32);
  1547  000BAE  0E32               	movlw	50
  1548  000BB0  ECCA  F007         	call	_glcd_write
  1549                           
  1550                           ;glcd.h: 533: glcd_write(0x00);
  1551  000BB4  0E00               	movlw	0
  1552  000BB6  ECCA  F007         	call	_glcd_write
  1553                           
  1554                           ;glcd.h: 534: break;
  1555  000BBA  0012               	return	
  1556  000BBC                     l953:
  1557                           
  1558                           ;glcd.h: 537: glcd_write(0x00);
  1559  000BBC  0E00               	movlw	0
  1560  000BBE  ECCA  F007         	call	_glcd_write
  1561                           
  1562                           ;glcd.h: 538: glcd_write(0x01);
  1563  000BC2  0E01               	movlw	1
  1564  000BC4  ECCA  F007         	call	_glcd_write
  1565                           
  1566                           ;glcd.h: 539: glcd_write(0x01);
  1567  000BC8  0E01               	movlw	1
  1568  000BCA  ECCA  F007         	call	_glcd_write
  1569                           
  1570                           ;glcd.h: 540: glcd_write(0x71);
  1571  000BCE  0E71               	movlw	113
  1572  000BD0  ECCA  F007         	call	_glcd_write
  1573                           
  1574                           ;glcd.h: 541: glcd_write(0x09);
  1575  000BD4  0E09               	movlw	9
  1576  000BD6  ECCA  F007         	call	_glcd_write
  1577                           
  1578                           ;glcd.h: 542: glcd_write(0x07);
  1579  000BDA  0E07               	movlw	7
  1580  000BDC  ECCA  F007         	call	_glcd_write
  1581                           
  1582                           ;glcd.h: 543: glcd_write(0x00);
  1583  000BE0  0E00               	movlw	0
  1584  000BE2  ECCA  F007         	call	_glcd_write
  1585                           
  1586                           ;glcd.h: 544: break;
  1587  000BE6  0012               	return	
  1588  000BE8                     l955:
  1589                           
  1590                           ;glcd.h: 547: glcd_write(0x00);
  1591  000BE8  0E00               	movlw	0
  1592  000BEA  ECCA  F007         	call	_glcd_write
  1593                           
  1594                           ;glcd.h: 548: glcd_write(0x36);
  1595  000BEE  0E36               	movlw	54
  1596  000BF0  ECCA  F007         	call	_glcd_write
  1597                           
  1598                           ;glcd.h: 549: glcd_write(0x49);
  1599  000BF4  0E49               	movlw	73
  1600  000BF6  ECCA  F007         	call	_glcd_write
  1601                           
  1602                           ;glcd.h: 550: glcd_write(0x49);
  1603  000BFA  0E49               	movlw	73
  1604  000BFC  ECCA  F007         	call	_glcd_write
  1605                           
  1606                           ;glcd.h: 551: glcd_write(0x49);
  1607  000C00  0E49               	movlw	73
  1608  000C02  ECCA  F007         	call	_glcd_write
  1609                           
  1610                           ;glcd.h: 552: glcd_write(0x36);
  1611  000C06  0E36               	movlw	54
  1612  000C08  ECCA  F007         	call	_glcd_write
  1613                           
  1614                           ;glcd.h: 553: glcd_write(0x00);
  1615  000C0C  0E00               	movlw	0
  1616  000C0E  ECCA  F007         	call	_glcd_write
  1617                           
  1618                           ;glcd.h: 554: break;
  1619  000C12  0012               	return	
  1620  000C14                     l957:
  1621                           
  1622                           ;glcd.h: 557: glcd_write(0x00);
  1623  000C14  0E00               	movlw	0
  1624  000C16  ECCA  F007         	call	_glcd_write
  1625                           
  1626                           ;glcd.h: 558: glcd_write(0x26);
  1627  000C1A  0E26               	movlw	38
  1628  000C1C  ECCA  F007         	call	_glcd_write
  1629                           
  1630                           ;glcd.h: 559: glcd_write(0x49);
  1631  000C20  0E49               	movlw	73
  1632  000C22  ECCA  F007         	call	_glcd_write
  1633                           
  1634                           ;glcd.h: 560: glcd_write(0x49);
  1635  000C26  0E49               	movlw	73
  1636  000C28  ECCA  F007         	call	_glcd_write
  1637                           
  1638                           ;glcd.h: 561: glcd_write(0x49);
  1639  000C2C  0E49               	movlw	73
  1640  000C2E  ECCA  F007         	call	_glcd_write
  1641                           
  1642                           ;glcd.h: 562: glcd_write(0x3E);
  1643  000C32  0E3E               	movlw	62
  1644  000C34  ECCA  F007         	call	_glcd_write
  1645                           
  1646                           ;glcd.h: 563: glcd_write(0x00);
  1647  000C38  0E00               	movlw	0
  1648  000C3A  ECCA  F007         	call	_glcd_write
  1649                           
  1650                           ;glcd.h: 564: break;
  1651  000C3E  0012               	return	
  1652  000C40                     l959:
  1653                           
  1654                           ;glcd.h: 567: glcd_write(0x00);
  1655  000C40  0E00               	movlw	0
  1656  000C42  ECCA  F007         	call	_glcd_write
  1657                           
  1658                           ;glcd.h: 568: glcd_write(0x00);
  1659  000C46  0E00               	movlw	0
  1660  000C48  ECCA  F007         	call	_glcd_write
  1661                           
  1662                           ;glcd.h: 569: glcd_write(0x00);
  1663  000C4C  0E00               	movlw	0
  1664  000C4E  ECCA  F007         	call	_glcd_write
  1665                           
  1666                           ;glcd.h: 570: glcd_write(0x00);
  1667  000C52  0E00               	movlw	0
  1668  000C54  ECCA  F007         	call	_glcd_write
  1669                           
  1670                           ;glcd.h: 571: glcd_write(0x00);
  1671  000C58  0E00               	movlw	0
  1672  000C5A  ECCA  F007         	call	_glcd_write
  1673                           
  1674                           ;glcd.h: 572: break;
  1675  000C5E  0012               	return	
  1676  000C60                     l961:
  1677                           
  1678                           ;glcd.h: 575: glcd_write(0xFF);
  1679  000C60  0EFF               	movlw	255
  1680  000C62  ECCA  F007         	call	_glcd_write
  1681                           
  1682                           ;glcd.h: 576: glcd_write(0xFF);
  1683  000C66  0EFF               	movlw	255
  1684  000C68  ECCA  F007         	call	_glcd_write
  1685                           
  1686                           ;glcd.h: 577: glcd_write(0xFF);
  1687  000C6C  0EFF               	movlw	255
  1688  000C6E  ECCA  F007         	call	_glcd_write
  1689                           
  1690                           ;glcd.h: 578: glcd_write(0xFF);
  1691  000C72  0EFF               	movlw	255
  1692  000C74  ECCA  F007         	call	_glcd_write
  1693                           
  1694                           ;glcd.h: 579: glcd_write(0xFF);
  1695  000C78  0EFF               	movlw	255
  1696  000C7A  ECCA  F007         	call	_glcd_write
  1697                           
  1698                           ;glcd.h: 580: break;
  1699  000C7E  0012               	return	
  1700  000C80                     l963:
  1701                           
  1702                           ;glcd.h: 583: glcd_write(0xFF);
  1703  000C80  0EFF               	movlw	255
  1704  000C82  ECCA  F007         	call	_glcd_write
  1705                           
  1706                           ;glcd.h: 584: break;
  1707  000C86  0012               	return	
  1708  000C88                     l965:
  1709                           
  1710                           ;glcd.h: 587: glcd_write(0x00);
  1711  000C88  0E00               	movlw	0
  1712  000C8A  ECCA  F007         	call	_glcd_write
  1713                           
  1714                           ;glcd.h: 588: glcd_write(0x0C);
  1715  000C8E  0E0C               	movlw	12
  1716  000C90  ECCA  F007         	call	_glcd_write
  1717                           
  1718                           ;glcd.h: 589: glcd_write(0x12);
  1719  000C94  0E12               	movlw	18
  1720  000C96  ECCA  F007         	call	_glcd_write
  1721                           
  1722                           ;glcd.h: 590: glcd_write(0x12);
  1723  000C9A  0E12               	movlw	18
  1724  000C9C  ECCA  F007         	call	_glcd_write
  1725                           
  1726                           ;glcd.h: 591: glcd_write(0x0C);
  1727  000CA0  0E0C               	movlw	12
  1728  000CA2  ECCA  F007         	call	_glcd_write
  1729                           
  1730                           ;glcd.h: 592: glcd_write(0x00);
  1731  000CA6  0E00               	movlw	0
  1732  000CA8  ECCA  F007         	call	_glcd_write
  1733                           
  1734                           ;glcd.h: 598: }
  1735                           
  1736                           ;glcd.h: 597: break;
  1737                           
  1738                           ;glcd.h: 596: default:
  1739                           
  1740                           ;glcd.h: 593: break;
  1741  000CAC  0012               	return	
  1742  000CAE                     l969:
  1743  000CAE  5002               	movf	glcd_text@text,w,c
  1744                           
  1745                           ; Switch size 1, requested type "space"
  1746                           ; Number of cases is 40, Range of values is 20 to 124
  1747                           ; switch strategies available:
  1748                           ; Name         Instructions Cycles
  1749                           ; simple_byte          121    61 (average)
  1750                           ;	Chosen strategy is simple_byte
  1751  000CB0  0A14               	xorlw	20	; case 20
  1752  000CB2  B4D8               	btfsc	status,2,c
  1753  000CB4  D7E5               	goto	l963
  1754  000CB6  0A34               	xorlw	52	; case 32
  1755  000CB8  B4D8               	btfsc	status,2,c
  1756  000CBA  D7C2               	goto	l959
  1757  000CBC  0A0A               	xorlw	10	; case 42
  1758  000CBE  B4D8               	btfsc	status,2,c
  1759  000CC0  D7E3               	goto	l965
  1760  000CC2  0A1A               	xorlw	26	; case 48
  1761  000CC4  B4D8               	btfsc	status,2,c
  1762  000CC6  D6E0               	goto	l939
  1763  000CC8  0A01               	xorlw	1	; case 49
  1764  000CCA  B4D8               	btfsc	status,2,c
  1765  000CCC  D6F3               	goto	l941
  1766  000CCE  0A03               	xorlw	3	; case 50
  1767  000CD0  B4D8               	btfsc	status,2,c
  1768  000CD2  D706               	goto	l943
  1769  000CD4  0A01               	xorlw	1	; case 51
  1770  000CD6  B4D8               	btfsc	status,2,c
  1771  000CD8  D719               	goto	l945
  1772  000CDA  0A07               	xorlw	7	; case 52
  1773  000CDC  B4D8               	btfsc	status,2,c
  1774  000CDE  D72C               	goto	l947
  1775  000CE0  0A01               	xorlw	1	; case 53
  1776  000CE2  B4D8               	btfsc	status,2,c
  1777  000CE4  D73F               	goto	l949
  1778  000CE6  0A03               	xorlw	3	; case 54
  1779  000CE8  B4D8               	btfsc	status,2,c
  1780  000CEA  D752               	goto	l951
  1781  000CEC  0A01               	xorlw	1	; case 55
  1782  000CEE  B4D8               	btfsc	status,2,c
  1783  000CF0  D765               	goto	l953
  1784  000CF2  0A0F               	xorlw	15	; case 56
  1785  000CF4  B4D8               	btfsc	status,2,c
  1786  000CF6  D778               	goto	l955
  1787  000CF8  0A01               	xorlw	1	; case 57
  1788  000CFA  B4D8               	btfsc	status,2,c
  1789  000CFC  D78B               	goto	l957
  1790  000CFE  0A78               	xorlw	120	; case 65
  1791  000D00  B4D8               	btfsc	status,2,c
  1792  000D02  D486               	goto	l887
  1793  000D04  0A03               	xorlw	3	; case 66
  1794  000D06  B4D8               	btfsc	status,2,c
  1795  000D08  D499               	goto	l889
  1796  000D0A  0A01               	xorlw	1	; case 67
  1797  000D0C  B4D8               	btfsc	status,2,c
  1798  000D0E  D4AC               	goto	l891
  1799  000D10  0A07               	xorlw	7	; case 68
  1800  000D12  B4D8               	btfsc	status,2,c
  1801  000D14  D4BF               	goto	l893
  1802  000D16  0A01               	xorlw	1	; case 69
  1803  000D18  B4D8               	btfsc	status,2,c
  1804  000D1A  D4D2               	goto	l895
  1805  000D1C  0A03               	xorlw	3	; case 70
  1806  000D1E  B4D8               	btfsc	status,2,c
  1807  000D20  D4E5               	goto	l897
  1808  000D22  0A01               	xorlw	1	; case 71
  1809  000D24  B4D8               	btfsc	status,2,c
  1810  000D26  D4F8               	goto	l899
  1811  000D28  0A0F               	xorlw	15	; case 72
  1812  000D2A  B4D8               	btfsc	status,2,c
  1813  000D2C  D50B               	goto	l901
  1814  000D2E  0A01               	xorlw	1	; case 73
  1815  000D30  B4D8               	btfsc	status,2,c
  1816  000D32  D51E               	goto	l903
  1817  000D34  0A03               	xorlw	3	; case 74
  1818  000D36  B4D8               	btfsc	status,2,c
  1819  000D38  D531               	goto	l905
  1820  000D3A  0A01               	xorlw	1	; case 75
  1821  000D3C  B4D8               	btfsc	status,2,c
  1822  000D3E  D544               	goto	l907
  1823  000D40  0A07               	xorlw	7	; case 76
  1824  000D42  B4D8               	btfsc	status,2,c
  1825  000D44  D557               	goto	l909
  1826  000D46  0A01               	xorlw	1	; case 77
  1827  000D48  B4D8               	btfsc	status,2,c
  1828  000D4A  D56A               	goto	l911
  1829  000D4C  0A03               	xorlw	3	; case 78
  1830  000D4E  B4D8               	btfsc	status,2,c
  1831  000D50  D57D               	goto	l913
  1832  000D52  0A01               	xorlw	1	; case 79
  1833  000D54  B4D8               	btfsc	status,2,c
  1834  000D56  D590               	goto	l915
  1835  000D58  0A1F               	xorlw	31	; case 80
  1836  000D5A  B4D8               	btfsc	status,2,c
  1837  000D5C  D5A3               	goto	l917
  1838  000D5E  0A01               	xorlw	1	; case 81
  1839  000D60  B4D8               	btfsc	status,2,c
  1840  000D62  D5B6               	goto	l919
  1841  000D64  0A03               	xorlw	3	; case 82
  1842  000D66  B4D8               	btfsc	status,2,c
  1843  000D68  D5C9               	goto	l921
  1844  000D6A  0A01               	xorlw	1	; case 83
  1845  000D6C  B4D8               	btfsc	status,2,c
  1846  000D6E  D5DC               	goto	l923
  1847  000D70  0A07               	xorlw	7	; case 84
  1848  000D72  B4D8               	btfsc	status,2,c
  1849  000D74  D5EF               	goto	l925
  1850  000D76  0A01               	xorlw	1	; case 85
  1851  000D78  B4D8               	btfsc	status,2,c
  1852  000D7A  D602               	goto	l927
  1853  000D7C  0A03               	xorlw	3	; case 86
  1854  000D7E  B4D8               	btfsc	status,2,c
  1855  000D80  D615               	goto	l929
  1856  000D82  0A01               	xorlw	1	; case 87
  1857  000D84  B4D8               	btfsc	status,2,c
  1858  000D86  D628               	goto	l931
  1859  000D88  0A0F               	xorlw	15	; case 88
  1860  000D8A  B4D8               	btfsc	status,2,c
  1861  000D8C  D63B               	goto	l933
  1862  000D8E  0A01               	xorlw	1	; case 89
  1863  000D90  B4D8               	btfsc	status,2,c
  1864  000D92  D64E               	goto	l935
  1865  000D94  0A03               	xorlw	3	; case 90
  1866  000D96  B4D8               	btfsc	status,2,c
  1867  000D98  D661               	goto	l937
  1868  000D9A  0A26               	xorlw	38	; case 124
  1869  000D9C  A4D8               	btfss	status,2,c
  1870  000D9E  0012               	return	
  1871  000DA0  D75F               	goto	l961
  1872  000DA2                     __end_of_glcd_text:
  1873                           	opt stack 0
  1874                           tblptru	equ	0xFF8
  1875                           tblptrh	equ	0xFF7
  1876                           tblptrl	equ	0xFF6
  1877                           tablat	equ	0xFF5
  1878                           prodh	equ	0xFF4
  1879                           prodl	equ	0xFF3
  1880                           wreg	equ	0xFE8
  1881                           status	equ	0xFD8
  1882                           
  1883 ;; *************** function _glcd_on *****************
  1884 ;; Defined at:
  1885 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;		None
  1888 ;; Auto vars:     Size  Location     Type
  1889 ;;		None
  1890 ;; Return value:  Size  Location     Type
  1891 ;;                  1    wreg      void 
  1892 ;; Registers used:
  1893 ;;		wreg, status,2, cstack
  1894 ;; Tracked objects:
  1895 ;;		On entry : 0/0
  1896 ;;		On exit  : 0/0
  1897 ;;		Unchanged: 0/0
  1898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1899 ;;      Params:         0       0       0       0       0       0       0
  1900 ;;      Locals:         0       0       0       0       0       0       0
  1901 ;;      Temps:          0       0       0       0       0       0       0
  1902 ;;      Totals:         0       0       0       0       0       0       0
  1903 ;;Total ram usage:        0 bytes
  1904 ;; Hardware stack levels used:    1
  1905 ;; Hardware stack levels required when called:    1
  1906 ;; This function calls:
  1907 ;;		_enable_pulse
  1908 ;; This function is called by:
  1909 ;;		_main
  1910 ;; This function uses a non-reentrant model
  1911 ;;
  1912                           
  1913                           	psect	text3
  1914  000F32                     __ptext3:
  1915                           	opt stack 0
  1916  000F32                     _glcd_on:
  1917                           	opt stack 29
  1918                           
  1919                           ;glcd.h: 65: TRISD = 0x00;
  1920                           
  1921                           ;incstack = 0
  1922  000F32  0E00               	movlw	0
  1923  000F34  6E95               	movwf	3989,c	;volatile
  1924                           
  1925                           ;glcd.h: 66: TRISB = 0x00;
  1926  000F36  0E00               	movlw	0
  1927  000F38  6E93               	movwf	3987,c	;volatile
  1928                           
  1929                           ;glcd.h: 67: PORTD = 0x00;
  1930  000F3A  0E00               	movlw	0
  1931  000F3C  6E83               	movwf	3971,c	;volatile
  1932                           
  1933                           ;glcd.h: 68: PORTB = 0x00;
  1934  000F3E  0E00               	movlw	0
  1935  000F40  6E81               	movwf	3969,c	;volatile
  1936                           
  1937                           ;glcd.h: 69: PORTBbits.RB3 = 1;
  1938  000F42  8681               	bsf	3969,3,c	;volatile
  1939                           
  1940                           ;glcd.h: 70: PORTBbits.RB4 = 1;
  1941  000F44  8881               	bsf	3969,4,c	;volatile
  1942                           
  1943                           ;glcd.h: 71: PORTBbits.RB5 = 1;
  1944  000F46  8A81               	bsf	3969,5,c	;volatile
  1945                           
  1946                           ;glcd.h: 73: PORTBbits.RB4 = 1;
  1947  000F48  8881               	bsf	3969,4,c	;volatile
  1948                           
  1949                           ;glcd.h: 74: PORTBbits.RB5 = 1;
  1950  000F4A  8A81               	bsf	3969,5,c	;volatile
  1951                           
  1952                           ;glcd.h: 75: PORTBbits.RB0 = 0;
  1953  000F4C  9081               	bcf	3969,0,c	;volatile
  1954                           
  1955                           ;glcd.h: 76: PORTBbits.RB1 = 0;
  1956  000F4E  9281               	bcf	3969,1,c	;volatile
  1957                           
  1958                           ;glcd.h: 77: PORTD = 0x3F;
  1959  000F50  0E3F               	movlw	63
  1960  000F52  6E83               	movwf	3971,c	;volatile
  1961                           
  1962                           ;glcd.h: 78: enable_pulse();
  1963  000F54  ECD6  F007         	call	_enable_pulse	;wreg free
  1964  000F58  0012               	return		;funcret
  1965  000F5A                     __end_of_glcd_on:
  1966                           	opt stack 0
  1967                           tblptru	equ	0xFF8
  1968                           tblptrh	equ	0xFF7
  1969                           tblptrl	equ	0xFF6
  1970                           tablat	equ	0xFF5
  1971                           prodh	equ	0xFF4
  1972                           prodl	equ	0xFF3
  1973                           wreg	equ	0xFE8
  1974                           status	equ	0xFD8
  1975                           
  1976 ;; *************** function _glcd_clear *****************
  1977 ;; Defined at:
  1978 ;;		line 150 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
  1979 ;; Parameters:    Size  Location     Type
  1980 ;;		None
  1981 ;; Auto vars:     Size  Location     Type
  1982 ;;  m               2    7[COMRAM] unsigned short 
  1983 ;; Return value:  Size  Location     Type
  1984 ;;                  1    wreg      void 
  1985 ;; Registers used:
  1986 ;;		wreg, status,2, status,0, cstack
  1987 ;; Tracked objects:
  1988 ;;		On entry : 0/0
  1989 ;;		On exit  : 0/0
  1990 ;;		Unchanged: 0/0
  1991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1992 ;;      Params:         0       0       0       0       0       0       0
  1993 ;;      Locals:         2       0       0       0       0       0       0
  1994 ;;      Temps:          0       0       0       0       0       0       0
  1995 ;;      Totals:         2       0       0       0       0       0       0
  1996 ;;Total ram usage:        2 bytes
  1997 ;; Hardware stack levels used:    1
  1998 ;; Hardware stack levels required when called:    4
  1999 ;; This function calls:
  2000 ;;		_glcd_clear_line
  2001 ;; This function is called by:
  2002 ;;		_main
  2003 ;; This function uses a non-reentrant model
  2004 ;;
  2005                           
  2006                           	psect	text4
  2007  000F5A                     __ptext4:
  2008                           	opt stack 0
  2009  000F5A                     _glcd_clear:
  2010                           	opt stack 26
  2011                           
  2012                           ;glcd.h: 152: unsigned short m;
  2013                           ;glcd.h: 153: for(m=0;m<8;m++)
  2014                           
  2015                           ;incstack = 0
  2016  000F5A  0E00               	movlw	0
  2017  000F5C  6E09               	movwf	glcd_clear@m+1,c
  2018  000F5E  0E00               	movlw	0
  2019  000F60  6E08               	movwf	glcd_clear@m,c
  2020  000F62                     l1221:
  2021  000F62  5009               	movf	glcd_clear@m+1,w,c
  2022  000F64  E10A               	bnz	l51
  2023  000F66  0E08               	movlw	8
  2024  000F68  5C08               	subwf	glcd_clear@m,w,c
  2025  000F6A  B0D8               	btfsc	status,0,c
  2026  000F6C  0012               	return	
  2027                           
  2028                           ;glcd.h: 154: {
  2029                           ;glcd.h: 155: glcd_clear_line(m);
  2030  000F6E  5008               	movf	glcd_clear@m,w,c
  2031  000F70  EC61  F007         	call	_glcd_clear_line
  2032  000F74  4A08               	infsnz	glcd_clear@m,f,c
  2033  000F76  2A09               	incf	glcd_clear@m+1,f,c
  2034  000F78  D7F4               	goto	l1221
  2035  000F7A                     l51:
  2036  000F7A  0012               	return		;funcret
  2037  000F7C                     __end_of_glcd_clear:
  2038                           	opt stack 0
  2039                           tblptru	equ	0xFF8
  2040                           tblptrh	equ	0xFF7
  2041                           tblptrl	equ	0xFF6
  2042                           tablat	equ	0xFF5
  2043                           prodh	equ	0xFF4
  2044                           prodl	equ	0xFF3
  2045                           wreg	equ	0xFE8
  2046                           status	equ	0xFD8
  2047                           
  2048 ;; *************** function _glcd_clear_line *****************
  2049 ;; Defined at:
  2050 ;;		line 140 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
  2051 ;; Parameters:    Size  Location     Type
  2052 ;;  ln              1    wreg     unsigned char 
  2053 ;; Auto vars:     Size  Location     Type
  2054 ;;  ln              1    4[COMRAM] unsigned char 
  2055 ;;  i               2    5[COMRAM] int 
  2056 ;; Return value:  Size  Location     Type
  2057 ;;                  1    wreg      void 
  2058 ;; Registers used:
  2059 ;;		wreg, status,2, status,0, cstack
  2060 ;; Tracked objects:
  2061 ;;		On entry : 0/0
  2062 ;;		On exit  : 0/0
  2063 ;;		Unchanged: 0/0
  2064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2065 ;;      Params:         0       0       0       0       0       0       0
  2066 ;;      Locals:         3       0       0       0       0       0       0
  2067 ;;      Temps:          0       0       0       0       0       0       0
  2068 ;;      Totals:         3       0       0       0       0       0       0
  2069 ;;Total ram usage:        3 bytes
  2070 ;; Hardware stack levels used:    1
  2071 ;; Hardware stack levels required when called:    3
  2072 ;; This function calls:
  2073 ;;		_glcd_write
  2074 ;;		_goto_xy
  2075 ;; This function is called by:
  2076 ;;		_glcd_clear
  2077 ;; This function uses a non-reentrant model
  2078 ;;
  2079                           
  2080                           	psect	text5
  2081  000EC2                     __ptext5:
  2082                           	opt stack 0
  2083  000EC2                     _glcd_clear_line:
  2084                           	opt stack 26
  2085                           
  2086                           ;incstack = 0
  2087                           ;glcd_clear_line@ln stored from wreg
  2088  000EC2  6E05               	movwf	glcd_clear_line@ln,c
  2089                           
  2090                           ;glcd.h: 142: int i;
  2091                           ;glcd.h: 143: goto_xy(0,ln);
  2092  000EC4  C005  F003         	movff	glcd_clear_line@ln,goto_xy@y
  2093  000EC8  0E00               	movlw	0
  2094  000ECA  ECE1  F007         	call	_goto_xy
  2095                           
  2096                           ;glcd.h: 144: goto_xy(64,ln);
  2097  000ECE  C005  F003         	movff	glcd_clear_line@ln,goto_xy@y
  2098  000ED2  0E40               	movlw	64
  2099  000ED4  ECE1  F007         	call	_goto_xy
  2100                           
  2101                           ;glcd.h: 145: PORTBbits.RB4 = 1;
  2102  000ED8  8881               	bsf	3969,4,c	;volatile
  2103                           
  2104                           ;glcd.h: 146: for(i=0;i<65;i++)
  2105  000EDA  0E00               	movlw	0
  2106  000EDC  6E07               	movwf	glcd_clear_line@i+1,c
  2107  000EDE  0E00               	movlw	0
  2108  000EE0  6E06               	movwf	glcd_clear_line@i,c
  2109  000EE2                     l1195:
  2110  000EE2  BE07               	btfsc	glcd_clear_line@i+1,7,c
  2111  000EE4  D006               	goto	l1199
  2112  000EE6  5007               	movf	glcd_clear_line@i+1,w,c
  2113  000EE8  E10A               	bnz	l46
  2114  000EEA  0E41               	movlw	65
  2115  000EEC  5C06               	subwf	glcd_clear_line@i,w,c
  2116  000EEE  B0D8               	btfsc	status,0,c
  2117  000EF0  0012               	return	
  2118  000EF2                     l1199:
  2119                           
  2120                           ;glcd.h: 147: glcd_write(0);
  2121  000EF2  0E00               	movlw	0
  2122  000EF4  ECCA  F007         	call	_glcd_write
  2123  000EF8  4A06               	infsnz	glcd_clear_line@i,f,c
  2124  000EFA  2A07               	incf	glcd_clear_line@i+1,f,c
  2125  000EFC  D7F2               	goto	l1195
  2126  000EFE                     l46:
  2127  000EFE  0012               	return		;funcret
  2128  000F00                     __end_of_glcd_clear_line:
  2129                           	opt stack 0
  2130                           tblptru	equ	0xFF8
  2131                           tblptrh	equ	0xFF7
  2132                           tblptrl	equ	0xFF6
  2133                           tablat	equ	0xFF5
  2134                           prodh	equ	0xFF4
  2135                           prodl	equ	0xFF3
  2136                           wreg	equ	0xFE8
  2137                           status	equ	0xFD8
  2138                           
  2139 ;; *************** function _goto_xy *****************
  2140 ;; Defined at:
  2141 ;;		line 125 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
  2142 ;; Parameters:    Size  Location     Type
  2143 ;;  x               1    wreg     unsigned char 
  2144 ;;  y               1    2[COMRAM] unsigned char 
  2145 ;; Auto vars:     Size  Location     Type
  2146 ;;  x               1    3[COMRAM] unsigned char 
  2147 ;; Return value:  Size  Location     Type
  2148 ;;                  1    wreg      void 
  2149 ;; Registers used:
  2150 ;;		wreg, status,2, status,0, cstack
  2151 ;; Tracked objects:
  2152 ;;		On entry : 0/0
  2153 ;;		On exit  : 0/0
  2154 ;;		Unchanged: 0/0
  2155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2156 ;;      Params:         1       0       0       0       0       0       0
  2157 ;;      Locals:         1       0       0       0       0       0       0
  2158 ;;      Temps:          0       0       0       0       0       0       0
  2159 ;;      Totals:         2       0       0       0       0       0       0
  2160 ;;Total ram usage:        2 bytes
  2161 ;; Hardware stack levels used:    1
  2162 ;; Hardware stack levels required when called:    2
  2163 ;; This function calls:
  2164 ;;		_goto_col
  2165 ;;		_goto_row
  2166 ;; This function is called by:
  2167 ;;		_glcd_clear_line
  2168 ;;		_main
  2169 ;;		_glcd_draw_pixel
  2170 ;; This function uses a non-reentrant model
  2171 ;;
  2172                           
  2173                           	psect	text6
  2174  000FC2                     __ptext6:
  2175                           	opt stack 0
  2176  000FC2                     _goto_xy:
  2177                           	opt stack 28
  2178                           
  2179                           ;incstack = 0
  2180                           ;goto_xy@x stored from wreg
  2181  000FC2  6E04               	movwf	goto_xy@x,c
  2182                           
  2183                           ;glcd.h: 127: goto_col(x);
  2184  000FC4  5004               	movf	goto_xy@x,w,c
  2185  000FC6  EC80  F007         	call	_goto_col
  2186                           
  2187                           ;glcd.h: 128: goto_row(y);
  2188  000FCA  5003               	movf	goto_xy@y,w,c
  2189  000FCC  ECBE  F007         	call	_goto_row
  2190  000FD0  0012               	return		;funcret
  2191  000FD2                     __end_of_goto_xy:
  2192                           	opt stack 0
  2193                           tblptru	equ	0xFF8
  2194                           tblptrh	equ	0xFF7
  2195                           tblptrl	equ	0xFF6
  2196                           tablat	equ	0xFF5
  2197                           prodh	equ	0xFF4
  2198                           prodl	equ	0xFF3
  2199                           wreg	equ	0xFE8
  2200                           status	equ	0xFD8
  2201                           
  2202 ;; *************** function _goto_row *****************
  2203 ;; Defined at:
  2204 ;;		line 115 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
  2205 ;; Parameters:    Size  Location     Type
  2206 ;;  row             1    wreg     unsigned char 
  2207 ;; Auto vars:     Size  Location     Type
  2208 ;;  row             1    0[COMRAM] unsigned char 
  2209 ;;  Col_Data        1    1[COMRAM] unsigned char 
  2210 ;; Return value:  Size  Location     Type
  2211 ;;                  1    wreg      void 
  2212 ;; Registers used:
  2213 ;;		wreg, status,2, status,0, cstack
  2214 ;; Tracked objects:
  2215 ;;		On entry : 0/0
  2216 ;;		On exit  : 0/0
  2217 ;;		Unchanged: 0/0
  2218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2219 ;;      Params:         0       0       0       0       0       0       0
  2220 ;;      Locals:         2       0       0       0       0       0       0
  2221 ;;      Temps:          0       0       0       0       0       0       0
  2222 ;;      Totals:         2       0       0       0       0       0       0
  2223 ;;Total ram usage:        2 bytes
  2224 ;; Hardware stack levels used:    1
  2225 ;; Hardware stack levels required when called:    1
  2226 ;; This function calls:
  2227 ;;		_enable_pulse
  2228 ;; This function is called by:
  2229 ;;		_goto_xy
  2230 ;; This function uses a non-reentrant model
  2231 ;;
  2232                           
  2233                           	psect	text7
  2234  000F7C                     __ptext7:
  2235                           	opt stack 0
  2236  000F7C                     _goto_row:
  2237                           	opt stack 28
  2238                           
  2239                           ;incstack = 0
  2240                           ;goto_row@row stored from wreg
  2241  000F7C  6E01               	movwf	goto_row@row,c
  2242                           
  2243                           ;glcd.h: 117: unsigned char Col_Data;
  2244                           ;glcd.h: 118: PORTBbits.RB0 = 0;
  2245  000F7E  9081               	bcf	3969,0,c	;volatile
  2246                           
  2247                           ;glcd.h: 119: PORTBbits.RB1 = 0;
  2248  000F80  9281               	bcf	3969,1,c	;volatile
  2249                           
  2250                           ;glcd.h: 120: Col_Data = (row | 0xB8 ) & 0xBF;
  2251  000F82  5001               	movf	goto_row@row,w,c
  2252  000F84  09B8               	iorlw	184
  2253  000F86  0BBF               	andlw	191
  2254  000F88  6E02               	movwf	goto_row@Col_Data,c
  2255                           
  2256                           ;glcd.h: 121: PORTD = Col_Data;
  2257  000F8A  C002  FF83         	movff	goto_row@Col_Data,3971	;volatile
  2258                           
  2259                           ;glcd.h: 122: enable_pulse();
  2260  000F8E  ECD6  F007         	call	_enable_pulse	;wreg free
  2261  000F92  0012               	return		;funcret
  2262  000F94                     __end_of_goto_row:
  2263                           	opt stack 0
  2264                           tblptru	equ	0xFF8
  2265                           tblptrh	equ	0xFF7
  2266                           tblptrl	equ	0xFF6
  2267                           tablat	equ	0xFF5
  2268                           prodh	equ	0xFF4
  2269                           prodl	equ	0xFF3
  2270                           wreg	equ	0xFE8
  2271                           status	equ	0xFD8
  2272                           
  2273 ;; *************** function _goto_col *****************
  2274 ;; Defined at:
  2275 ;;		line 92 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
  2276 ;; Parameters:    Size  Location     Type
  2277 ;;  col             1    wreg     unsigned char 
  2278 ;; Auto vars:     Size  Location     Type
  2279 ;;  col             1    1[COMRAM] unsigned char 
  2280 ;;  Col_Data        1    0[COMRAM] unsigned char 
  2281 ;; Return value:  Size  Location     Type
  2282 ;;                  1    wreg      void 
  2283 ;; Registers used:
  2284 ;;		wreg, status,2, status,0, cstack
  2285 ;; Tracked objects:
  2286 ;;		On entry : 0/0
  2287 ;;		On exit  : 0/0
  2288 ;;		Unchanged: 0/0
  2289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2290 ;;      Params:         0       0       0       0       0       0       0
  2291 ;;      Locals:         2       0       0       0       0       0       0
  2292 ;;      Temps:          0       0       0       0       0       0       0
  2293 ;;      Totals:         2       0       0       0       0       0       0
  2294 ;;Total ram usage:        2 bytes
  2295 ;; Hardware stack levels used:    1
  2296 ;; Hardware stack levels required when called:    1
  2297 ;; This function calls:
  2298 ;;		_enable_pulse
  2299 ;; This function is called by:
  2300 ;;		_goto_xy
  2301 ;; This function uses a non-reentrant model
  2302 ;;
  2303                           
  2304                           	psect	text8
  2305  000F00                     __ptext8:
  2306                           	opt stack 0
  2307  000F00                     _goto_col:
  2308                           	opt stack 28
  2309                           
  2310                           ;incstack = 0
  2311                           ;goto_col@col stored from wreg
  2312  000F00  6E02               	movwf	goto_col@col,c
  2313                           
  2314                           ;glcd.h: 94: unsigned char Col_Data;
  2315                           ;glcd.h: 95: PORTBbits.RB0 = 0;
  2316  000F02  9081               	bcf	3969,0,c	;volatile
  2317                           
  2318                           ;glcd.h: 96: PORTBbits.RB1 = 0;
  2319  000F04  9281               	bcf	3969,1,c	;volatile
  2320                           
  2321                           ;glcd.h: 97: if(col<64)
  2322  000F06  0E40               	movlw	64
  2323  000F08  6002               	cpfslt	goto_col@col,c
  2324  000F0A  D005               	goto	l30
  2325                           
  2326                           ;glcd.h: 98: {
  2327                           ;glcd.h: 99: PORTBbits.RB4 = 1;
  2328  000F0C  8881               	bsf	3969,4,c	;volatile
  2329                           
  2330                           ;glcd.h: 100: PORTBbits.RB5 = 0;
  2331  000F0E  9A81               	bcf	3969,5,c	;volatile
  2332                           
  2333                           ;glcd.h: 101: Col_Data = col;
  2334  000F10  C002  F001         	movff	goto_col@col,goto_col@Col_Data
  2335                           
  2336                           ;glcd.h: 102: }
  2337  000F14  D005               	goto	l31
  2338  000F16                     l30:
  2339                           
  2340                           ;glcd.h: 103: else
  2341                           ;glcd.h: 104: {
  2342                           ;glcd.h: 106: PORTBbits.RB5 = 1;
  2343  000F16  8A81               	bsf	3969,5,c	;volatile
  2344                           
  2345                           ;glcd.h: 107: PORTBbits.RB4 = 0;
  2346  000F18  9881               	bcf	3969,4,c	;volatile
  2347                           
  2348                           ;glcd.h: 108: Col_Data = col-64;
  2349  000F1A  5002               	movf	goto_col@col,w,c
  2350  000F1C  0FC0               	addlw	192
  2351  000F1E  6E01               	movwf	goto_col@Col_Data,c
  2352  000F20                     l31:
  2353                           
  2354                           ;glcd.h: 109: }
  2355                           ;glcd.h: 110: Col_Data = (Col_Data | 0x40 ) & 0x7F;
  2356  000F20  5001               	movf	goto_col@Col_Data,w,c
  2357  000F22  0940               	iorlw	64
  2358  000F24  0B7F               	andlw	127
  2359  000F26  6E01               	movwf	goto_col@Col_Data,c
  2360                           
  2361                           ;glcd.h: 111: PORTD = Col_Data;
  2362  000F28  C001  FF83         	movff	goto_col@Col_Data,3971	;volatile
  2363                           
  2364                           ;glcd.h: 112: enable_pulse();
  2365  000F2C  ECD6  F007         	call	_enable_pulse	;wreg free
  2366  000F30  0012               	return		;funcret
  2367  000F32                     __end_of_goto_col:
  2368                           	opt stack 0
  2369                           tblptru	equ	0xFF8
  2370                           tblptrh	equ	0xFF7
  2371                           tblptrl	equ	0xFF6
  2372                           tablat	equ	0xFF5
  2373                           prodh	equ	0xFF4
  2374                           prodl	equ	0xFF3
  2375                           wreg	equ	0xFE8
  2376                           status	equ	0xFD8
  2377                           
  2378 ;; *************** function _glcd_write *****************
  2379 ;; Defined at:
  2380 ;;		line 131 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
  2381 ;; Parameters:    Size  Location     Type
  2382 ;;  data            1    wreg     unsigned char 
  2383 ;; Auto vars:     Size  Location     Type
  2384 ;;  data            1    0[COMRAM] unsigned char 
  2385 ;; Return value:  Size  Location     Type
  2386 ;;                  1    wreg      void 
  2387 ;; Registers used:
  2388 ;;		wreg, status,2, cstack
  2389 ;; Tracked objects:
  2390 ;;		On entry : 0/0
  2391 ;;		On exit  : 0/0
  2392 ;;		Unchanged: 0/0
  2393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2394 ;;      Params:         0       0       0       0       0       0       0
  2395 ;;      Locals:         1       0       0       0       0       0       0
  2396 ;;      Temps:          0       0       0       0       0       0       0
  2397 ;;      Totals:         1       0       0       0       0       0       0
  2398 ;;Total ram usage:        1 bytes
  2399 ;; Hardware stack levels used:    1
  2400 ;; Hardware stack levels required when called:    1
  2401 ;; This function calls:
  2402 ;;		_enable_pulse
  2403 ;; This function is called by:
  2404 ;;		_glcd_clear_line
  2405 ;;		_glcd_text
  2406 ;;		_glcd_draw_pixel
  2407 ;; This function uses a non-reentrant model
  2408 ;;
  2409                           
  2410                           	psect	text9
  2411  000F94                     __ptext9:
  2412                           	opt stack 0
  2413  000F94                     _glcd_write:
  2414                           	opt stack 27
  2415                           
  2416                           ;incstack = 0
  2417                           ;glcd_write@data stored from wreg
  2418  000F94  6E01               	movwf	glcd_write@data,c
  2419                           
  2420                           ;glcd.h: 133: PORTBbits.RB0 = 1;
  2421  000F96  8081               	bsf	3969,0,c	;volatile
  2422                           
  2423                           ;glcd.h: 134: PORTBbits.RB1 = 0;
  2424  000F98  9281               	bcf	3969,1,c	;volatile
  2425                           
  2426                           ;glcd.h: 135: PORTD = data;
  2427  000F9A  C001  FF83         	movff	glcd_write@data,3971	;volatile
  2428                           
  2429                           ;glcd.h: 136: _delay((unsigned long)((5)*(16000000/4000000.0)));
  2430  000F9E  0E06               	movlw	6
  2431  000FA0                     u627:
  2432  000FA0  2EE8               	decfsz	wreg,f,c
  2433  000FA2  D7FE               	bra	u627
  2434  000FA4  D000               	nop2	
  2435                           
  2436                           ;glcd.h: 137: enable_pulse();
  2437  000FA6  ECD6  F007         	call	_enable_pulse	;wreg free
  2438  000FAA  0012               	return		;funcret
  2439  000FAC                     __end_of_glcd_write:
  2440                           	opt stack 0
  2441                           tblptru	equ	0xFF8
  2442                           tblptrh	equ	0xFF7
  2443                           tblptrl	equ	0xFF6
  2444                           tablat	equ	0xFF5
  2445                           prodh	equ	0xFF4
  2446                           prodl	equ	0xFF3
  2447                           wreg	equ	0xFE8
  2448                           status	equ	0xFD8
  2449                           
  2450 ;; *************** function _enable_pulse *****************
  2451 ;; Defined at:
  2452 ;;		line 55 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
  2453 ;; Parameters:    Size  Location     Type
  2454 ;;		None
  2455 ;; Auto vars:     Size  Location     Type
  2456 ;;		None
  2457 ;; Return value:  Size  Location     Type
  2458 ;;                  1    wreg      void 
  2459 ;; Registers used:
  2460 ;;		wreg
  2461 ;; Tracked objects:
  2462 ;;		On entry : 0/0
  2463 ;;		On exit  : 0/0
  2464 ;;		Unchanged: 0/0
  2465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2466 ;;      Params:         0       0       0       0       0       0       0
  2467 ;;      Locals:         0       0       0       0       0       0       0
  2468 ;;      Temps:          0       0       0       0       0       0       0
  2469 ;;      Totals:         0       0       0       0       0       0       0
  2470 ;;Total ram usage:        0 bytes
  2471 ;; Hardware stack levels used:    1
  2472 ;; This function calls:
  2473 ;;		Nothing
  2474 ;; This function is called by:
  2475 ;;		_glcd_on
  2476 ;;		_goto_col
  2477 ;;		_goto_row
  2478 ;;		_glcd_write
  2479 ;;		_set_start_line
  2480 ;; This function uses a non-reentrant model
  2481 ;;
  2482                           
  2483                           	psect	text10
  2484  000FAC                     __ptext10:
  2485                           	opt stack 0
  2486  000FAC                     _enable_pulse:
  2487                           	opt stack 28
  2488                           
  2489                           ;glcd.h: 57: PORTBbits.RB2 = 1;
  2490                           
  2491                           ;incstack = 0
  2492  000FAC  8481               	bsf	3969,2,c	;volatile
  2493                           
  2494                           ;glcd.h: 58: _delay((unsigned long)((5)*(16000000/4000000.0)));
  2495  000FAE  0E06               	movlw	6
  2496  000FB0                     u637:
  2497  000FB0  2EE8               	decfsz	wreg,f,c
  2498  000FB2  D7FE               	bra	u637
  2499  000FB4  D000               	nop2	
  2500                           
  2501                           ;glcd.h: 59: PORTBbits.RB2 = 0;
  2502  000FB6  9481               	bcf	3969,2,c	;volatile
  2503                           
  2504                           ;glcd.h: 60: _delay((unsigned long)((5)*(16000000/4000000.0)));
  2505  000FB8  0E06               	movlw	6
  2506  000FBA                     u647:
  2507  000FBA  2EE8               	decfsz	wreg,f,c
  2508  000FBC  D7FE               	bra	u647
  2509  000FBE  D000               	nop2	
  2510  000FC0  0012               	return		;funcret
  2511  000FC2                     __end_of_enable_pulse:
  2512                           	opt stack 0
  2513                           tblptru	equ	0xFF8
  2514                           tblptrh	equ	0xFF7
  2515                           tblptrl	equ	0xFF6
  2516                           tablat	equ	0xFF5
  2517                           prodh	equ	0xFF4
  2518                           prodl	equ	0xFF3
  2519                           wreg	equ	0xFE8
  2520                           status	equ	0xFD8
  2521                           tblptru	equ	0xFF8
  2522                           tblptrh	equ	0xFF7
  2523                           tblptrl	equ	0xFF6
  2524                           tablat	equ	0xFF5
  2525                           prodh	equ	0xFF4
  2526                           prodl	equ	0xFF3
  2527                           wreg	equ	0xFE8
  2528                           status	equ	0xFD8
  2529                           
  2530                           	psect	rparam
  2531  0000                     tblptru	equ	0xFF8
  2532                           tblptrh	equ	0xFF7
  2533                           tblptrl	equ	0xFF6
  2534                           tablat	equ	0xFF5
  2535                           prodh	equ	0xFF4
  2536                           prodl	equ	0xFF3
  2537                           wreg	equ	0xFE8
  2538                           status	equ	0xFD8


Data Sizes:
    Strings     9
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     15      15
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    glcd_string@str	PTR unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), STR_1(CODE[9]), 


Critical Paths under _main in COMRAM

    _main->_glcd_clear
    _glcd_string->_glcd_text
    _glcd_text->_glcd_write
    _glcd_clear->_glcd_clear_line
    _glcd_clear_line->_goto_xy
    _goto_xy->_goto_col
    _goto_xy->_goto_row

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    1623
                                              9 COMRAM     6     6      0
                         _glcd_clear
                            _glcd_on
                        _glcd_string
                            _goto_xy
 ---------------------------------------------------------------------------------
 (1) _glcd_string                                          5     3      2     248
                                              2 COMRAM     5     3      2
                          _glcd_text
 ---------------------------------------------------------------------------------
 (2) _glcd_text                                            1     1      0      30
                                              1 COMRAM     1     1      0
                         _glcd_write
 ---------------------------------------------------------------------------------
 (1) _glcd_on                                              0     0      0       0
                       _enable_pulse
 ---------------------------------------------------------------------------------
 (1) _glcd_clear                                           2     2      0     706
                                              7 COMRAM     2     2      0
                    _glcd_clear_line
 ---------------------------------------------------------------------------------
 (2) _glcd_clear_line                                      3     3      0     638
                                              4 COMRAM     3     3      0
                         _glcd_write
                            _goto_xy
 ---------------------------------------------------------------------------------
 (1) _goto_xy                                              2     1      1     533
                                              2 COMRAM     2     1      1
                           _goto_col
                           _goto_row
 ---------------------------------------------------------------------------------
 (2) _goto_row                                             2     2      0      30
                                              0 COMRAM     2     2      0
                       _enable_pulse
 ---------------------------------------------------------------------------------
 (2) _goto_col                                             2     2      0      75
                                              0 COMRAM     2     2      0
                       _enable_pulse
 ---------------------------------------------------------------------------------
 (3) _glcd_write                                           1     1      0      15
                                              0 COMRAM     1     1      0
                       _enable_pulse
 ---------------------------------------------------------------------------------
 (3) _enable_pulse                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _glcd_clear
     _glcd_clear_line
       _glcd_write
         _enable_pulse
       _goto_xy
         _goto_col
           _enable_pulse
         _goto_row
           _enable_pulse
   _glcd_on
     _enable_pulse
   _glcd_string
     _glcd_text
       _glcd_write
         _enable_pulse
   _goto_xy
     _goto_col
       _enable_pulse
     _goto_row
       _enable_pulse

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      F       F       1       15.8%
STACK                0      0       0       2        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
ABS                  0      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BIGRAM             5FF      0       0      16        0.0%
DATA                 0      0       0      17        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Jun 16 12:59:16 2017

__size_of_glcd_clear_line 003E                        l30 0F16                        l31 0F20  
                      l51 0F7A                        l46 0EFE              __CFG_CP0$OFF 000000  
            __CFG_CP1$OFF 000000              __CFG_CP2$OFF 000000              __CFG_CP3$OFF 000000  
                     l901 0744                       l911 0820                       l903 0770  
                     l921 08FC                       l913 084C                       l905 079C  
                     l931 09D8                       l923 0928                       l915 0878  
                     l907 07C8                       l941 0AB4                       l933 0A04  
                     l925 0954                       l917 08A4                       l909 07F4  
                     l951 0B90                       l943 0AE0                       l935 0A30  
                     l927 0980                       l919 08D0                       l961 0C60  
                     l953 0BBC                       l945 0B0C                       l937 0A5C  
                     l929 09AC                       l963 0C80                       l955 0BE8  
                     l947 0B38                       l939 0A88                       l891 0668  
                     l965 0C88                       l957 0C14                       l949 0B64  
                     l893 0694                       l959 0C40                       l895 06C0  
                     l887 0610                       l897 06EC                       l889 063C  
                     l969 0CAE                       l899 0718              __CFG_CPB$OFF 000000  
            __CFG_CPD$OFF 000000                       u607 0E0A                       u617 0E5A  
                     u627 0FA0                       u637 0FB0                       u647 0FBA  
                     u597 0DC0                       wreg 000FE8              glcd_string@i 0007  
            __CFG_LVP$OFF 000000                      l1221 0F62                      l1233 0E74  
                    l1237 0E9A                      l1353 0DE6                      l1195 0EE2  
                    l1363 0E1E                      l1347 0DCE                      l1365 0E26  
                    l1349 0DD6                      l1199 0EF2                      l1369 0E36  
                    STR_1 0601                      STR_2 0601             glcd_text@text 0002  
                    _main 0DA2             __CFG_BORV$190 000000                      prodh 000FF4  
                    prodl 000FF3                      start 0000             __CFG_IESO$OFF 000000  
            ___param_bank 000000                     ?_main 0001                     _PORTB 000F81  
                   _PORTD 000F83                     _TRISB 000F93                     _TRISD 000F95  
           __CFG_WRT0$OFF 000000             __CFG_WRT1$OFF 000000             __CFG_WRT2$OFF 000000  
           __CFG_WRT3$OFF 000000            __CFG_EBTR0$OFF 000000            __CFG_FCMEN$OFF 000000  
          __CFG_EBTR1$OFF 000000            __CFG_EBTR2$OFF 000000            __CFG_EBTR3$OFF 000000  
         __end_of_glcd_on 0F5A             __CFG_WRTB$OFF 000000             __CFG_WRTC$OFF 000000  
           __CFG_WRTD$OFF 000000            __CFG_EBTRB$OFF 000000           __end_of_goto_xy 0FD2  
      __CFG_MCLRE$EXTMCLR 000000            __CFG_BOREN$OFF 000000                     tablat 000FF5  
                   status 000FD8            __CFG_FOSC$HSMP 000000           __initialization 0FD2  
            __end_of_main 0E6E            glcd_string@str 0003            glcd_write@data 0001  
                  ??_main 000A             __activetblptr 000002      __end_of_enable_pulse 0FC2  
       ??_glcd_clear_line 0005                    _ANSELB 000F39                    _ANSELD 000F3B  
          __CFG_WDTEN$OFF 000000            __CFG_XINST$OFF 000000      __size_of_glcd_string 0054  
        __end_of_goto_col 0F32          __end_of_goto_row 0F94                 ??_glcd_on 0001  
               ??_goto_xy 0004              __mediumconst 0000               goto_col@col 0002  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
         __CFG_HFOFST$OFF 000000                __accesstop 0060   __end_of__initialization 0FD2  
         __CFG_PBADEN$OFF 000000               goto_row@row 0001             ___rparam_used 000001  
          __pcstackCOMRAM 0001        __size_of_glcd_text 0796           __CFG_PLLCFG$OFF 000000  
      __CFG_CCP2MX$PORTC1 000000        __CFG_CCP3MX$PORTB5 000000     __size_of_enable_pulse 0016  
              _glcd_clear 0F5A                _glcd_write 0F94         __CFG_PRICLKEN$OFF 000000  
        goto_col@Col_Data 0001                 ?_goto_col 0001                 ?_goto_row 0001  
         __CFG_PWRTEN$OFF 000000              _enable_pulse 0FAC                   __Hparam 0000  
                 __Lparam 0000         __end_of_glcd_text 0DA2           _glcd_clear_line 0EC2  
            __psmallconst 0600           __CFG_STVREN$OFF 000000                   __pcinit 0FD2  
                 __ramtop 0600                   __ptext0 0DA2                   __ptext1 0E6E  
                 __ptext2 060C                   __ptext3 0F32                   __ptext4 0F5A  
                 __ptext5 0EC2                   __ptext6 0FC2                   __ptext7 0F7C  
                 __ptext8 0F00                   __ptext9 0F94                   _glcd_on 0F32  
                 _goto_xy 0FC2      end_of_initialization 0FD2             __Lmediumconst 0000  
              ??_goto_col 0001                ??_goto_row 0001                 _PORTBbits 000F81  
             ?_glcd_clear 0001               ?_glcd_write 0001   __end_of_glcd_clear_line 0F00  
           ??_glcd_string 0005         glcd_clear_line@ln 0005       start_initialization 0FD2  
     __size_of_glcd_clear 0022       __size_of_glcd_write 0018       __end_of_glcd_string 0EC2  
        ?_glcd_clear_line 0001         __size_of_goto_col 0032         __size_of_goto_row 0018  
               _glcd_text 060C                  ?_glcd_on 0001               __smallconst 0600  
                ?_goto_xy 0003               _glcd_string 0E6E          __CFG_WDTPS$32768 000000  
              ?_glcd_text 0001                 main@i_252 000E                 main@i_249 000C  
            ??_glcd_clear 0008              ??_glcd_write 0001          glcd_clear_line@i 0006  
                __Hrparam 0000        __end_of_glcd_clear 0F7C                  __Lrparam 0000  
      __end_of_glcd_write 0FAC         __CFG_P2BMX$PORTC0 000000          __size_of_glcd_on 0028  
        __size_of_goto_xy 0010                  __ptext10 0FAC             __size_of_main 00CC  
                _goto_col 0F00                  _goto_row 0F7C               ??_glcd_text 0002  
                goto_xy@x 0004                  goto_xy@y 0003             ?_enable_pulse 0001  
       __CFG_T3CMX$PORTC0 000000          goto_row@Col_Data 0002            ??_enable_pulse 0001  
            ?_glcd_string 0003               glcd_clear@m 0008  
