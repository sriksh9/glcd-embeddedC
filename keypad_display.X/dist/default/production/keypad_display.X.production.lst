

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Jun 20 14:36:16 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25  0000                     
    26                           ; Version 1.41
    27                           ; Generated 25/01/2017 GMT
    28                           ; 
    29                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F45K22 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     _ANSELA	set	3896
    61  0000                     _PORTA	set	3968
    62  0000                     _LATA	set	3977
    63  0000                     _TRISA	set	3986
    64  0000                     _PORTB	set	3969
    65  0000                     _PORTD	set	3971
    66  0000                     _TRISB	set	3987
    67  0000                     _TRISD	set	3989
    68  0000                     _PORTBbits	set	3969
    69                           
    70                           	psect	smallconst
    71  000600                     __psmallconst:
    72                           	opt stack 0
    73  000600  00                 	db	0
    74  000601                     STR_1:
    75  000601  50                 	db	80	;'P'
    76  000602  52                 	db	82	;'R'
    77  000603  45                 	db	69	;'E'
    78  000604  53                 	db	83	;'S'
    79  000605  53                 	db	83	;'S'
    80  000606  45                 	db	69	;'E'
    81  000607  44                 	db	68	;'D'
    82  000608  00                 	db	0
    83  000609  00                 	db	0	; dummy byte at the end
    84  0000                     
    85                           ; #config settings
    86                           
    87                           	psect	cinit
    88  00112E                     __pcinit:
    89                           	opt stack 0
    90  00112E                     start_initialization:
    91                           	opt stack 0
    92  00112E                     __initialization:
    93                           	opt stack 0
    94  00112E                     end_of_initialization:
    95                           	opt stack 0
    96  00112E                     __end_of__initialization:
    97                           	opt stack 0
    98  00112E  0E00               	movlw	low (__Lmediumconst shr (0+16))
    99  001130  6EF8               	movwf	tblptru,c
   100  001132  0100               	movlb	0
   101  001134  EF67  F007         	goto	_main	;jump to C main() function
   102                           tblptru	equ	0xFF8
   103                           
   104                           	psect	cstackCOMRAM
   105  000001                     __pcstackCOMRAM:
   106                           	opt stack 0
   107  000001                     ??_keyscan:
   108  000001                     ?___lwdiv:
   109                           	opt stack 0
   110  000001                     ?___lwmod:
   111                           	opt stack 0
   112  000001                     goto_col@Col_Data:
   113                           	opt stack 0
   114  000001                     goto_row@row:
   115                           	opt stack 0
   116  000001                     glcd_write@data:
   117                           	opt stack 0
   118  000001                     ___lwdiv@dividend:
   119                           	opt stack 0
   120  000001                     ___lwmod@dividend:
   121                           	opt stack 0
   122                           
   123                           ; 2 bytes @ 0x0
   124  000001                     	ds	1
   125  000002                     goto_col@col:
   126                           	opt stack 0
   127  000002                     goto_row@Col_Data:
   128                           	opt stack 0
   129  000002                     glcd_text@text:
   130                           	opt stack 0
   131                           
   132                           ; 1 bytes @ 0x1
   133  000002                     	ds	1
   134  000003                     goto_xy@y:
   135                           	opt stack 0
   136  000003                     glcd_string@str:
   137                           	opt stack 0
   138  000003                     ___lwdiv@divisor:
   139                           	opt stack 0
   140  000003                     ___lwmod@divisor:
   141                           	opt stack 0
   142                           
   143                           ; 2 bytes @ 0x2
   144  000003                     	ds	1
   145  000004                     goto_xy@x:
   146                           	opt stack 0
   147                           
   148                           ; 1 bytes @ 0x3
   149  000004                     	ds	1
   150  000005                     ??_glcd_string:
   151  000005                     glcd_clear_line@ln:
   152                           	opt stack 0
   153  000005                     ___lwmod@counter:
   154                           	opt stack 0
   155  000005                     ___lwdiv@quotient:
   156                           	opt stack 0
   157                           
   158                           ; 2 bytes @ 0x4
   159  000005                     	ds	1
   160  000006                     glcd_clear_line@i:
   161                           	opt stack 0
   162                           
   163                           ; 2 bytes @ 0x5
   164  000006                     	ds	1
   165  000007                     glcd_string@i:
   166                           	opt stack 0
   167  000007                     ___lwdiv@counter:
   168                           	opt stack 0
   169                           
   170                           ; 1 bytes @ 0x6
   171  000007                     	ds	1
   172  000008                     glcd_clear@m:
   173                           	opt stack 0
   174  000008                     glcd_num@num:
   175                           	opt stack 0
   176                           
   177                           ; 2 bytes @ 0x7
   178  000008                     	ds	2
   179  00000A                     ??_glcd_num:
   180                           
   181                           ; 1 bytes @ 0x9
   182  00000A                     	ds	2
   183  00000C                     glcd_num@number:
   184                           	opt stack 0
   185                           
   186                           ; 16 bytes @ 0xB
   187  00000C                     	ds	16
   188  00001C                     glcd_num@i:
   189                           	opt stack 0
   190                           
   191                           ; 1 bytes @ 0x1B
   192  00001C                     	ds	1
   193  00001D                     glcd_num@j:
   194                           	opt stack 0
   195                           
   196                           ; 1 bytes @ 0x1C
   197  00001D                     	ds	1
   198  00001E                     ??_main:
   199                           
   200                           ; 1 bytes @ 0x1D
   201  00001E                     	ds	2
   202                           tblptru	equ	0xFF8
   203                           
   204 ;;
   205 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   206 ;;
   207 ;; *************** function _main *****************
   208 ;; Defined at:
   209 ;;		line 14 in file "keypad_display.c"
   210 ;; Parameters:    Size  Location     Type
   211 ;;		None
   212 ;; Auto vars:     Size  Location     Type
   213 ;;		None
   214 ;; Return value:  Size  Location     Type
   215 ;;                  2  169[None  ] int 
   216 ;; Registers used:
   217 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   218 ;; Tracked objects:
   219 ;;		On entry : 0/0
   220 ;;		On exit  : 0/0
   221 ;;		Unchanged: 0/0
   222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   223 ;;      Params:         0       0       0       0       0       0       0
   224 ;;      Locals:         0       0       0       0       0       0       0
   225 ;;      Temps:          2       0       0       0       0       0       0
   226 ;;      Totals:         2       0       0       0       0       0       0
   227 ;;Total ram usage:        2 bytes
   228 ;; Hardware stack levels required when called:    5
   229 ;; This function calls:
   230 ;;		_glcd_clear
   231 ;;		_glcd_clear_line
   232 ;;		_glcd_num
   233 ;;		_glcd_on
   234 ;;		_glcd_string
   235 ;;		_goto_xy
   236 ;;		_keyscan
   237 ;; This function is called by:
   238 ;;		Startup code after reset
   239 ;; This function uses a non-reentrant model
   240 ;;
   241                           
   242                           	psect	text0
   243  000ECE                     __ptext0:
   244                           	opt stack 0
   245  000ECE                     _main:
   246                           	opt stack 26
   247                           
   248                           ;keypad_display.c: 15: ANSELA=0;
   249                           
   250                           ;incstack = 0
   251  000ECE  0E00               	movlw	0
   252  000ED0  010F               	movlb	15	; () banked
   253  000ED2  6F38               	movwf	56,b	;volatile
   254                           
   255                           ;keypad_display.c: 16: TRISA = 0b00000111;
   256  000ED4  0E07               	movlw	7
   257  000ED6  6E92               	movwf	3986,c	;volatile
   258                           
   259                           ;keypad_display.c: 17: LATA = 0b1111100;
   260  000ED8  0E7C               	movlw	124
   261  000EDA  6E89               	movwf	3977,c	;volatile
   262                           
   263                           ; BSR set to: 15
   264                           ;keypad_display.c: 18: glcd_on();
   265  000EDC  EC47  F008         	call	_glcd_on	;wreg free
   266                           
   267                           ;keypad_display.c: 19: glcd_clear();
   268  000EE0  EC5B  F008         	call	_glcd_clear	;wreg free
   269                           
   270                           ;keypad_display.c: 20: goto_xy(0,0);
   271  000EE4  0E00               	movlw	0
   272  000EE6  6E03               	movwf	goto_xy@y,c
   273  000EE8  0E00               	movlw	0
   274  000EEA  EC8F  F008         	call	_goto_xy
   275                           
   276                           ;keypad_display.c: 21: glcd_string("PRESSED");
   277  000EEE  0E01               	movlw	low STR_1
   278  000EF0  6E03               	movwf	glcd_string@str,c
   279  000EF2  0E06               	movlw	high STR_1
   280  000EF4  6E04               	movwf	glcd_string@str+1,c
   281  000EF6  EC9B  F007         	call	_glcd_string	;wreg free
   282  000EFA                     l1505:
   283                           
   284                           ;keypad_display.c: 24: {
   285                           ;keypad_display.c: 25: LATA = 0xFF;
   286  000EFA  6889               	setf	3977,c	;volatile
   287                           
   288                           ;keypad_display.c: 26: goto_xy(0,20);
   289  000EFC  0E14               	movlw	20
   290  000EFE  6E03               	movwf	goto_xy@y,c
   291  000F00  0E00               	movlw	0
   292  000F02  EC8F  F008         	call	_goto_xy
   293                           
   294                           ;keypad_display.c: 27: glcd_num(keyscan());
   295  000F06  EC2D  F007         	call	_keyscan	;wreg free
   296  000F0A  6E1E               	movwf	??_main& (0+255),c
   297  000F0C  501E               	movf	??_main,w,c
   298  000F0E  6E08               	movwf	glcd_num@num,c
   299  000F10  6A09               	clrf	glcd_num@num+1,c
   300  000F12  ECD0  F006         	call	_glcd_num	;wreg free
   301                           
   302                           ;keypad_display.c: 28: _delay((unsigned long)((1000)*(16000000/4000.0)));
   303  000F16  0E15               	movlw	21
   304  000F18  6E1F               	movwf	(??_main+1)& (0+255),c
   305  000F1A  0E4B               	movlw	75
   306  000F1C  6E1E               	movwf	??_main& (0+255),c
   307  000F1E  0EBE               	movlw	190
   308  000F20                     u767:
   309  000F20  2EE8               	decfsz	wreg,f,c
   310  000F22  D7FE               	bra	u767
   311  000F24  2E1E               	decfsz	??_main& (0+255),f,c
   312  000F26  D7FC               	bra	u767
   313  000F28  2E1F               	decfsz	(??_main+1)& (0+255),f,c
   314  000F2A  D7FA               	bra	u767
   315  000F2C  D000               	nop2	
   316                           
   317                           ;keypad_display.c: 29: glcd_clear_line(1);
   318  000F2E  0E01               	movlw	1
   319  000F30  EC0F  F008         	call	_glcd_clear_line
   320  000F34  D7E2               	goto	l1505
   321  000F36                     __end_of_main:
   322                           	opt stack 0
   323                           tblptru	equ	0xFF8
   324                           wreg	equ	0xFE8
   325                           
   326 ;; *************** function _keyscan *****************
   327 ;; Defined at:
   328 ;;		line 34 in file "keypad_display.c"
   329 ;; Parameters:    Size  Location     Type
   330 ;;		None
   331 ;; Auto vars:     Size  Location     Type
   332 ;;		None
   333 ;; Return value:  Size  Location     Type
   334 ;;                  1    wreg      unsigned char 
   335 ;; Registers used:
   336 ;;		wreg, status,2, status,0
   337 ;; Tracked objects:
   338 ;;		On entry : 0/0
   339 ;;		On exit  : 0/0
   340 ;;		Unchanged: 0/0
   341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   342 ;;      Params:         0       0       0       0       0       0       0
   343 ;;      Locals:         0       0       0       0       0       0       0
   344 ;;      Temps:          1       0       0       0       0       0       0
   345 ;;      Totals:         1       0       0       0       0       0       0
   346 ;;Total ram usage:        1 bytes
   347 ;; Hardware stack levels used:    1
   348 ;; This function calls:
   349 ;;		Nothing
   350 ;; This function is called by:
   351 ;;		_main
   352 ;; This function uses a non-reentrant model
   353 ;;
   354                           
   355                           	psect	text1
   356  000E5A                     __ptext1:
   357                           	opt stack 0
   358  000E5A                     _keyscan:
   359                           	opt stack 30
   360  000E5A                     
   361                           ;keypad_display.c: 37: {
   362                           ;keypad_display.c: 39: LATA = 0b00110000;
   363  000E5A  0E30               	movlw	48
   364  000E5C  6E89               	movwf	3977,c	;volatile
   365                           
   366                           ;keypad_display.c: 40: _delay((unsigned long)((5)*(16000000/4000.0)));
   367  000E5E  0E1A               	movlw	26
   368  000E60  6E01               	movwf	??_keyscan& (0+255),c
   369  000E62  0EF8               	movlw	248
   370  000E64                     u777:
   371  000E64  2EE8               	decfsz	wreg,f,c
   372  000E66  D7FE               	bra	u777
   373  000E68  2E01               	decfsz	??_keyscan& (0+255),f,c
   374  000E6A  D7FC               	bra	u777
   375  000E6C  D000               	nop2	
   376                           
   377                           ;keypad_display.c: 41: if((PORTA & 0b00110001) == 0)
   378  000E6E  CF80 F001          	movff	3968,??_keyscan	;volatile
   379  000E72  0E31               	movlw	49
   380  000E74  1601               	andwf	??_keyscan,f,c
   381  000E76  A4D8               	btfss	status,2,c
   382  000E78  D008               	goto	l1181
   383  000E7A                     l1175:
   384  000E7A  CF80 F001          	movff	3968,??_keyscan	;volatile
   385  000E7E  0E31               	movlw	49
   386  000E80  1601               	andwf	??_keyscan,f,c
   387  000E82  B4D8               	btfsc	status,2,c
   388  000E84  D7FA               	goto	l1175
   389                           
   390                           ;keypad_display.c: 44: return '0';
   391  000E86  0E30               	movlw	48
   392  000E88  0012               	return	
   393  000E8A                     l1181:
   394                           
   395                           ;keypad_display.c: 45: }
   396                           ;keypad_display.c: 47: if((PORTA & 0b00110010) == 0)
   397  000E8A  CF80 F001          	movff	3968,??_keyscan	;volatile
   398  000E8E  0E32               	movlw	50
   399  000E90  1601               	andwf	??_keyscan,f,c
   400  000E92  A4D8               	btfss	status,2,c
   401  000E94  D008               	goto	l1191
   402  000E96                     l1185:
   403  000E96  CF80 F001          	movff	3968,??_keyscan	;volatile
   404  000E9A  0E32               	movlw	50
   405  000E9C  1601               	andwf	??_keyscan,f,c
   406  000E9E  B4D8               	btfsc	status,2,c
   407  000EA0  D7FA               	goto	l1185
   408                           
   409                           ;keypad_display.c: 50: return '1';
   410  000EA2  0E31               	movlw	49
   411  000EA4  0012               	return	
   412  000EA6                     l1191:
   413                           
   414                           ;keypad_display.c: 51: }
   415                           ;keypad_display.c: 53: if((PORTA & 0b00110100) == 0)
   416  000EA6  CF80 F001          	movff	3968,??_keyscan	;volatile
   417  000EAA  0E34               	movlw	52
   418  000EAC  1601               	andwf	??_keyscan,f,c
   419  000EAE  A4D8               	btfss	status,2,c
   420  000EB0  D008               	goto	l186
   421  000EB2                     l1195:
   422  000EB2  CF80 F001          	movff	3968,??_keyscan	;volatile
   423  000EB6  0E34               	movlw	52
   424  000EB8  1601               	andwf	??_keyscan,f,c
   425  000EBA  B4D8               	btfsc	status,2,c
   426  000EBC  D7FA               	goto	l1195
   427                           
   428                           ;keypad_display.c: 56: return '2';
   429  000EBE  0E32               	movlw	50
   430  000EC0  0012               	return	
   431  000EC2                     l186:
   432                           
   433                           ;keypad_display.c: 57: }
   434                           ;keypad_display.c: 59: if((PORTA & 0b00001000) == 0)
   435  000EC2  B680               	btfsc	3968,3,c	;volatile
   436  000EC4  D7CA               	goto	l1167
   437  000EC6                     l191:
   438  000EC6  A680               	btfss	3968,3,c	;volatile
   439  000EC8  D7FE               	goto	l191
   440                           
   441                           ;keypad_display.c: 62: return '3';
   442  000ECA  0E33               	movlw	51
   443  000ECC  0012               	return	
   444  000ECE                     __end_of_keyscan:
   445                           	opt stack 0
   446                           tblptru	equ	0xFF8
   447                           wreg	equ	0xFE8
   448                           status	equ	0xFD8
   449                           
   450 ;; *************** function _glcd_string *****************
   451 ;; Defined at:
   452 ;;		line 625 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
   453 ;; Parameters:    Size  Location     Type
   454 ;;  str             2    2[COMRAM] PTR unsigned char 
   455 ;;		 -> STR_1(8), 
   456 ;; Auto vars:     Size  Location     Type
   457 ;;  i               1    6[COMRAM] unsigned char 
   458 ;; Return value:  Size  Location     Type
   459 ;;                  1    wreg      void 
   460 ;; Registers used:
   461 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   462 ;; Tracked objects:
   463 ;;		On entry : 0/0
   464 ;;		On exit  : 0/0
   465 ;;		Unchanged: 0/0
   466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   467 ;;      Params:         2       0       0       0       0       0       0
   468 ;;      Locals:         1       0       0       0       0       0       0
   469 ;;      Temps:          2       0       0       0       0       0       0
   470 ;;      Totals:         5       0       0       0       0       0       0
   471 ;;Total ram usage:        5 bytes
   472 ;; Hardware stack levels used:    1
   473 ;; Hardware stack levels required when called:    3
   474 ;; This function calls:
   475 ;;		_glcd_text
   476 ;; This function is called by:
   477 ;;		_main
   478 ;; This function uses a non-reentrant model
   479 ;;
   480                           
   481                           	psect	text2
   482  000F36                     __ptext2:
   483                           	opt stack 0
   484  000F36                     _glcd_string:
   485                           	opt stack 27
   486                           
   487                           ;glcd.h: 627: unsigned char i = 0;
   488                           
   489                           ;incstack = 0
   490  000F36  0E00               	movlw	0
   491  000F38  6E07               	movwf	glcd_string@i,c
   492                           
   493                           ;glcd.h: 628: while(str[i]!='\0')
   494  000F3A  D013               	goto	l1393
   495  000F3C                     l1389:
   496                           
   497                           ;glcd.h: 629: {
   498                           ;glcd.h: 630: glcd_text(str[i]);
   499  000F3C  5007               	movf	glcd_string@i,w,c
   500  000F3E  0D01               	mullw	1
   501  000F40  C003  F005         	movff	glcd_string@str,??_glcd_string
   502  000F44  C004  F006         	movff	glcd_string@str+1,??_glcd_string+1
   503  000F48  50F3               	movf	prodl,w,c
   504  000F4A  2605               	addwf	??_glcd_string,f,c
   505  000F4C  50F4               	movf	prodh,w,c
   506  000F4E  2206               	addwfc	??_glcd_string+1,f,c
   507  000F50  C005  FFF6         	movff	??_glcd_string,tblptrl
   508  000F54  C006  FFF7         	movff	??_glcd_string+1,tblptrh
   509  000F58                     	if	0	;tblptru may be non-zero
   510  000F58                     	endif
   511  000F58                     	if	0	;tblptru may be non-zero
   512  000F58                     	endif
   513  000F58  0008               	tblrd		*
   514  000F5A  50F5               	movf	tablat,w,c
   515  000F5C  EC05  F003         	call	_glcd_text
   516                           
   517                           ;glcd.h: 631: i++;
   518  000F60  2A07               	incf	glcd_string@i,f,c
   519  000F62                     l1393:
   520  000F62  5007               	movf	glcd_string@i,w,c
   521  000F64  0D01               	mullw	1
   522  000F66  C003  F005         	movff	glcd_string@str,??_glcd_string
   523  000F6A  C004  F006         	movff	glcd_string@str+1,??_glcd_string+1
   524  000F6E  50F3               	movf	prodl,w,c
   525  000F70  2605               	addwf	??_glcd_string,f,c
   526  000F72  50F4               	movf	prodh,w,c
   527  000F74  2206               	addwfc	??_glcd_string+1,f,c
   528  000F76  C005  FFF6         	movff	??_glcd_string,tblptrl
   529  000F7A  C006  FFF7         	movff	??_glcd_string+1,tblptrh
   530  000F7E                     	if	0	;tblptru may be non-zero
   531  000F7E                     	endif
   532  000F7E                     	if	0	;tblptru may be non-zero
   533  000F7E                     	endif
   534  000F7E  0008               	tblrd		*
   535  000F80  50F5               	movf	tablat,w,c
   536  000F82  0900               	iorlw	0
   537  000F84  B4D8               	btfsc	status,2,c
   538  000F86  0012               	return	
   539  000F88  D7D9               	goto	l1389
   540  000F8A                     __end_of_glcd_string:
   541                           	opt stack 0
   542                           tblptru	equ	0xFF8
   543                           tblptrh	equ	0xFF7
   544                           tblptrl	equ	0xFF6
   545                           tablat	equ	0xFF5
   546                           prodh	equ	0xFF4
   547                           prodl	equ	0xFF3
   548                           wreg	equ	0xFE8
   549                           status	equ	0xFD8
   550                           
   551 ;; *************** function _glcd_on *****************
   552 ;; Defined at:
   553 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
   554 ;; Parameters:    Size  Location     Type
   555 ;;		None
   556 ;; Auto vars:     Size  Location     Type
   557 ;;		None
   558 ;; Return value:  Size  Location     Type
   559 ;;                  1    wreg      void 
   560 ;; Registers used:
   561 ;;		wreg, status,2, cstack
   562 ;; Tracked objects:
   563 ;;		On entry : 0/0
   564 ;;		On exit  : 0/0
   565 ;;		Unchanged: 0/0
   566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   567 ;;      Params:         0       0       0       0       0       0       0
   568 ;;      Locals:         0       0       0       0       0       0       0
   569 ;;      Temps:          0       0       0       0       0       0       0
   570 ;;      Totals:         0       0       0       0       0       0       0
   571 ;;Total ram usage:        0 bytes
   572 ;; Hardware stack levels used:    1
   573 ;; Hardware stack levels required when called:    1
   574 ;; This function calls:
   575 ;;		_enable_pulse
   576 ;; This function is called by:
   577 ;;		_main
   578 ;; This function uses a non-reentrant model
   579 ;;
   580                           
   581                           	psect	text3
   582  00108E                     __ptext3:
   583                           	opt stack 0
   584  00108E                     _glcd_on:
   585                           	opt stack 29
   586                           
   587                           ;glcd.h: 65: TRISD = 0x00;
   588                           
   589                           ;incstack = 0
   590  00108E  0E00               	movlw	0
   591  001090  6E95               	movwf	3989,c	;volatile
   592                           
   593                           ;glcd.h: 66: TRISB = 0x00;
   594  001092  0E00               	movlw	0
   595  001094  6E93               	movwf	3987,c	;volatile
   596                           
   597                           ;glcd.h: 67: PORTD = 0x00;
   598  001096  0E00               	movlw	0
   599  001098  6E83               	movwf	3971,c	;volatile
   600                           
   601                           ;glcd.h: 68: PORTB = 0x00;
   602  00109A  0E00               	movlw	0
   603  00109C  6E81               	movwf	3969,c	;volatile
   604                           
   605                           ;glcd.h: 69: PORTBbits.RB3 = 1;
   606  00109E  8681               	bsf	3969,3,c	;volatile
   607                           
   608                           ;glcd.h: 70: PORTBbits.RB4 = 1;
   609  0010A0  8881               	bsf	3969,4,c	;volatile
   610                           
   611                           ;glcd.h: 71: PORTBbits.RB5 = 1;
   612  0010A2  8A81               	bsf	3969,5,c	;volatile
   613                           
   614                           ;glcd.h: 73: PORTBbits.RB4 = 1;
   615  0010A4  8881               	bsf	3969,4,c	;volatile
   616                           
   617                           ;glcd.h: 74: PORTBbits.RB5 = 1;
   618  0010A6  8A81               	bsf	3969,5,c	;volatile
   619                           
   620                           ;glcd.h: 75: PORTBbits.RB0 = 0;
   621  0010A8  9081               	bcf	3969,0,c	;volatile
   622                           
   623                           ;glcd.h: 76: PORTBbits.RB1 = 0;
   624  0010AA  9281               	bcf	3969,1,c	;volatile
   625                           
   626                           ;glcd.h: 77: PORTD = 0x3F;
   627  0010AC  0E3F               	movlw	63
   628  0010AE  6E83               	movwf	3971,c	;volatile
   629                           
   630                           ;glcd.h: 78: enable_pulse();
   631  0010B0  EC84  F008         	call	_enable_pulse	;wreg free
   632  0010B4  0012               	return		;funcret
   633  0010B6                     __end_of_glcd_on:
   634                           	opt stack 0
   635                           tblptru	equ	0xFF8
   636                           tblptrh	equ	0xFF7
   637                           tblptrl	equ	0xFF6
   638                           tablat	equ	0xFF5
   639                           prodh	equ	0xFF4
   640                           prodl	equ	0xFF3
   641                           wreg	equ	0xFE8
   642                           status	equ	0xFD8
   643                           
   644 ;; *************** function _glcd_num *****************
   645 ;; Defined at:
   646 ;;		line 603 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
   647 ;; Parameters:    Size  Location     Type
   648 ;;  num             2    7[COMRAM] unsigned int 
   649 ;; Auto vars:     Size  Location     Type
   650 ;;  number         16   11[COMRAM] unsigned char [16]
   651 ;;  j               1   28[COMRAM] unsigned char 
   652 ;;  i               1   27[COMRAM] unsigned char 
   653 ;; Return value:  Size  Location     Type
   654 ;;                  1    wreg      void 
   655 ;; Registers used:
   656 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   657 ;; Tracked objects:
   658 ;;		On entry : 0/0
   659 ;;		On exit  : 0/0
   660 ;;		Unchanged: 0/0
   661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   662 ;;      Params:         2       0       0       0       0       0       0
   663 ;;      Locals:        18       0       0       0       0       0       0
   664 ;;      Temps:          2       0       0       0       0       0       0
   665 ;;      Totals:        22       0       0       0       0       0       0
   666 ;;Total ram usage:       22 bytes
   667 ;; Hardware stack levels used:    1
   668 ;; Hardware stack levels required when called:    3
   669 ;; This function calls:
   670 ;;		___lwdiv
   671 ;;		___lwmod
   672 ;;		_glcd_text
   673 ;; This function is called by:
   674 ;;		_main
   675 ;; This function uses a non-reentrant model
   676 ;;
   677                           
   678                           	psect	text4
   679  000DA0                     __ptext4:
   680                           	opt stack 0
   681  000DA0                     _glcd_num:
   682                           	opt stack 27
   683                           
   684                           ;glcd.h: 605: unsigned char j, i = 1;
   685                           
   686                           ;incstack = 0
   687  000DA0  0E01               	movlw	1
   688  000DA2  6E1C               	movwf	glcd_num@i,c
   689                           
   690                           ;glcd.h: 606: unsigned char number[16];
   691                           ;glcd.h: 607: for(j=0;j<16;j++)
   692  000DA4  0E00               	movlw	0
   693  000DA6  6E1D               	movwf	glcd_num@j,c
   694  000DA8                     l1355:
   695  000DA8  0E0F               	movlw	15
   696  000DAA  641D               	cpfsgt	glcd_num@j,c
   697  000DAC  D001               	goto	l1359
   698  000DAE  D02F               	goto	l1371
   699  000DB0                     l1359:
   700                           
   701                           ;glcd.h: 608: number[j] = 0;
   702  000DB0  501D               	movf	glcd_num@j,w,c
   703  000DB2  0D01               	mullw	1
   704  000DB4  0E0C               	movlw	low glcd_num@number
   705  000DB6  24F3               	addwf	prodl,w,c
   706  000DB8  6ED9               	movwf	fsr2l,c
   707  000DBA  0E00               	movlw	high glcd_num@number
   708  000DBC  20F4               	addwfc	prodh,w,c
   709  000DBE  6EDA               	movwf	fsr2h,c
   710  000DC0  0E00               	movlw	0
   711  000DC2  6EDF               	movwf	indf2,c
   712  000DC4  2A1D               	incf	glcd_num@j,f,c
   713  000DC6  D7F0               	goto	l1355
   714  000DC8                     l1365:
   715                           
   716                           ;glcd.h: 611: {
   717                           ;glcd.h: 612: number[i] = num%10;
   718  000DC8  501C               	movf	glcd_num@i,w,c
   719  000DCA  0D01               	mullw	1
   720  000DCC  0E0C               	movlw	low glcd_num@number
   721  000DCE  24F3               	addwf	prodl,w,c
   722  000DD0  6ED9               	movwf	fsr2l,c
   723  000DD2  0E00               	movlw	high glcd_num@number
   724  000DD4  20F4               	addwfc	prodh,w,c
   725  000DD6  6EDA               	movwf	fsr2h,c
   726  000DD8  C008  F001         	movff	glcd_num@num,___lwmod@dividend
   727  000DDC  C009  F002         	movff	glcd_num@num+1,___lwmod@dividend+1
   728  000DE0  0E00               	movlw	0
   729  000DE2  6E04               	movwf	___lwmod@divisor+1,c
   730  000DE4  0E0A               	movlw	10
   731  000DE6  6E03               	movwf	___lwmod@divisor,c
   732  000DE8  ECEE  F007         	call	___lwmod	;wreg free
   733  000DEC  5001               	movf	?___lwmod,w,c
   734  000DEE  6EDF               	movwf	indf2,c
   735                           
   736                           ;glcd.h: 613: num = num/10;
   737  000DF0  C008  F001         	movff	glcd_num@num,___lwdiv@dividend
   738  000DF4  C009  F002         	movff	glcd_num@num+1,___lwdiv@dividend+1
   739  000DF8  0E00               	movlw	0
   740  000DFA  6E04               	movwf	___lwdiv@divisor+1,c
   741  000DFC  0E0A               	movlw	10
   742  000DFE  6E03               	movwf	___lwdiv@divisor,c
   743  000E00  ECC5  F007         	call	___lwdiv	;wreg free
   744  000E04  C001  F008         	movff	?___lwdiv,glcd_num@num
   745  000E08  C002  F009         	movff	?___lwdiv+1,glcd_num@num+1
   746                           
   747                           ;glcd.h: 614: i++;
   748  000E0C  2A1C               	incf	glcd_num@i,f,c
   749  000E0E                     l1371:
   750  000E0E  5008               	movf	glcd_num@num,w,c
   751  000E10  1009               	iorwf	glcd_num@num+1,w,c
   752  000E12  A4D8               	btfss	status,2,c
   753  000E14  D7D9               	goto	l1365
   754                           
   755                           ;glcd.h: 615: }
   756                           ;glcd.h: 616: number[i+1] = 0;
   757  000E16  501C               	movf	glcd_num@i,w,c
   758  000E18  6E0A               	movwf	??_glcd_num& (0+255),c
   759  000E1A  6A0B               	clrf	(??_glcd_num+1)& (0+255),c
   760  000E1C  0E01               	movlw	1
   761  000E1E  260A               	addwf	??_glcd_num,f,c
   762  000E20  0E00               	movlw	0
   763  000E22  220B               	addwfc	??_glcd_num+1,f,c
   764  000E24  0E0C               	movlw	low glcd_num@number
   765  000E26  240A               	addwf	??_glcd_num,w,c
   766  000E28  6ED9               	movwf	fsr2l,c
   767  000E2A  0E00               	movlw	high glcd_num@number
   768  000E2C  200B               	addwfc	??_glcd_num+1,w,c
   769  000E2E  6EDA               	movwf	fsr2h,c
   770  000E30  0E00               	movlw	0
   771  000E32  6EDF               	movwf	indf2,c
   772                           
   773                           ;glcd.h: 617: for(j=i;j>0;j--)
   774  000E34  C01C  F01D         	movff	glcd_num@i,glcd_num@j
   775  000E38                     l1377:
   776  000E38  501D               	movf	glcd_num@j,w,c
   777  000E3A  B4D8               	btfsc	status,2,c
   778  000E3C  0012               	return	
   779                           
   780                           ;glcd.h: 618: {
   781                           ;glcd.h: 619: glcd_text(number[j]+48);
   782  000E3E  501D               	movf	glcd_num@j,w,c
   783  000E40  0D01               	mullw	1
   784  000E42  0E0C               	movlw	low glcd_num@number
   785  000E44  24F3               	addwf	prodl,w,c
   786  000E46  6ED9               	movwf	fsr2l,c
   787  000E48  0E00               	movlw	high glcd_num@number
   788  000E4A  20F4               	addwfc	prodh,w,c
   789  000E4C  6EDA               	movwf	fsr2h,c
   790  000E4E  50DF               	movf	indf2,w,c
   791  000E50  0F30               	addlw	48
   792  000E52  EC05  F003         	call	_glcd_text
   793  000E56  061D               	decf	glcd_num@j,f,c
   794  000E58  D7EF               	goto	l1377
   795  000E5A                     __end_of_glcd_num:
   796                           	opt stack 0
   797                           tblptru	equ	0xFF8
   798                           tblptrh	equ	0xFF7
   799                           tblptrl	equ	0xFF6
   800                           tablat	equ	0xFF5
   801                           prodh	equ	0xFF4
   802                           prodl	equ	0xFF3
   803                           wreg	equ	0xFE8
   804                           indf2	equ	0xFDF
   805                           fsr2h	equ	0xFDA
   806                           fsr2l	equ	0xFD9
   807                           status	equ	0xFD8
   808                           
   809 ;; *************** function _glcd_text *****************
   810 ;; Defined at:
   811 ;;		line 201 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
   812 ;; Parameters:    Size  Location     Type
   813 ;;  text            1    wreg     unsigned char 
   814 ;; Auto vars:     Size  Location     Type
   815 ;;  text            1    1[COMRAM] unsigned char 
   816 ;; Return value:  Size  Location     Type
   817 ;;                  1    wreg      void 
   818 ;; Registers used:
   819 ;;		wreg, status,2, status,0, cstack
   820 ;; Tracked objects:
   821 ;;		On entry : 0/0
   822 ;;		On exit  : 0/0
   823 ;;		Unchanged: 0/0
   824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   825 ;;      Params:         0       0       0       0       0       0       0
   826 ;;      Locals:         1       0       0       0       0       0       0
   827 ;;      Temps:          0       0       0       0       0       0       0
   828 ;;      Totals:         1       0       0       0       0       0       0
   829 ;;Total ram usage:        1 bytes
   830 ;; Hardware stack levels used:    1
   831 ;; Hardware stack levels required when called:    2
   832 ;; This function calls:
   833 ;;		_glcd_write
   834 ;; This function is called by:
   835 ;;		_glcd_num
   836 ;;		_glcd_string
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840                           	psect	text5
   841  00060A                     __ptext5:
   842                           	opt stack 0
   843  00060A                     _glcd_text:
   844                           	opt stack 27
   845                           
   846                           ;incstack = 0
   847                           ;glcd_text@text stored from wreg
   848  00060A  6E02               	movwf	glcd_text@text,c
   849                           
   850                           ;glcd.h: 203: switch (text)
   851  00060C  D34F               	goto	l993
   852  00060E                     l911:
   853                           
   854                           ;glcd.h: 207: glcd_write(0x00);
   855  00060E  0E00               	movlw	0
   856  000610  EC78  F008         	call	_glcd_write
   857                           
   858                           ;glcd.h: 208: glcd_write(0x7E);
   859  000614  0E7E               	movlw	126
   860  000616  EC78  F008         	call	_glcd_write
   861                           
   862                           ;glcd.h: 209: glcd_write(0x09);
   863  00061A  0E09               	movlw	9
   864  00061C  EC78  F008         	call	_glcd_write
   865                           
   866                           ;glcd.h: 210: glcd_write(0x09);
   867  000620  0E09               	movlw	9
   868  000622  EC78  F008         	call	_glcd_write
   869                           
   870                           ;glcd.h: 211: glcd_write(0x09);
   871  000626  0E09               	movlw	9
   872  000628  EC78  F008         	call	_glcd_write
   873                           
   874                           ;glcd.h: 212: glcd_write(0x7E);
   875  00062C  0E7E               	movlw	126
   876  00062E  EC78  F008         	call	_glcd_write
   877                           
   878                           ;glcd.h: 213: glcd_write(0x00);
   879  000632  0E00               	movlw	0
   880  000634  EC78  F008         	call	_glcd_write
   881                           
   882                           ;glcd.h: 214: break;
   883  000638  0012               	return	
   884  00063A                     l913:
   885                           
   886                           ;glcd.h: 217: glcd_write(0x00);
   887  00063A  0E00               	movlw	0
   888  00063C  EC78  F008         	call	_glcd_write
   889                           
   890                           ;glcd.h: 218: glcd_write(0x7F);
   891  000640  0E7F               	movlw	127
   892  000642  EC78  F008         	call	_glcd_write
   893                           
   894                           ;glcd.h: 219: glcd_write(0x49);
   895  000646  0E49               	movlw	73
   896  000648  EC78  F008         	call	_glcd_write
   897                           
   898                           ;glcd.h: 220: glcd_write(0x49);
   899  00064C  0E49               	movlw	73
   900  00064E  EC78  F008         	call	_glcd_write
   901                           
   902                           ;glcd.h: 221: glcd_write(0x49);
   903  000652  0E49               	movlw	73
   904  000654  EC78  F008         	call	_glcd_write
   905                           
   906                           ;glcd.h: 222: glcd_write(0x36);
   907  000658  0E36               	movlw	54
   908  00065A  EC78  F008         	call	_glcd_write
   909                           
   910                           ;glcd.h: 223: glcd_write(0x00);
   911  00065E  0E00               	movlw	0
   912  000660  EC78  F008         	call	_glcd_write
   913                           
   914                           ;glcd.h: 224: break;
   915  000664  0012               	return	
   916  000666                     l915:
   917                           
   918                           ;glcd.h: 227: glcd_write(0x00);
   919  000666  0E00               	movlw	0
   920  000668  EC78  F008         	call	_glcd_write
   921                           
   922                           ;glcd.h: 228: glcd_write(0x3E);
   923  00066C  0E3E               	movlw	62
   924  00066E  EC78  F008         	call	_glcd_write
   925                           
   926                           ;glcd.h: 229: glcd_write(0x41);
   927  000672  0E41               	movlw	65
   928  000674  EC78  F008         	call	_glcd_write
   929                           
   930                           ;glcd.h: 230: glcd_write(0x41);
   931  000678  0E41               	movlw	65
   932  00067A  EC78  F008         	call	_glcd_write
   933                           
   934                           ;glcd.h: 231: glcd_write(0x41);
   935  00067E  0E41               	movlw	65
   936  000680  EC78  F008         	call	_glcd_write
   937                           
   938                           ;glcd.h: 232: glcd_write(0x22);
   939  000684  0E22               	movlw	34
   940  000686  EC78  F008         	call	_glcd_write
   941                           
   942                           ;glcd.h: 233: glcd_write(0x00);
   943  00068A  0E00               	movlw	0
   944  00068C  EC78  F008         	call	_glcd_write
   945                           
   946                           ;glcd.h: 234: break;
   947  000690  0012               	return	
   948  000692                     l917:
   949                           
   950                           ;glcd.h: 237: glcd_write(0x00);
   951  000692  0E00               	movlw	0
   952  000694  EC78  F008         	call	_glcd_write
   953                           
   954                           ;glcd.h: 238: glcd_write(0x7F);
   955  000698  0E7F               	movlw	127
   956  00069A  EC78  F008         	call	_glcd_write
   957                           
   958                           ;glcd.h: 239: glcd_write(0x41);
   959  00069E  0E41               	movlw	65
   960  0006A0  EC78  F008         	call	_glcd_write
   961                           
   962                           ;glcd.h: 240: glcd_write(0x41);
   963  0006A4  0E41               	movlw	65
   964  0006A6  EC78  F008         	call	_glcd_write
   965                           
   966                           ;glcd.h: 241: glcd_write(0x41);
   967  0006AA  0E41               	movlw	65
   968  0006AC  EC78  F008         	call	_glcd_write
   969                           
   970                           ;glcd.h: 242: glcd_write(0x3E);
   971  0006B0  0E3E               	movlw	62
   972  0006B2  EC78  F008         	call	_glcd_write
   973                           
   974                           ;glcd.h: 243: glcd_write(0x00);
   975  0006B6  0E00               	movlw	0
   976  0006B8  EC78  F008         	call	_glcd_write
   977                           
   978                           ;glcd.h: 244: break;
   979  0006BC  0012               	return	
   980  0006BE                     l919:
   981                           
   982                           ;glcd.h: 247: glcd_write(0x00);
   983  0006BE  0E00               	movlw	0
   984  0006C0  EC78  F008         	call	_glcd_write
   985                           
   986                           ;glcd.h: 248: glcd_write(0x7F);
   987  0006C4  0E7F               	movlw	127
   988  0006C6  EC78  F008         	call	_glcd_write
   989                           
   990                           ;glcd.h: 249: glcd_write(0x49);
   991  0006CA  0E49               	movlw	73
   992  0006CC  EC78  F008         	call	_glcd_write
   993                           
   994                           ;glcd.h: 250: glcd_write(0x49);
   995  0006D0  0E49               	movlw	73
   996  0006D2  EC78  F008         	call	_glcd_write
   997                           
   998                           ;glcd.h: 251: glcd_write(0x49);
   999  0006D6  0E49               	movlw	73
  1000  0006D8  EC78  F008         	call	_glcd_write
  1001                           
  1002                           ;glcd.h: 252: glcd_write(0x41);
  1003  0006DC  0E41               	movlw	65
  1004  0006DE  EC78  F008         	call	_glcd_write
  1005                           
  1006                           ;glcd.h: 253: glcd_write(0x00);
  1007  0006E2  0E00               	movlw	0
  1008  0006E4  EC78  F008         	call	_glcd_write
  1009                           
  1010                           ;glcd.h: 254: break;
  1011  0006E8  0012               	return	
  1012  0006EA                     l921:
  1013                           
  1014                           ;glcd.h: 257: glcd_write(0x00);
  1015  0006EA  0E00               	movlw	0
  1016  0006EC  EC78  F008         	call	_glcd_write
  1017                           
  1018                           ;glcd.h: 258: glcd_write(0x7F);
  1019  0006F0  0E7F               	movlw	127
  1020  0006F2  EC78  F008         	call	_glcd_write
  1021                           
  1022                           ;glcd.h: 259: glcd_write(0x09);
  1023  0006F6  0E09               	movlw	9
  1024  0006F8  EC78  F008         	call	_glcd_write
  1025                           
  1026                           ;glcd.h: 260: glcd_write(0x09);
  1027  0006FC  0E09               	movlw	9
  1028  0006FE  EC78  F008         	call	_glcd_write
  1029                           
  1030                           ;glcd.h: 261: glcd_write(0x09);
  1031  000702  0E09               	movlw	9
  1032  000704  EC78  F008         	call	_glcd_write
  1033                           
  1034                           ;glcd.h: 262: glcd_write(0x01);
  1035  000708  0E01               	movlw	1
  1036  00070A  EC78  F008         	call	_glcd_write
  1037                           
  1038                           ;glcd.h: 263: glcd_write(0x00);
  1039  00070E  0E00               	movlw	0
  1040  000710  EC78  F008         	call	_glcd_write
  1041                           
  1042                           ;glcd.h: 264: break;
  1043  000714  0012               	return	
  1044  000716                     l923:
  1045                           
  1046                           ;glcd.h: 267: glcd_write(0x00);
  1047  000716  0E00               	movlw	0
  1048  000718  EC78  F008         	call	_glcd_write
  1049                           
  1050                           ;glcd.h: 268: glcd_write(0x3E);
  1051  00071C  0E3E               	movlw	62
  1052  00071E  EC78  F008         	call	_glcd_write
  1053                           
  1054                           ;glcd.h: 269: glcd_write(0x41);
  1055  000722  0E41               	movlw	65
  1056  000724  EC78  F008         	call	_glcd_write
  1057                           
  1058                           ;glcd.h: 270: glcd_write(0x41);
  1059  000728  0E41               	movlw	65
  1060  00072A  EC78  F008         	call	_glcd_write
  1061                           
  1062                           ;glcd.h: 271: glcd_write(0x49);
  1063  00072E  0E49               	movlw	73
  1064  000730  EC78  F008         	call	_glcd_write
  1065                           
  1066                           ;glcd.h: 272: glcd_write(0x3A);
  1067  000734  0E3A               	movlw	58
  1068  000736  EC78  F008         	call	_glcd_write
  1069                           
  1070                           ;glcd.h: 273: glcd_write(0x00);
  1071  00073A  0E00               	movlw	0
  1072  00073C  EC78  F008         	call	_glcd_write
  1073                           
  1074                           ;glcd.h: 274: break;
  1075  000740  0012               	return	
  1076  000742                     l925:
  1077                           
  1078                           ;glcd.h: 277: glcd_write(0x00);
  1079  000742  0E00               	movlw	0
  1080  000744  EC78  F008         	call	_glcd_write
  1081                           
  1082                           ;glcd.h: 278: glcd_write(0x7F);
  1083  000748  0E7F               	movlw	127
  1084  00074A  EC78  F008         	call	_glcd_write
  1085                           
  1086                           ;glcd.h: 279: glcd_write(0x08);
  1087  00074E  0E08               	movlw	8
  1088  000750  EC78  F008         	call	_glcd_write
  1089                           
  1090                           ;glcd.h: 280: glcd_write(0x08);
  1091  000754  0E08               	movlw	8
  1092  000756  EC78  F008         	call	_glcd_write
  1093                           
  1094                           ;glcd.h: 281: glcd_write(0x08);
  1095  00075A  0E08               	movlw	8
  1096  00075C  EC78  F008         	call	_glcd_write
  1097                           
  1098                           ;glcd.h: 282: glcd_write(0x7F);
  1099  000760  0E7F               	movlw	127
  1100  000762  EC78  F008         	call	_glcd_write
  1101                           
  1102                           ;glcd.h: 283: glcd_write(0x00);
  1103  000766  0E00               	movlw	0
  1104  000768  EC78  F008         	call	_glcd_write
  1105                           
  1106                           ;glcd.h: 284: break;
  1107  00076C  0012               	return	
  1108  00076E                     l927:
  1109                           
  1110                           ;glcd.h: 287: glcd_write(0x00);
  1111  00076E  0E00               	movlw	0
  1112  000770  EC78  F008         	call	_glcd_write
  1113                           
  1114                           ;glcd.h: 288: glcd_write(0x00);
  1115  000774  0E00               	movlw	0
  1116  000776  EC78  F008         	call	_glcd_write
  1117                           
  1118                           ;glcd.h: 289: glcd_write(0x41);
  1119  00077A  0E41               	movlw	65
  1120  00077C  EC78  F008         	call	_glcd_write
  1121                           
  1122                           ;glcd.h: 290: glcd_write(0x7F);
  1123  000780  0E7F               	movlw	127
  1124  000782  EC78  F008         	call	_glcd_write
  1125                           
  1126                           ;glcd.h: 291: glcd_write(0x41);
  1127  000786  0E41               	movlw	65
  1128  000788  EC78  F008         	call	_glcd_write
  1129                           
  1130                           ;glcd.h: 292: glcd_write(0x00);
  1131  00078C  0E00               	movlw	0
  1132  00078E  EC78  F008         	call	_glcd_write
  1133                           
  1134                           ;glcd.h: 293: glcd_write(0x00);
  1135  000792  0E00               	movlw	0
  1136  000794  EC78  F008         	call	_glcd_write
  1137                           
  1138                           ;glcd.h: 294: break;
  1139  000798  0012               	return	
  1140  00079A                     l929:
  1141                           
  1142                           ;glcd.h: 297: glcd_write(0x00);
  1143  00079A  0E00               	movlw	0
  1144  00079C  EC78  F008         	call	_glcd_write
  1145                           
  1146                           ;glcd.h: 298: glcd_write(0x30);
  1147  0007A0  0E30               	movlw	48
  1148  0007A2  EC78  F008         	call	_glcd_write
  1149                           
  1150                           ;glcd.h: 299: glcd_write(0x40);
  1151  0007A6  0E40               	movlw	64
  1152  0007A8  EC78  F008         	call	_glcd_write
  1153                           
  1154                           ;glcd.h: 300: glcd_write(0x40);
  1155  0007AC  0E40               	movlw	64
  1156  0007AE  EC78  F008         	call	_glcd_write
  1157                           
  1158                           ;glcd.h: 301: glcd_write(0x40);
  1159  0007B2  0E40               	movlw	64
  1160  0007B4  EC78  F008         	call	_glcd_write
  1161                           
  1162                           ;glcd.h: 302: glcd_write(0x3F);
  1163  0007B8  0E3F               	movlw	63
  1164  0007BA  EC78  F008         	call	_glcd_write
  1165                           
  1166                           ;glcd.h: 303: glcd_write(0x00);
  1167  0007BE  0E00               	movlw	0
  1168  0007C0  EC78  F008         	call	_glcd_write
  1169                           
  1170                           ;glcd.h: 304: break;
  1171  0007C4  0012               	return	
  1172  0007C6                     l931:
  1173                           
  1174                           ;glcd.h: 307: glcd_write(0x00);
  1175  0007C6  0E00               	movlw	0
  1176  0007C8  EC78  F008         	call	_glcd_write
  1177                           
  1178                           ;glcd.h: 308: glcd_write(0x7F);
  1179  0007CC  0E7F               	movlw	127
  1180  0007CE  EC78  F008         	call	_glcd_write
  1181                           
  1182                           ;glcd.h: 309: glcd_write(0x08);
  1183  0007D2  0E08               	movlw	8
  1184  0007D4  EC78  F008         	call	_glcd_write
  1185                           
  1186                           ;glcd.h: 310: glcd_write(0x14);
  1187  0007D8  0E14               	movlw	20
  1188  0007DA  EC78  F008         	call	_glcd_write
  1189                           
  1190                           ;glcd.h: 311: glcd_write(0x22);
  1191  0007DE  0E22               	movlw	34
  1192  0007E0  EC78  F008         	call	_glcd_write
  1193                           
  1194                           ;glcd.h: 312: glcd_write(0x41);
  1195  0007E4  0E41               	movlw	65
  1196  0007E6  EC78  F008         	call	_glcd_write
  1197                           
  1198                           ;glcd.h: 313: glcd_write(0x00);
  1199  0007EA  0E00               	movlw	0
  1200  0007EC  EC78  F008         	call	_glcd_write
  1201                           
  1202                           ;glcd.h: 314: break;
  1203  0007F0  0012               	return	
  1204  0007F2                     l933:
  1205                           
  1206                           ;glcd.h: 317: glcd_write(0x00);
  1207  0007F2  0E00               	movlw	0
  1208  0007F4  EC78  F008         	call	_glcd_write
  1209                           
  1210                           ;glcd.h: 318: glcd_write(0x7F);
  1211  0007F8  0E7F               	movlw	127
  1212  0007FA  EC78  F008         	call	_glcd_write
  1213                           
  1214                           ;glcd.h: 319: glcd_write(0x40);
  1215  0007FE  0E40               	movlw	64
  1216  000800  EC78  F008         	call	_glcd_write
  1217                           
  1218                           ;glcd.h: 320: glcd_write(0x40);
  1219  000804  0E40               	movlw	64
  1220  000806  EC78  F008         	call	_glcd_write
  1221                           
  1222                           ;glcd.h: 321: glcd_write(0x40);
  1223  00080A  0E40               	movlw	64
  1224  00080C  EC78  F008         	call	_glcd_write
  1225                           
  1226                           ;glcd.h: 322: glcd_write(0x40);
  1227  000810  0E40               	movlw	64
  1228  000812  EC78  F008         	call	_glcd_write
  1229                           
  1230                           ;glcd.h: 323: glcd_write(0x00);
  1231  000816  0E00               	movlw	0
  1232  000818  EC78  F008         	call	_glcd_write
  1233                           
  1234                           ;glcd.h: 324: break;
  1235  00081C  0012               	return	
  1236  00081E                     l935:
  1237                           
  1238                           ;glcd.h: 327: glcd_write(0x00);
  1239  00081E  0E00               	movlw	0
  1240  000820  EC78  F008         	call	_glcd_write
  1241                           
  1242                           ;glcd.h: 328: glcd_write(0x7F);
  1243  000824  0E7F               	movlw	127
  1244  000826  EC78  F008         	call	_glcd_write
  1245                           
  1246                           ;glcd.h: 329: glcd_write(0x02);
  1247  00082A  0E02               	movlw	2
  1248  00082C  EC78  F008         	call	_glcd_write
  1249                           
  1250                           ;glcd.h: 330: glcd_write(0x0C);
  1251  000830  0E0C               	movlw	12
  1252  000832  EC78  F008         	call	_glcd_write
  1253                           
  1254                           ;glcd.h: 331: glcd_write(0x02);
  1255  000836  0E02               	movlw	2
  1256  000838  EC78  F008         	call	_glcd_write
  1257                           
  1258                           ;glcd.h: 332: glcd_write(0x7F);
  1259  00083C  0E7F               	movlw	127
  1260  00083E  EC78  F008         	call	_glcd_write
  1261                           
  1262                           ;glcd.h: 333: glcd_write(0x00);
  1263  000842  0E00               	movlw	0
  1264  000844  EC78  F008         	call	_glcd_write
  1265                           
  1266                           ;glcd.h: 334: break;
  1267  000848  0012               	return	
  1268  00084A                     l937:
  1269                           
  1270                           ;glcd.h: 337: glcd_write(0x00);
  1271  00084A  0E00               	movlw	0
  1272  00084C  EC78  F008         	call	_glcd_write
  1273                           
  1274                           ;glcd.h: 338: glcd_write(0x7F);
  1275  000850  0E7F               	movlw	127
  1276  000852  EC78  F008         	call	_glcd_write
  1277                           
  1278                           ;glcd.h: 339: glcd_write(0x02);
  1279  000856  0E02               	movlw	2
  1280  000858  EC78  F008         	call	_glcd_write
  1281                           
  1282                           ;glcd.h: 340: glcd_write(0x04);
  1283  00085C  0E04               	movlw	4
  1284  00085E  EC78  F008         	call	_glcd_write
  1285                           
  1286                           ;glcd.h: 341: glcd_write(0x08);
  1287  000862  0E08               	movlw	8
  1288  000864  EC78  F008         	call	_glcd_write
  1289                           
  1290                           ;glcd.h: 342: glcd_write(0x7F);
  1291  000868  0E7F               	movlw	127
  1292  00086A  EC78  F008         	call	_glcd_write
  1293                           
  1294                           ;glcd.h: 343: glcd_write(0x00);
  1295  00086E  0E00               	movlw	0
  1296  000870  EC78  F008         	call	_glcd_write
  1297                           
  1298                           ;glcd.h: 344: break;
  1299  000874  0012               	return	
  1300  000876                     l939:
  1301                           
  1302                           ;glcd.h: 347: glcd_write(0x00);
  1303  000876  0E00               	movlw	0
  1304  000878  EC78  F008         	call	_glcd_write
  1305                           
  1306                           ;glcd.h: 348: glcd_write(0x3E);
  1307  00087C  0E3E               	movlw	62
  1308  00087E  EC78  F008         	call	_glcd_write
  1309                           
  1310                           ;glcd.h: 349: glcd_write(0x41);
  1311  000882  0E41               	movlw	65
  1312  000884  EC78  F008         	call	_glcd_write
  1313                           
  1314                           ;glcd.h: 350: glcd_write(0x41);
  1315  000888  0E41               	movlw	65
  1316  00088A  EC78  F008         	call	_glcd_write
  1317                           
  1318                           ;glcd.h: 351: glcd_write(0x41);
  1319  00088E  0E41               	movlw	65
  1320  000890  EC78  F008         	call	_glcd_write
  1321                           
  1322                           ;glcd.h: 352: glcd_write(0x3E);
  1323  000894  0E3E               	movlw	62
  1324  000896  EC78  F008         	call	_glcd_write
  1325                           
  1326                           ;glcd.h: 353: glcd_write(0x00);
  1327  00089A  0E00               	movlw	0
  1328  00089C  EC78  F008         	call	_glcd_write
  1329                           
  1330                           ;glcd.h: 354: break;
  1331  0008A0  0012               	return	
  1332  0008A2                     l941:
  1333                           
  1334                           ;glcd.h: 357: glcd_write(0x00);
  1335  0008A2  0E00               	movlw	0
  1336  0008A4  EC78  F008         	call	_glcd_write
  1337                           
  1338                           ;glcd.h: 358: glcd_write(0x7F);
  1339  0008A8  0E7F               	movlw	127
  1340  0008AA  EC78  F008         	call	_glcd_write
  1341                           
  1342                           ;glcd.h: 359: glcd_write(0x09);
  1343  0008AE  0E09               	movlw	9
  1344  0008B0  EC78  F008         	call	_glcd_write
  1345                           
  1346                           ;glcd.h: 360: glcd_write(0x09);
  1347  0008B4  0E09               	movlw	9
  1348  0008B6  EC78  F008         	call	_glcd_write
  1349                           
  1350                           ;glcd.h: 361: glcd_write(0x09);
  1351  0008BA  0E09               	movlw	9
  1352  0008BC  EC78  F008         	call	_glcd_write
  1353                           
  1354                           ;glcd.h: 362: glcd_write(0x06);
  1355  0008C0  0E06               	movlw	6
  1356  0008C2  EC78  F008         	call	_glcd_write
  1357                           
  1358                           ;glcd.h: 363: glcd_write(0x00);
  1359  0008C6  0E00               	movlw	0
  1360  0008C8  EC78  F008         	call	_glcd_write
  1361                           
  1362                           ;glcd.h: 364: break;
  1363  0008CC  0012               	return	
  1364  0008CE                     l943:
  1365                           
  1366                           ;glcd.h: 367: glcd_write(0x00);
  1367  0008CE  0E00               	movlw	0
  1368  0008D0  EC78  F008         	call	_glcd_write
  1369                           
  1370                           ;glcd.h: 368: glcd_write(0x1E);
  1371  0008D4  0E1E               	movlw	30
  1372  0008D6  EC78  F008         	call	_glcd_write
  1373                           
  1374                           ;glcd.h: 369: glcd_write(0x21);
  1375  0008DA  0E21               	movlw	33
  1376  0008DC  EC78  F008         	call	_glcd_write
  1377                           
  1378                           ;glcd.h: 370: glcd_write(0x21);
  1379  0008E0  0E21               	movlw	33
  1380  0008E2  EC78  F008         	call	_glcd_write
  1381                           
  1382                           ;glcd.h: 371: glcd_write(0x21);
  1383  0008E6  0E21               	movlw	33
  1384  0008E8  EC78  F008         	call	_glcd_write
  1385                           
  1386                           ;glcd.h: 372: glcd_write(0x5E);
  1387  0008EC  0E5E               	movlw	94
  1388  0008EE  EC78  F008         	call	_glcd_write
  1389                           
  1390                           ;glcd.h: 373: glcd_write(0x00);
  1391  0008F2  0E00               	movlw	0
  1392  0008F4  EC78  F008         	call	_glcd_write
  1393                           
  1394                           ;glcd.h: 374: break;
  1395  0008F8  0012               	return	
  1396  0008FA                     l945:
  1397                           
  1398                           ;glcd.h: 377: glcd_write(0x00);
  1399  0008FA  0E00               	movlw	0
  1400  0008FC  EC78  F008         	call	_glcd_write
  1401                           
  1402                           ;glcd.h: 378: glcd_write(0x7F);
  1403  000900  0E7F               	movlw	127
  1404  000902  EC78  F008         	call	_glcd_write
  1405                           
  1406                           ;glcd.h: 379: glcd_write(0x09);
  1407  000906  0E09               	movlw	9
  1408  000908  EC78  F008         	call	_glcd_write
  1409                           
  1410                           ;glcd.h: 380: glcd_write(0x09);
  1411  00090C  0E09               	movlw	9
  1412  00090E  EC78  F008         	call	_glcd_write
  1413                           
  1414                           ;glcd.h: 381: glcd_write(0x09);
  1415  000912  0E09               	movlw	9
  1416  000914  EC78  F008         	call	_glcd_write
  1417                           
  1418                           ;glcd.h: 382: glcd_write(0x76);
  1419  000918  0E76               	movlw	118
  1420  00091A  EC78  F008         	call	_glcd_write
  1421                           
  1422                           ;glcd.h: 383: glcd_write(0x00);
  1423  00091E  0E00               	movlw	0
  1424  000920  EC78  F008         	call	_glcd_write
  1425                           
  1426                           ;glcd.h: 384: break;
  1427  000924  0012               	return	
  1428  000926                     l947:
  1429                           
  1430                           ;glcd.h: 387: glcd_write(0x00);
  1431  000926  0E00               	movlw	0
  1432  000928  EC78  F008         	call	_glcd_write
  1433                           
  1434                           ;glcd.h: 388: glcd_write(0x26);
  1435  00092C  0E26               	movlw	38
  1436  00092E  EC78  F008         	call	_glcd_write
  1437                           
  1438                           ;glcd.h: 389: glcd_write(0x49);
  1439  000932  0E49               	movlw	73
  1440  000934  EC78  F008         	call	_glcd_write
  1441                           
  1442                           ;glcd.h: 390: glcd_write(0x49);
  1443  000938  0E49               	movlw	73
  1444  00093A  EC78  F008         	call	_glcd_write
  1445                           
  1446                           ;glcd.h: 391: glcd_write(0x49);
  1447  00093E  0E49               	movlw	73
  1448  000940  EC78  F008         	call	_glcd_write
  1449                           
  1450                           ;glcd.h: 392: glcd_write(0x32);
  1451  000944  0E32               	movlw	50
  1452  000946  EC78  F008         	call	_glcd_write
  1453                           
  1454                           ;glcd.h: 393: glcd_write(0x00);
  1455  00094A  0E00               	movlw	0
  1456  00094C  EC78  F008         	call	_glcd_write
  1457                           
  1458                           ;glcd.h: 394: break;
  1459  000950  0012               	return	
  1460  000952                     l949:
  1461                           
  1462                           ;glcd.h: 397: glcd_write(0x00);
  1463  000952  0E00               	movlw	0
  1464  000954  EC78  F008         	call	_glcd_write
  1465                           
  1466                           ;glcd.h: 398: glcd_write(0x01);
  1467  000958  0E01               	movlw	1
  1468  00095A  EC78  F008         	call	_glcd_write
  1469                           
  1470                           ;glcd.h: 399: glcd_write(0x01);
  1471  00095E  0E01               	movlw	1
  1472  000960  EC78  F008         	call	_glcd_write
  1473                           
  1474                           ;glcd.h: 400: glcd_write(0x7F);
  1475  000964  0E7F               	movlw	127
  1476  000966  EC78  F008         	call	_glcd_write
  1477                           
  1478                           ;glcd.h: 401: glcd_write(0x01);
  1479  00096A  0E01               	movlw	1
  1480  00096C  EC78  F008         	call	_glcd_write
  1481                           
  1482                           ;glcd.h: 402: glcd_write(0x01);
  1483  000970  0E01               	movlw	1
  1484  000972  EC78  F008         	call	_glcd_write
  1485                           
  1486                           ;glcd.h: 403: glcd_write(0x00);
  1487  000976  0E00               	movlw	0
  1488  000978  EC78  F008         	call	_glcd_write
  1489                           
  1490                           ;glcd.h: 404: break;
  1491  00097C  0012               	return	
  1492  00097E                     l951:
  1493                           
  1494                           ;glcd.h: 407: glcd_write(0x00);
  1495  00097E  0E00               	movlw	0
  1496  000980  EC78  F008         	call	_glcd_write
  1497                           
  1498                           ;glcd.h: 408: glcd_write(0x3F);
  1499  000984  0E3F               	movlw	63
  1500  000986  EC78  F008         	call	_glcd_write
  1501                           
  1502                           ;glcd.h: 409: glcd_write(0x40);
  1503  00098A  0E40               	movlw	64
  1504  00098C  EC78  F008         	call	_glcd_write
  1505                           
  1506                           ;glcd.h: 410: glcd_write(0x40);
  1507  000990  0E40               	movlw	64
  1508  000992  EC78  F008         	call	_glcd_write
  1509                           
  1510                           ;glcd.h: 411: glcd_write(0x40);
  1511  000996  0E40               	movlw	64
  1512  000998  EC78  F008         	call	_glcd_write
  1513                           
  1514                           ;glcd.h: 412: glcd_write(0x3F);
  1515  00099C  0E3F               	movlw	63
  1516  00099E  EC78  F008         	call	_glcd_write
  1517                           
  1518                           ;glcd.h: 413: glcd_write(0x00);
  1519  0009A2  0E00               	movlw	0
  1520  0009A4  EC78  F008         	call	_glcd_write
  1521                           
  1522                           ;glcd.h: 414: break;
  1523  0009A8  0012               	return	
  1524  0009AA                     l953:
  1525                           
  1526                           ;glcd.h: 417: glcd_write(0x00);
  1527  0009AA  0E00               	movlw	0
  1528  0009AC  EC78  F008         	call	_glcd_write
  1529                           
  1530                           ;glcd.h: 418: glcd_write(0x1F);
  1531  0009B0  0E1F               	movlw	31
  1532  0009B2  EC78  F008         	call	_glcd_write
  1533                           
  1534                           ;glcd.h: 419: glcd_write(0x20);
  1535  0009B6  0E20               	movlw	32
  1536  0009B8  EC78  F008         	call	_glcd_write
  1537                           
  1538                           ;glcd.h: 420: glcd_write(0x40);
  1539  0009BC  0E40               	movlw	64
  1540  0009BE  EC78  F008         	call	_glcd_write
  1541                           
  1542                           ;glcd.h: 421: glcd_write(0x20);
  1543  0009C2  0E20               	movlw	32
  1544  0009C4  EC78  F008         	call	_glcd_write
  1545                           
  1546                           ;glcd.h: 422: glcd_write(0x1F);
  1547  0009C8  0E1F               	movlw	31
  1548  0009CA  EC78  F008         	call	_glcd_write
  1549                           
  1550                           ;glcd.h: 423: glcd_write(0x00);
  1551  0009CE  0E00               	movlw	0
  1552  0009D0  EC78  F008         	call	_glcd_write
  1553                           
  1554                           ;glcd.h: 424: break;
  1555  0009D4  0012               	return	
  1556  0009D6                     l955:
  1557                           
  1558                           ;glcd.h: 427: glcd_write(0x00);
  1559  0009D6  0E00               	movlw	0
  1560  0009D8  EC78  F008         	call	_glcd_write
  1561                           
  1562                           ;glcd.h: 428: glcd_write(0x7F);
  1563  0009DC  0E7F               	movlw	127
  1564  0009DE  EC78  F008         	call	_glcd_write
  1565                           
  1566                           ;glcd.h: 429: glcd_write(0x20);
  1567  0009E2  0E20               	movlw	32
  1568  0009E4  EC78  F008         	call	_glcd_write
  1569                           
  1570                           ;glcd.h: 430: glcd_write(0x10);
  1571  0009E8  0E10               	movlw	16
  1572  0009EA  EC78  F008         	call	_glcd_write
  1573                           
  1574                           ;glcd.h: 431: glcd_write(0x20);
  1575  0009EE  0E20               	movlw	32
  1576  0009F0  EC78  F008         	call	_glcd_write
  1577                           
  1578                           ;glcd.h: 432: glcd_write(0x7F);
  1579  0009F4  0E7F               	movlw	127
  1580  0009F6  EC78  F008         	call	_glcd_write
  1581                           
  1582                           ;glcd.h: 433: glcd_write(0x00);
  1583  0009FA  0E00               	movlw	0
  1584  0009FC  EC78  F008         	call	_glcd_write
  1585                           
  1586                           ;glcd.h: 434: break;
  1587  000A00  0012               	return	
  1588  000A02                     l957:
  1589                           
  1590                           ;glcd.h: 437: glcd_write(0x00);
  1591  000A02  0E00               	movlw	0
  1592  000A04  EC78  F008         	call	_glcd_write
  1593                           
  1594                           ;glcd.h: 438: glcd_write(0x41);
  1595  000A08  0E41               	movlw	65
  1596  000A0A  EC78  F008         	call	_glcd_write
  1597                           
  1598                           ;glcd.h: 439: glcd_write(0x22);
  1599  000A0E  0E22               	movlw	34
  1600  000A10  EC78  F008         	call	_glcd_write
  1601                           
  1602                           ;glcd.h: 440: glcd_write(0x1C);
  1603  000A14  0E1C               	movlw	28
  1604  000A16  EC78  F008         	call	_glcd_write
  1605                           
  1606                           ;glcd.h: 441: glcd_write(0x22);
  1607  000A1A  0E22               	movlw	34
  1608  000A1C  EC78  F008         	call	_glcd_write
  1609                           
  1610                           ;glcd.h: 442: glcd_write(0x41);
  1611  000A20  0E41               	movlw	65
  1612  000A22  EC78  F008         	call	_glcd_write
  1613                           
  1614                           ;glcd.h: 443: glcd_write(0x00);
  1615  000A26  0E00               	movlw	0
  1616  000A28  EC78  F008         	call	_glcd_write
  1617                           
  1618                           ;glcd.h: 444: break;
  1619  000A2C  0012               	return	
  1620  000A2E                     l959:
  1621                           
  1622                           ;glcd.h: 447: glcd_write(0x00);
  1623  000A2E  0E00               	movlw	0
  1624  000A30  EC78  F008         	call	_glcd_write
  1625                           
  1626                           ;glcd.h: 448: glcd_write(0x07);
  1627  000A34  0E07               	movlw	7
  1628  000A36  EC78  F008         	call	_glcd_write
  1629                           
  1630                           ;glcd.h: 449: glcd_write(0x08);
  1631  000A3A  0E08               	movlw	8
  1632  000A3C  EC78  F008         	call	_glcd_write
  1633                           
  1634                           ;glcd.h: 450: glcd_write(0x70);
  1635  000A40  0E70               	movlw	112
  1636  000A42  EC78  F008         	call	_glcd_write
  1637                           
  1638                           ;glcd.h: 451: glcd_write(0x08);
  1639  000A46  0E08               	movlw	8
  1640  000A48  EC78  F008         	call	_glcd_write
  1641                           
  1642                           ;glcd.h: 452: glcd_write(0x07);
  1643  000A4C  0E07               	movlw	7
  1644  000A4E  EC78  F008         	call	_glcd_write
  1645                           
  1646                           ;glcd.h: 453: glcd_write(0x00);
  1647  000A52  0E00               	movlw	0
  1648  000A54  EC78  F008         	call	_glcd_write
  1649                           
  1650                           ;glcd.h: 454: break;
  1651  000A58  0012               	return	
  1652  000A5A                     l961:
  1653                           
  1654                           ;glcd.h: 457: glcd_write(0x00);
  1655  000A5A  0E00               	movlw	0
  1656  000A5C  EC78  F008         	call	_glcd_write
  1657                           
  1658                           ;glcd.h: 458: glcd_write(0x61);
  1659  000A60  0E61               	movlw	97
  1660  000A62  EC78  F008         	call	_glcd_write
  1661                           
  1662                           ;glcd.h: 459: glcd_write(0x51);
  1663  000A66  0E51               	movlw	81
  1664  000A68  EC78  F008         	call	_glcd_write
  1665                           
  1666                           ;glcd.h: 460: glcd_write(0x49);
  1667  000A6C  0E49               	movlw	73
  1668  000A6E  EC78  F008         	call	_glcd_write
  1669                           
  1670                           ;glcd.h: 461: glcd_write(0x45);
  1671  000A72  0E45               	movlw	69
  1672  000A74  EC78  F008         	call	_glcd_write
  1673                           
  1674                           ;glcd.h: 462: glcd_write(0x43);
  1675  000A78  0E43               	movlw	67
  1676  000A7A  EC78  F008         	call	_glcd_write
  1677                           
  1678                           ;glcd.h: 463: glcd_write(0x00);
  1679  000A7E  0E00               	movlw	0
  1680  000A80  EC78  F008         	call	_glcd_write
  1681                           
  1682                           ;glcd.h: 464: break;
  1683  000A84  0012               	return	
  1684  000A86                     l963:
  1685                           
  1686                           ;glcd.h: 467: glcd_write(0x00);
  1687  000A86  0E00               	movlw	0
  1688  000A88  EC78  F008         	call	_glcd_write
  1689                           
  1690                           ;glcd.h: 468: glcd_write(0x3E);
  1691  000A8C  0E3E               	movlw	62
  1692  000A8E  EC78  F008         	call	_glcd_write
  1693                           
  1694                           ;glcd.h: 469: glcd_write(0x51);
  1695  000A92  0E51               	movlw	81
  1696  000A94  EC78  F008         	call	_glcd_write
  1697                           
  1698                           ;glcd.h: 470: glcd_write(0x49);
  1699  000A98  0E49               	movlw	73
  1700  000A9A  EC78  F008         	call	_glcd_write
  1701                           
  1702                           ;glcd.h: 471: glcd_write(0x45);
  1703  000A9E  0E45               	movlw	69
  1704  000AA0  EC78  F008         	call	_glcd_write
  1705                           
  1706                           ;glcd.h: 472: glcd_write(0x3E);
  1707  000AA4  0E3E               	movlw	62
  1708  000AA6  EC78  F008         	call	_glcd_write
  1709                           
  1710                           ;glcd.h: 473: glcd_write(0x00);
  1711  000AAA  0E00               	movlw	0
  1712  000AAC  EC78  F008         	call	_glcd_write
  1713                           
  1714                           ;glcd.h: 474: break;
  1715  000AB0  0012               	return	
  1716  000AB2                     l965:
  1717                           
  1718                           ;glcd.h: 477: glcd_write(0x00);
  1719  000AB2  0E00               	movlw	0
  1720  000AB4  EC78  F008         	call	_glcd_write
  1721                           
  1722                           ;glcd.h: 478: glcd_write(0x04);
  1723  000AB8  0E04               	movlw	4
  1724  000ABA  EC78  F008         	call	_glcd_write
  1725                           
  1726                           ;glcd.h: 479: glcd_write(0x02);
  1727  000ABE  0E02               	movlw	2
  1728  000AC0  EC78  F008         	call	_glcd_write
  1729                           
  1730                           ;glcd.h: 480: glcd_write(0x7F);
  1731  000AC4  0E7F               	movlw	127
  1732  000AC6  EC78  F008         	call	_glcd_write
  1733                           
  1734                           ;glcd.h: 481: glcd_write(0x00);
  1735  000ACA  0E00               	movlw	0
  1736  000ACC  EC78  F008         	call	_glcd_write
  1737                           
  1738                           ;glcd.h: 482: glcd_write(0x00);
  1739  000AD0  0E00               	movlw	0
  1740  000AD2  EC78  F008         	call	_glcd_write
  1741                           
  1742                           ;glcd.h: 483: glcd_write(0x00);
  1743  000AD6  0E00               	movlw	0
  1744  000AD8  EC78  F008         	call	_glcd_write
  1745                           
  1746                           ;glcd.h: 484: break;
  1747  000ADC  0012               	return	
  1748  000ADE                     l967:
  1749                           
  1750                           ;glcd.h: 487: glcd_write(0x00);
  1751  000ADE  0E00               	movlw	0
  1752  000AE0  EC78  F008         	call	_glcd_write
  1753                           
  1754                           ;glcd.h: 488: glcd_write(0x42);
  1755  000AE4  0E42               	movlw	66
  1756  000AE6  EC78  F008         	call	_glcd_write
  1757                           
  1758                           ;glcd.h: 489: glcd_write(0x61);
  1759  000AEA  0E61               	movlw	97
  1760  000AEC  EC78  F008         	call	_glcd_write
  1761                           
  1762                           ;glcd.h: 490: glcd_write(0x51);
  1763  000AF0  0E51               	movlw	81
  1764  000AF2  EC78  F008         	call	_glcd_write
  1765                           
  1766                           ;glcd.h: 491: glcd_write(0x49);
  1767  000AF6  0E49               	movlw	73
  1768  000AF8  EC78  F008         	call	_glcd_write
  1769                           
  1770                           ;glcd.h: 492: glcd_write(0x46);
  1771  000AFC  0E46               	movlw	70
  1772  000AFE  EC78  F008         	call	_glcd_write
  1773                           
  1774                           ;glcd.h: 493: glcd_write(0x00);
  1775  000B02  0E00               	movlw	0
  1776  000B04  EC78  F008         	call	_glcd_write
  1777                           
  1778                           ;glcd.h: 494: break;
  1779  000B08  0012               	return	
  1780  000B0A                     l969:
  1781                           
  1782                           ;glcd.h: 497: glcd_write(0x00);
  1783  000B0A  0E00               	movlw	0
  1784  000B0C  EC78  F008         	call	_glcd_write
  1785                           
  1786                           ;glcd.h: 498: glcd_write(0x22);
  1787  000B10  0E22               	movlw	34
  1788  000B12  EC78  F008         	call	_glcd_write
  1789                           
  1790                           ;glcd.h: 499: glcd_write(0x41);
  1791  000B16  0E41               	movlw	65
  1792  000B18  EC78  F008         	call	_glcd_write
  1793                           
  1794                           ;glcd.h: 500: glcd_write(0x49);
  1795  000B1C  0E49               	movlw	73
  1796  000B1E  EC78  F008         	call	_glcd_write
  1797                           
  1798                           ;glcd.h: 501: glcd_write(0x49);
  1799  000B22  0E49               	movlw	73
  1800  000B24  EC78  F008         	call	_glcd_write
  1801                           
  1802                           ;glcd.h: 502: glcd_write(0x36);
  1803  000B28  0E36               	movlw	54
  1804  000B2A  EC78  F008         	call	_glcd_write
  1805                           
  1806                           ;glcd.h: 503: glcd_write(0x00);
  1807  000B2E  0E00               	movlw	0
  1808  000B30  EC78  F008         	call	_glcd_write
  1809                           
  1810                           ;glcd.h: 504: break;
  1811  000B34  0012               	return	
  1812  000B36                     l971:
  1813                           
  1814                           ;glcd.h: 507: glcd_write(0x00);
  1815  000B36  0E00               	movlw	0
  1816  000B38  EC78  F008         	call	_glcd_write
  1817                           
  1818                           ;glcd.h: 508: glcd_write(0x18);
  1819  000B3C  0E18               	movlw	24
  1820  000B3E  EC78  F008         	call	_glcd_write
  1821                           
  1822                           ;glcd.h: 509: glcd_write(0x14);
  1823  000B42  0E14               	movlw	20
  1824  000B44  EC78  F008         	call	_glcd_write
  1825                           
  1826                           ;glcd.h: 510: glcd_write(0x12);
  1827  000B48  0E12               	movlw	18
  1828  000B4A  EC78  F008         	call	_glcd_write
  1829                           
  1830                           ;glcd.h: 511: glcd_write(0x7F);
  1831  000B4E  0E7F               	movlw	127
  1832  000B50  EC78  F008         	call	_glcd_write
  1833                           
  1834                           ;glcd.h: 512: glcd_write(0x10);
  1835  000B54  0E10               	movlw	16
  1836  000B56  EC78  F008         	call	_glcd_write
  1837                           
  1838                           ;glcd.h: 513: glcd_write(0x00);
  1839  000B5A  0E00               	movlw	0
  1840  000B5C  EC78  F008         	call	_glcd_write
  1841                           
  1842                           ;glcd.h: 514: break;
  1843  000B60  0012               	return	
  1844  000B62                     l973:
  1845                           
  1846                           ;glcd.h: 517: glcd_write(0x00);
  1847  000B62  0E00               	movlw	0
  1848  000B64  EC78  F008         	call	_glcd_write
  1849                           
  1850                           ;glcd.h: 518: glcd_write(0x27);
  1851  000B68  0E27               	movlw	39
  1852  000B6A  EC78  F008         	call	_glcd_write
  1853                           
  1854                           ;glcd.h: 519: glcd_write(0x45);
  1855  000B6E  0E45               	movlw	69
  1856  000B70  EC78  F008         	call	_glcd_write
  1857                           
  1858                           ;glcd.h: 520: glcd_write(0x45);
  1859  000B74  0E45               	movlw	69
  1860  000B76  EC78  F008         	call	_glcd_write
  1861                           
  1862                           ;glcd.h: 521: glcd_write(0x45);
  1863  000B7A  0E45               	movlw	69
  1864  000B7C  EC78  F008         	call	_glcd_write
  1865                           
  1866                           ;glcd.h: 522: glcd_write(0x39);
  1867  000B80  0E39               	movlw	57
  1868  000B82  EC78  F008         	call	_glcd_write
  1869                           
  1870                           ;glcd.h: 523: glcd_write(0x00);
  1871  000B86  0E00               	movlw	0
  1872  000B88  EC78  F008         	call	_glcd_write
  1873                           
  1874                           ;glcd.h: 524: break;
  1875  000B8C  0012               	return	
  1876  000B8E                     l975:
  1877                           
  1878                           ;glcd.h: 527: glcd_write(0x00);
  1879  000B8E  0E00               	movlw	0
  1880  000B90  EC78  F008         	call	_glcd_write
  1881                           
  1882                           ;glcd.h: 528: glcd_write(0x3E);
  1883  000B94  0E3E               	movlw	62
  1884  000B96  EC78  F008         	call	_glcd_write
  1885                           
  1886                           ;glcd.h: 529: glcd_write(0x49);
  1887  000B9A  0E49               	movlw	73
  1888  000B9C  EC78  F008         	call	_glcd_write
  1889                           
  1890                           ;glcd.h: 530: glcd_write(0x49);
  1891  000BA0  0E49               	movlw	73
  1892  000BA2  EC78  F008         	call	_glcd_write
  1893                           
  1894                           ;glcd.h: 531: glcd_write(0x49);
  1895  000BA6  0E49               	movlw	73
  1896  000BA8  EC78  F008         	call	_glcd_write
  1897                           
  1898                           ;glcd.h: 532: glcd_write(0x32);
  1899  000BAC  0E32               	movlw	50
  1900  000BAE  EC78  F008         	call	_glcd_write
  1901                           
  1902                           ;glcd.h: 533: glcd_write(0x00);
  1903  000BB2  0E00               	movlw	0
  1904  000BB4  EC78  F008         	call	_glcd_write
  1905                           
  1906                           ;glcd.h: 534: break;
  1907  000BB8  0012               	return	
  1908  000BBA                     l977:
  1909                           
  1910                           ;glcd.h: 537: glcd_write(0x00);
  1911  000BBA  0E00               	movlw	0
  1912  000BBC  EC78  F008         	call	_glcd_write
  1913                           
  1914                           ;glcd.h: 538: glcd_write(0x01);
  1915  000BC0  0E01               	movlw	1
  1916  000BC2  EC78  F008         	call	_glcd_write
  1917                           
  1918                           ;glcd.h: 539: glcd_write(0x01);
  1919  000BC6  0E01               	movlw	1
  1920  000BC8  EC78  F008         	call	_glcd_write
  1921                           
  1922                           ;glcd.h: 540: glcd_write(0x71);
  1923  000BCC  0E71               	movlw	113
  1924  000BCE  EC78  F008         	call	_glcd_write
  1925                           
  1926                           ;glcd.h: 541: glcd_write(0x09);
  1927  000BD2  0E09               	movlw	9
  1928  000BD4  EC78  F008         	call	_glcd_write
  1929                           
  1930                           ;glcd.h: 542: glcd_write(0x07);
  1931  000BD8  0E07               	movlw	7
  1932  000BDA  EC78  F008         	call	_glcd_write
  1933                           
  1934                           ;glcd.h: 543: glcd_write(0x00);
  1935  000BDE  0E00               	movlw	0
  1936  000BE0  EC78  F008         	call	_glcd_write
  1937                           
  1938                           ;glcd.h: 544: break;
  1939  000BE4  0012               	return	
  1940  000BE6                     l979:
  1941                           
  1942                           ;glcd.h: 547: glcd_write(0x00);
  1943  000BE6  0E00               	movlw	0
  1944  000BE8  EC78  F008         	call	_glcd_write
  1945                           
  1946                           ;glcd.h: 548: glcd_write(0x36);
  1947  000BEC  0E36               	movlw	54
  1948  000BEE  EC78  F008         	call	_glcd_write
  1949                           
  1950                           ;glcd.h: 549: glcd_write(0x49);
  1951  000BF2  0E49               	movlw	73
  1952  000BF4  EC78  F008         	call	_glcd_write
  1953                           
  1954                           ;glcd.h: 550: glcd_write(0x49);
  1955  000BF8  0E49               	movlw	73
  1956  000BFA  EC78  F008         	call	_glcd_write
  1957                           
  1958                           ;glcd.h: 551: glcd_write(0x49);
  1959  000BFE  0E49               	movlw	73
  1960  000C00  EC78  F008         	call	_glcd_write
  1961                           
  1962                           ;glcd.h: 552: glcd_write(0x36);
  1963  000C04  0E36               	movlw	54
  1964  000C06  EC78  F008         	call	_glcd_write
  1965                           
  1966                           ;glcd.h: 553: glcd_write(0x00);
  1967  000C0A  0E00               	movlw	0
  1968  000C0C  EC78  F008         	call	_glcd_write
  1969                           
  1970                           ;glcd.h: 554: break;
  1971  000C10  0012               	return	
  1972  000C12                     l981:
  1973                           
  1974                           ;glcd.h: 557: glcd_write(0x00);
  1975  000C12  0E00               	movlw	0
  1976  000C14  EC78  F008         	call	_glcd_write
  1977                           
  1978                           ;glcd.h: 558: glcd_write(0x26);
  1979  000C18  0E26               	movlw	38
  1980  000C1A  EC78  F008         	call	_glcd_write
  1981                           
  1982                           ;glcd.h: 559: glcd_write(0x49);
  1983  000C1E  0E49               	movlw	73
  1984  000C20  EC78  F008         	call	_glcd_write
  1985                           
  1986                           ;glcd.h: 560: glcd_write(0x49);
  1987  000C24  0E49               	movlw	73
  1988  000C26  EC78  F008         	call	_glcd_write
  1989                           
  1990                           ;glcd.h: 561: glcd_write(0x49);
  1991  000C2A  0E49               	movlw	73
  1992  000C2C  EC78  F008         	call	_glcd_write
  1993                           
  1994                           ;glcd.h: 562: glcd_write(0x3E);
  1995  000C30  0E3E               	movlw	62
  1996  000C32  EC78  F008         	call	_glcd_write
  1997                           
  1998                           ;glcd.h: 563: glcd_write(0x00);
  1999  000C36  0E00               	movlw	0
  2000  000C38  EC78  F008         	call	_glcd_write
  2001                           
  2002                           ;glcd.h: 564: break;
  2003  000C3C  0012               	return	
  2004  000C3E                     l983:
  2005                           
  2006                           ;glcd.h: 567: glcd_write(0x00);
  2007  000C3E  0E00               	movlw	0
  2008  000C40  EC78  F008         	call	_glcd_write
  2009                           
  2010                           ;glcd.h: 568: glcd_write(0x00);
  2011  000C44  0E00               	movlw	0
  2012  000C46  EC78  F008         	call	_glcd_write
  2013                           
  2014                           ;glcd.h: 569: glcd_write(0x00);
  2015  000C4A  0E00               	movlw	0
  2016  000C4C  EC78  F008         	call	_glcd_write
  2017                           
  2018                           ;glcd.h: 570: glcd_write(0x00);
  2019  000C50  0E00               	movlw	0
  2020  000C52  EC78  F008         	call	_glcd_write
  2021                           
  2022                           ;glcd.h: 571: glcd_write(0x00);
  2023  000C56  0E00               	movlw	0
  2024  000C58  EC78  F008         	call	_glcd_write
  2025                           
  2026                           ;glcd.h: 572: break;
  2027  000C5C  0012               	return	
  2028  000C5E                     l985:
  2029                           
  2030                           ;glcd.h: 575: glcd_write(0xFF);
  2031  000C5E  0EFF               	movlw	255
  2032  000C60  EC78  F008         	call	_glcd_write
  2033                           
  2034                           ;glcd.h: 576: glcd_write(0xFF);
  2035  000C64  0EFF               	movlw	255
  2036  000C66  EC78  F008         	call	_glcd_write
  2037                           
  2038                           ;glcd.h: 577: glcd_write(0xFF);
  2039  000C6A  0EFF               	movlw	255
  2040  000C6C  EC78  F008         	call	_glcd_write
  2041                           
  2042                           ;glcd.h: 578: glcd_write(0xFF);
  2043  000C70  0EFF               	movlw	255
  2044  000C72  EC78  F008         	call	_glcd_write
  2045                           
  2046                           ;glcd.h: 579: glcd_write(0xFF);
  2047  000C76  0EFF               	movlw	255
  2048  000C78  EC78  F008         	call	_glcd_write
  2049                           
  2050                           ;glcd.h: 580: break;
  2051  000C7C  0012               	return	
  2052  000C7E                     l987:
  2053                           
  2054                           ;glcd.h: 583: glcd_write(0xFF);
  2055  000C7E  0EFF               	movlw	255
  2056  000C80  EC78  F008         	call	_glcd_write
  2057                           
  2058                           ;glcd.h: 584: break;
  2059  000C84  0012               	return	
  2060  000C86                     l989:
  2061                           
  2062                           ;glcd.h: 587: glcd_write(0x00);
  2063  000C86  0E00               	movlw	0
  2064  000C88  EC78  F008         	call	_glcd_write
  2065                           
  2066                           ;glcd.h: 588: glcd_write(0x0C);
  2067  000C8C  0E0C               	movlw	12
  2068  000C8E  EC78  F008         	call	_glcd_write
  2069                           
  2070                           ;glcd.h: 589: glcd_write(0x12);
  2071  000C92  0E12               	movlw	18
  2072  000C94  EC78  F008         	call	_glcd_write
  2073                           
  2074                           ;glcd.h: 590: glcd_write(0x12);
  2075  000C98  0E12               	movlw	18
  2076  000C9A  EC78  F008         	call	_glcd_write
  2077                           
  2078                           ;glcd.h: 591: glcd_write(0x0C);
  2079  000C9E  0E0C               	movlw	12
  2080  000CA0  EC78  F008         	call	_glcd_write
  2081                           
  2082                           ;glcd.h: 592: glcd_write(0x00);
  2083  000CA4  0E00               	movlw	0
  2084  000CA6  EC78  F008         	call	_glcd_write
  2085                           
  2086                           ;glcd.h: 598: }
  2087                           
  2088                           ;glcd.h: 597: break;
  2089                           
  2090                           ;glcd.h: 596: default:
  2091                           
  2092                           ;glcd.h: 593: break;
  2093  000CAA  0012               	return	
  2094  000CAC                     l993:
  2095  000CAC  5002               	movf	glcd_text@text,w,c
  2096                           
  2097                           ; Switch size 1, requested type "space"
  2098                           ; Number of cases is 40, Range of values is 20 to 124
  2099                           ; switch strategies available:
  2100                           ; Name         Instructions Cycles
  2101                           ; simple_byte          121    61 (average)
  2102                           ;	Chosen strategy is simple_byte
  2103  000CAE  0A14               	xorlw	20	; case 20
  2104  000CB0  B4D8               	btfsc	status,2,c
  2105  000CB2  D7E5               	goto	l987
  2106  000CB4  0A34               	xorlw	52	; case 32
  2107  000CB6  B4D8               	btfsc	status,2,c
  2108  000CB8  D7C2               	goto	l983
  2109  000CBA  0A0A               	xorlw	10	; case 42
  2110  000CBC  B4D8               	btfsc	status,2,c
  2111  000CBE  D7E3               	goto	l989
  2112  000CC0  0A1A               	xorlw	26	; case 48
  2113  000CC2  B4D8               	btfsc	status,2,c
  2114  000CC4  D6E0               	goto	l963
  2115  000CC6  0A01               	xorlw	1	; case 49
  2116  000CC8  B4D8               	btfsc	status,2,c
  2117  000CCA  D6F3               	goto	l965
  2118  000CCC  0A03               	xorlw	3	; case 50
  2119  000CCE  B4D8               	btfsc	status,2,c
  2120  000CD0  D706               	goto	l967
  2121  000CD2  0A01               	xorlw	1	; case 51
  2122  000CD4  B4D8               	btfsc	status,2,c
  2123  000CD6  D719               	goto	l969
  2124  000CD8  0A07               	xorlw	7	; case 52
  2125  000CDA  B4D8               	btfsc	status,2,c
  2126  000CDC  D72C               	goto	l971
  2127  000CDE  0A01               	xorlw	1	; case 53
  2128  000CE0  B4D8               	btfsc	status,2,c
  2129  000CE2  D73F               	goto	l973
  2130  000CE4  0A03               	xorlw	3	; case 54
  2131  000CE6  B4D8               	btfsc	status,2,c
  2132  000CE8  D752               	goto	l975
  2133  000CEA  0A01               	xorlw	1	; case 55
  2134  000CEC  B4D8               	btfsc	status,2,c
  2135  000CEE  D765               	goto	l977
  2136  000CF0  0A0F               	xorlw	15	; case 56
  2137  000CF2  B4D8               	btfsc	status,2,c
  2138  000CF4  D778               	goto	l979
  2139  000CF6  0A01               	xorlw	1	; case 57
  2140  000CF8  B4D8               	btfsc	status,2,c
  2141  000CFA  D78B               	goto	l981
  2142  000CFC  0A78               	xorlw	120	; case 65
  2143  000CFE  B4D8               	btfsc	status,2,c
  2144  000D00  D486               	goto	l911
  2145  000D02  0A03               	xorlw	3	; case 66
  2146  000D04  B4D8               	btfsc	status,2,c
  2147  000D06  D499               	goto	l913
  2148  000D08  0A01               	xorlw	1	; case 67
  2149  000D0A  B4D8               	btfsc	status,2,c
  2150  000D0C  D4AC               	goto	l915
  2151  000D0E  0A07               	xorlw	7	; case 68
  2152  000D10  B4D8               	btfsc	status,2,c
  2153  000D12  D4BF               	goto	l917
  2154  000D14  0A01               	xorlw	1	; case 69
  2155  000D16  B4D8               	btfsc	status,2,c
  2156  000D18  D4D2               	goto	l919
  2157  000D1A  0A03               	xorlw	3	; case 70
  2158  000D1C  B4D8               	btfsc	status,2,c
  2159  000D1E  D4E5               	goto	l921
  2160  000D20  0A01               	xorlw	1	; case 71
  2161  000D22  B4D8               	btfsc	status,2,c
  2162  000D24  D4F8               	goto	l923
  2163  000D26  0A0F               	xorlw	15	; case 72
  2164  000D28  B4D8               	btfsc	status,2,c
  2165  000D2A  D50B               	goto	l925
  2166  000D2C  0A01               	xorlw	1	; case 73
  2167  000D2E  B4D8               	btfsc	status,2,c
  2168  000D30  D51E               	goto	l927
  2169  000D32  0A03               	xorlw	3	; case 74
  2170  000D34  B4D8               	btfsc	status,2,c
  2171  000D36  D531               	goto	l929
  2172  000D38  0A01               	xorlw	1	; case 75
  2173  000D3A  B4D8               	btfsc	status,2,c
  2174  000D3C  D544               	goto	l931
  2175  000D3E  0A07               	xorlw	7	; case 76
  2176  000D40  B4D8               	btfsc	status,2,c
  2177  000D42  D557               	goto	l933
  2178  000D44  0A01               	xorlw	1	; case 77
  2179  000D46  B4D8               	btfsc	status,2,c
  2180  000D48  D56A               	goto	l935
  2181  000D4A  0A03               	xorlw	3	; case 78
  2182  000D4C  B4D8               	btfsc	status,2,c
  2183  000D4E  D57D               	goto	l937
  2184  000D50  0A01               	xorlw	1	; case 79
  2185  000D52  B4D8               	btfsc	status,2,c
  2186  000D54  D590               	goto	l939
  2187  000D56  0A1F               	xorlw	31	; case 80
  2188  000D58  B4D8               	btfsc	status,2,c
  2189  000D5A  D5A3               	goto	l941
  2190  000D5C  0A01               	xorlw	1	; case 81
  2191  000D5E  B4D8               	btfsc	status,2,c
  2192  000D60  D5B6               	goto	l943
  2193  000D62  0A03               	xorlw	3	; case 82
  2194  000D64  B4D8               	btfsc	status,2,c
  2195  000D66  D5C9               	goto	l945
  2196  000D68  0A01               	xorlw	1	; case 83
  2197  000D6A  B4D8               	btfsc	status,2,c
  2198  000D6C  D5DC               	goto	l947
  2199  000D6E  0A07               	xorlw	7	; case 84
  2200  000D70  B4D8               	btfsc	status,2,c
  2201  000D72  D5EF               	goto	l949
  2202  000D74  0A01               	xorlw	1	; case 85
  2203  000D76  B4D8               	btfsc	status,2,c
  2204  000D78  D602               	goto	l951
  2205  000D7A  0A03               	xorlw	3	; case 86
  2206  000D7C  B4D8               	btfsc	status,2,c
  2207  000D7E  D615               	goto	l953
  2208  000D80  0A01               	xorlw	1	; case 87
  2209  000D82  B4D8               	btfsc	status,2,c
  2210  000D84  D628               	goto	l955
  2211  000D86  0A0F               	xorlw	15	; case 88
  2212  000D88  B4D8               	btfsc	status,2,c
  2213  000D8A  D63B               	goto	l957
  2214  000D8C  0A01               	xorlw	1	; case 89
  2215  000D8E  B4D8               	btfsc	status,2,c
  2216  000D90  D64E               	goto	l959
  2217  000D92  0A03               	xorlw	3	; case 90
  2218  000D94  B4D8               	btfsc	status,2,c
  2219  000D96  D661               	goto	l961
  2220  000D98  0A26               	xorlw	38	; case 124
  2221  000D9A  A4D8               	btfss	status,2,c
  2222  000D9C  0012               	return	
  2223  000D9E  D75F               	goto	l985
  2224  000DA0                     __end_of_glcd_text:
  2225                           	opt stack 0
  2226                           tblptru	equ	0xFF8
  2227                           tblptrh	equ	0xFF7
  2228                           tblptrl	equ	0xFF6
  2229                           tablat	equ	0xFF5
  2230                           prodh	equ	0xFF4
  2231                           prodl	equ	0xFF3
  2232                           wreg	equ	0xFE8
  2233                           indf2	equ	0xFDF
  2234                           fsr2h	equ	0xFDA
  2235                           fsr2l	equ	0xFD9
  2236                           status	equ	0xFD8
  2237                           
  2238 ;; *************** function ___lwmod *****************
  2239 ;; Defined at:
  2240 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  2241 ;; Parameters:    Size  Location     Type
  2242 ;;  dividend        2    0[COMRAM] unsigned int 
  2243 ;;  divisor         2    2[COMRAM] unsigned int 
  2244 ;; Auto vars:     Size  Location     Type
  2245 ;;  counter         1    4[COMRAM] unsigned char 
  2246 ;; Return value:  Size  Location     Type
  2247 ;;                  2    0[COMRAM] unsigned int 
  2248 ;; Registers used:
  2249 ;;		wreg, status,2, status,0
  2250 ;; Tracked objects:
  2251 ;;		On entry : 0/0
  2252 ;;		On exit  : 0/0
  2253 ;;		Unchanged: 0/0
  2254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2255 ;;      Params:         4       0       0       0       0       0       0
  2256 ;;      Locals:         1       0       0       0       0       0       0
  2257 ;;      Temps:          0       0       0       0       0       0       0
  2258 ;;      Totals:         5       0       0       0       0       0       0
  2259 ;;Total ram usage:        5 bytes
  2260 ;; Hardware stack levels used:    1
  2261 ;; This function calls:
  2262 ;;		Nothing
  2263 ;; This function is called by:
  2264 ;;		_glcd_num
  2265 ;; This function uses a non-reentrant model
  2266 ;;
  2267                           
  2268                           	psect	text6
  2269  000FDC                     __ptext6:
  2270                           	opt stack 0
  2271  000FDC                     ___lwmod:
  2272                           	opt stack 29
  2273                           
  2274                           ;incstack = 0
  2275  000FDC  5003               	movf	___lwmod@divisor,w,c
  2276  000FDE  1004               	iorwf	___lwmod@divisor+1,w,c
  2277  000FE0  B4D8               	btfsc	status,2,c
  2278  000FE2  D018               	goto	l608
  2279  000FE4  0E01               	movlw	1
  2280  000FE6  6E05               	movwf	___lwmod@counter,c
  2281  000FE8  D004               	goto	l1331
  2282  000FEA                     l1329:
  2283  000FEA  90D8               	bcf	status,0,c
  2284  000FEC  3603               	rlcf	___lwmod@divisor,f,c
  2285  000FEE  3604               	rlcf	___lwmod@divisor+1,f,c
  2286  000FF0  2A05               	incf	___lwmod@counter,f,c
  2287  000FF2                     l1331:
  2288  000FF2  AE04               	btfss	___lwmod@divisor+1,7,c
  2289  000FF4  D7FA               	goto	l1329
  2290  000FF6                     l1333:
  2291  000FF6  5003               	movf	___lwmod@divisor,w,c
  2292  000FF8  5C01               	subwf	___lwmod@dividend,w,c
  2293  000FFA  5004               	movf	___lwmod@divisor+1,w,c
  2294  000FFC  5802               	subwfb	___lwmod@dividend+1,w,c
  2295  000FFE  A0D8               	btfss	status,0,c
  2296  001000  D004               	goto	l1337
  2297  001002  5003               	movf	___lwmod@divisor,w,c
  2298  001004  5E01               	subwf	___lwmod@dividend,f,c
  2299  001006  5004               	movf	___lwmod@divisor+1,w,c
  2300  001008  5A02               	subwfb	___lwmod@dividend+1,f,c
  2301  00100A                     l1337:
  2302  00100A  90D8               	bcf	status,0,c
  2303  00100C  3204               	rrcf	___lwmod@divisor+1,f,c
  2304  00100E  3203               	rrcf	___lwmod@divisor,f,c
  2305  001010  2E05               	decfsz	___lwmod@counter,f,c
  2306  001012  D7F1               	goto	l1333
  2307  001014                     l608:
  2308  001014  C001  F001         	movff	___lwmod@dividend,?___lwmod
  2309  001018  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  2310  00101C  0012               	return		;funcret
  2311  00101E                     __end_of___lwmod:
  2312                           	opt stack 0
  2313                           tblptru	equ	0xFF8
  2314                           tblptrh	equ	0xFF7
  2315                           tblptrl	equ	0xFF6
  2316                           tablat	equ	0xFF5
  2317                           prodh	equ	0xFF4
  2318                           prodl	equ	0xFF3
  2319                           wreg	equ	0xFE8
  2320                           indf2	equ	0xFDF
  2321                           fsr2h	equ	0xFDA
  2322                           fsr2l	equ	0xFD9
  2323                           status	equ	0xFD8
  2324                           
  2325 ;; *************** function ___lwdiv *****************
  2326 ;; Defined at:
  2327 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  2328 ;; Parameters:    Size  Location     Type
  2329 ;;  dividend        2    0[COMRAM] unsigned int 
  2330 ;;  divisor         2    2[COMRAM] unsigned int 
  2331 ;; Auto vars:     Size  Location     Type
  2332 ;;  quotient        2    4[COMRAM] unsigned int 
  2333 ;;  counter         1    6[COMRAM] unsigned char 
  2334 ;; Return value:  Size  Location     Type
  2335 ;;                  2    0[COMRAM] unsigned int 
  2336 ;; Registers used:
  2337 ;;		wreg, status,2, status,0
  2338 ;; Tracked objects:
  2339 ;;		On entry : 0/0
  2340 ;;		On exit  : 0/0
  2341 ;;		Unchanged: 0/0
  2342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2343 ;;      Params:         4       0       0       0       0       0       0
  2344 ;;      Locals:         3       0       0       0       0       0       0
  2345 ;;      Temps:          0       0       0       0       0       0       0
  2346 ;;      Totals:         7       0       0       0       0       0       0
  2347 ;;Total ram usage:        7 bytes
  2348 ;; Hardware stack levels used:    1
  2349 ;; This function calls:
  2350 ;;		Nothing
  2351 ;; This function is called by:
  2352 ;;		_glcd_num
  2353 ;; This function uses a non-reentrant model
  2354 ;;
  2355                           
  2356                           	psect	text7
  2357  000F8A                     __ptext7:
  2358                           	opt stack 0
  2359  000F8A                     ___lwdiv:
  2360                           	opt stack 29
  2361                           
  2362                           ;incstack = 0
  2363  000F8A  0E00               	movlw	0
  2364  000F8C  6E06               	movwf	___lwdiv@quotient+1,c
  2365  000F8E  0E00               	movlw	0
  2366  000F90  6E05               	movwf	___lwdiv@quotient,c
  2367  000F92  5003               	movf	___lwdiv@divisor,w,c
  2368  000F94  1004               	iorwf	___lwdiv@divisor+1,w,c
  2369  000F96  B4D8               	btfsc	status,2,c
  2370  000F98  D01C               	goto	l598
  2371  000F9A  0E01               	movlw	1
  2372  000F9C  6E07               	movwf	___lwdiv@counter,c
  2373  000F9E  D004               	goto	l1311
  2374  000FA0                     l1309:
  2375  000FA0  90D8               	bcf	status,0,c
  2376  000FA2  3603               	rlcf	___lwdiv@divisor,f,c
  2377  000FA4  3604               	rlcf	___lwdiv@divisor+1,f,c
  2378  000FA6  2A07               	incf	___lwdiv@counter,f,c
  2379  000FA8                     l1311:
  2380  000FA8  AE04               	btfss	___lwdiv@divisor+1,7,c
  2381  000FAA  D7FA               	goto	l1309
  2382  000FAC                     l1313:
  2383  000FAC  90D8               	bcf	status,0,c
  2384  000FAE  3605               	rlcf	___lwdiv@quotient,f,c
  2385  000FB0  3606               	rlcf	___lwdiv@quotient+1,f,c
  2386  000FB2  5003               	movf	___lwdiv@divisor,w,c
  2387  000FB4  5C01               	subwf	___lwdiv@dividend,w,c
  2388  000FB6  5004               	movf	___lwdiv@divisor+1,w,c
  2389  000FB8  5802               	subwfb	___lwdiv@dividend+1,w,c
  2390  000FBA  A0D8               	btfss	status,0,c
  2391  000FBC  D005               	goto	l1321
  2392  000FBE  5003               	movf	___lwdiv@divisor,w,c
  2393  000FC0  5E01               	subwf	___lwdiv@dividend,f,c
  2394  000FC2  5004               	movf	___lwdiv@divisor+1,w,c
  2395  000FC4  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2396  000FC6  8005               	bsf	___lwdiv@quotient,0,c
  2397  000FC8                     l1321:
  2398  000FC8  90D8               	bcf	status,0,c
  2399  000FCA  3204               	rrcf	___lwdiv@divisor+1,f,c
  2400  000FCC  3203               	rrcf	___lwdiv@divisor,f,c
  2401  000FCE  2E07               	decfsz	___lwdiv@counter,f,c
  2402  000FD0  D7ED               	goto	l1313
  2403  000FD2                     l598:
  2404  000FD2  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2405  000FD6  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2406  000FDA  0012               	return		;funcret
  2407  000FDC                     __end_of___lwdiv:
  2408                           	opt stack 0
  2409                           tblptru	equ	0xFF8
  2410                           tblptrh	equ	0xFF7
  2411                           tblptrl	equ	0xFF6
  2412                           tablat	equ	0xFF5
  2413                           prodh	equ	0xFF4
  2414                           prodl	equ	0xFF3
  2415                           wreg	equ	0xFE8
  2416                           indf2	equ	0xFDF
  2417                           fsr2h	equ	0xFDA
  2418                           fsr2l	equ	0xFD9
  2419                           status	equ	0xFD8
  2420                           
  2421 ;; *************** function _glcd_clear *****************
  2422 ;; Defined at:
  2423 ;;		line 150 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
  2424 ;; Parameters:    Size  Location     Type
  2425 ;;		None
  2426 ;; Auto vars:     Size  Location     Type
  2427 ;;  m               2    7[COMRAM] unsigned short 
  2428 ;; Return value:  Size  Location     Type
  2429 ;;                  1    wreg      void 
  2430 ;; Registers used:
  2431 ;;		wreg, status,2, status,0, cstack
  2432 ;; Tracked objects:
  2433 ;;		On entry : 0/0
  2434 ;;		On exit  : 0/0
  2435 ;;		Unchanged: 0/0
  2436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2437 ;;      Params:         0       0       0       0       0       0       0
  2438 ;;      Locals:         2       0       0       0       0       0       0
  2439 ;;      Temps:          0       0       0       0       0       0       0
  2440 ;;      Totals:         2       0       0       0       0       0       0
  2441 ;;Total ram usage:        2 bytes
  2442 ;; Hardware stack levels used:    1
  2443 ;; Hardware stack levels required when called:    4
  2444 ;; This function calls:
  2445 ;;		_glcd_clear_line
  2446 ;; This function is called by:
  2447 ;;		_main
  2448 ;; This function uses a non-reentrant model
  2449 ;;
  2450                           
  2451                           	psect	text8
  2452  0010B6                     __ptext8:
  2453                           	opt stack 0
  2454  0010B6                     _glcd_clear:
  2455                           	opt stack 26
  2456                           
  2457                           ;glcd.h: 152: unsigned short m;
  2458                           ;glcd.h: 153: for(m=0;m<8;m++)
  2459                           
  2460                           ;incstack = 0
  2461  0010B6  0E00               	movlw	0
  2462  0010B8  6E09               	movwf	glcd_clear@m+1,c
  2463  0010BA  0E00               	movlw	0
  2464  0010BC  6E08               	movwf	glcd_clear@m,c
  2465  0010BE                     l1343:
  2466  0010BE  5009               	movf	glcd_clear@m+1,w,c
  2467  0010C0  E10A               	bnz	l57
  2468  0010C2  0E08               	movlw	8
  2469  0010C4  5C08               	subwf	glcd_clear@m,w,c
  2470  0010C6  B0D8               	btfsc	status,0,c
  2471  0010C8  0012               	return	
  2472                           
  2473                           ;glcd.h: 154: {
  2474                           ;glcd.h: 155: glcd_clear_line(m);
  2475  0010CA  5008               	movf	glcd_clear@m,w,c
  2476  0010CC  EC0F  F008         	call	_glcd_clear_line
  2477  0010D0  4A08               	infsnz	glcd_clear@m,f,c
  2478  0010D2  2A09               	incf	glcd_clear@m+1,f,c
  2479  0010D4  D7F4               	goto	l1343
  2480  0010D6                     l57:
  2481  0010D6  0012               	return		;funcret
  2482  0010D8                     __end_of_glcd_clear:
  2483                           	opt stack 0
  2484                           tblptru	equ	0xFF8
  2485                           tblptrh	equ	0xFF7
  2486                           tblptrl	equ	0xFF6
  2487                           tablat	equ	0xFF5
  2488                           prodh	equ	0xFF4
  2489                           prodl	equ	0xFF3
  2490                           wreg	equ	0xFE8
  2491                           indf2	equ	0xFDF
  2492                           fsr2h	equ	0xFDA
  2493                           fsr2l	equ	0xFD9
  2494                           status	equ	0xFD8
  2495                           
  2496 ;; *************** function _glcd_clear_line *****************
  2497 ;; Defined at:
  2498 ;;		line 140 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
  2499 ;; Parameters:    Size  Location     Type
  2500 ;;  ln              1    wreg     unsigned char 
  2501 ;; Auto vars:     Size  Location     Type
  2502 ;;  ln              1    4[COMRAM] unsigned char 
  2503 ;;  i               2    5[COMRAM] int 
  2504 ;; Return value:  Size  Location     Type
  2505 ;;                  1    wreg      void 
  2506 ;; Registers used:
  2507 ;;		wreg, status,2, status,0, cstack
  2508 ;; Tracked objects:
  2509 ;;		On entry : 0/0
  2510 ;;		On exit  : 0/0
  2511 ;;		Unchanged: 0/0
  2512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2513 ;;      Params:         0       0       0       0       0       0       0
  2514 ;;      Locals:         3       0       0       0       0       0       0
  2515 ;;      Temps:          0       0       0       0       0       0       0
  2516 ;;      Totals:         3       0       0       0       0       0       0
  2517 ;;Total ram usage:        3 bytes
  2518 ;; Hardware stack levels used:    1
  2519 ;; Hardware stack levels required when called:    3
  2520 ;; This function calls:
  2521 ;;		_glcd_write
  2522 ;;		_goto_xy
  2523 ;; This function is called by:
  2524 ;;		_glcd_clear
  2525 ;;		_main
  2526 ;; This function uses a non-reentrant model
  2527 ;;
  2528                           
  2529                           	psect	text9
  2530  00101E                     __ptext9:
  2531                           	opt stack 0
  2532  00101E                     _glcd_clear_line:
  2533                           	opt stack 27
  2534                           
  2535                           ;incstack = 0
  2536                           ;glcd_clear_line@ln stored from wreg
  2537  00101E  6E05               	movwf	glcd_clear_line@ln,c
  2538                           
  2539                           ;glcd.h: 142: int i;
  2540                           ;glcd.h: 143: goto_xy(0,ln);
  2541  001020  C005  F003         	movff	glcd_clear_line@ln,goto_xy@y
  2542  001024  0E00               	movlw	0
  2543  001026  EC8F  F008         	call	_goto_xy
  2544                           
  2545                           ;glcd.h: 144: goto_xy(64,ln);
  2546  00102A  C005  F003         	movff	glcd_clear_line@ln,goto_xy@y
  2547  00102E  0E40               	movlw	64
  2548  001030  EC8F  F008         	call	_goto_xy
  2549                           
  2550                           ;glcd.h: 145: PORTBbits.RB4 = 1;
  2551  001034  8881               	bsf	3969,4,c	;volatile
  2552                           
  2553                           ;glcd.h: 146: for(i=0;i<65;i++)
  2554  001036  0E00               	movlw	0
  2555  001038  6E07               	movwf	glcd_clear_line@i+1,c
  2556  00103A  0E00               	movlw	0
  2557  00103C  6E06               	movwf	glcd_clear_line@i,c
  2558  00103E                     l1279:
  2559  00103E  BE07               	btfsc	glcd_clear_line@i+1,7,c
  2560  001040  D006               	goto	l1283
  2561  001042  5007               	movf	glcd_clear_line@i+1,w,c
  2562  001044  E10A               	bnz	l52
  2563  001046  0E41               	movlw	65
  2564  001048  5C06               	subwf	glcd_clear_line@i,w,c
  2565  00104A  B0D8               	btfsc	status,0,c
  2566  00104C  0012               	return	
  2567  00104E                     l1283:
  2568                           
  2569                           ;glcd.h: 147: glcd_write(0);
  2570  00104E  0E00               	movlw	0
  2571  001050  EC78  F008         	call	_glcd_write
  2572  001054  4A06               	infsnz	glcd_clear_line@i,f,c
  2573  001056  2A07               	incf	glcd_clear_line@i+1,f,c
  2574  001058  D7F2               	goto	l1279
  2575  00105A                     l52:
  2576  00105A  0012               	return		;funcret
  2577  00105C                     __end_of_glcd_clear_line:
  2578                           	opt stack 0
  2579                           tblptru	equ	0xFF8
  2580                           tblptrh	equ	0xFF7
  2581                           tblptrl	equ	0xFF6
  2582                           tablat	equ	0xFF5
  2583                           prodh	equ	0xFF4
  2584                           prodl	equ	0xFF3
  2585                           wreg	equ	0xFE8
  2586                           indf2	equ	0xFDF
  2587                           fsr2h	equ	0xFDA
  2588                           fsr2l	equ	0xFD9
  2589                           status	equ	0xFD8
  2590                           
  2591 ;; *************** function _goto_xy *****************
  2592 ;; Defined at:
  2593 ;;		line 125 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
  2594 ;; Parameters:    Size  Location     Type
  2595 ;;  x               1    wreg     unsigned char 
  2596 ;;  y               1    2[COMRAM] unsigned char 
  2597 ;; Auto vars:     Size  Location     Type
  2598 ;;  x               1    3[COMRAM] unsigned char 
  2599 ;; Return value:  Size  Location     Type
  2600 ;;                  1    wreg      void 
  2601 ;; Registers used:
  2602 ;;		wreg, status,2, status,0, cstack
  2603 ;; Tracked objects:
  2604 ;;		On entry : 0/0
  2605 ;;		On exit  : 0/0
  2606 ;;		Unchanged: 0/0
  2607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2608 ;;      Params:         1       0       0       0       0       0       0
  2609 ;;      Locals:         1       0       0       0       0       0       0
  2610 ;;      Temps:          0       0       0       0       0       0       0
  2611 ;;      Totals:         2       0       0       0       0       0       0
  2612 ;;Total ram usage:        2 bytes
  2613 ;; Hardware stack levels used:    1
  2614 ;; Hardware stack levels required when called:    2
  2615 ;; This function calls:
  2616 ;;		_goto_col
  2617 ;;		_goto_row
  2618 ;; This function is called by:
  2619 ;;		_glcd_clear_line
  2620 ;;		_main
  2621 ;;		_glcd_draw_pixel
  2622 ;; This function uses a non-reentrant model
  2623 ;;
  2624                           
  2625                           	psect	text10
  2626  00111E                     __ptext10:
  2627                           	opt stack 0
  2628  00111E                     _goto_xy:
  2629                           	opt stack 28
  2630                           
  2631                           ;incstack = 0
  2632                           ;goto_xy@x stored from wreg
  2633  00111E  6E04               	movwf	goto_xy@x,c
  2634                           
  2635                           ;glcd.h: 127: goto_col(x);
  2636  001120  5004               	movf	goto_xy@x,w,c
  2637  001122  EC2E  F008         	call	_goto_col
  2638                           
  2639                           ;glcd.h: 128: goto_row(y);
  2640  001126  5003               	movf	goto_xy@y,w,c
  2641  001128  EC6C  F008         	call	_goto_row
  2642  00112C  0012               	return		;funcret
  2643  00112E                     __end_of_goto_xy:
  2644                           	opt stack 0
  2645                           tblptru	equ	0xFF8
  2646                           tblptrh	equ	0xFF7
  2647                           tblptrl	equ	0xFF6
  2648                           tablat	equ	0xFF5
  2649                           prodh	equ	0xFF4
  2650                           prodl	equ	0xFF3
  2651                           wreg	equ	0xFE8
  2652                           indf2	equ	0xFDF
  2653                           fsr2h	equ	0xFDA
  2654                           fsr2l	equ	0xFD9
  2655                           status	equ	0xFD8
  2656                           
  2657 ;; *************** function _goto_row *****************
  2658 ;; Defined at:
  2659 ;;		line 115 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
  2660 ;; Parameters:    Size  Location     Type
  2661 ;;  row             1    wreg     unsigned char 
  2662 ;; Auto vars:     Size  Location     Type
  2663 ;;  row             1    0[COMRAM] unsigned char 
  2664 ;;  Col_Data        1    1[COMRAM] unsigned char 
  2665 ;; Return value:  Size  Location     Type
  2666 ;;                  1    wreg      void 
  2667 ;; Registers used:
  2668 ;;		wreg, status,2, status,0, cstack
  2669 ;; Tracked objects:
  2670 ;;		On entry : 0/0
  2671 ;;		On exit  : 0/0
  2672 ;;		Unchanged: 0/0
  2673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2674 ;;      Params:         0       0       0       0       0       0       0
  2675 ;;      Locals:         2       0       0       0       0       0       0
  2676 ;;      Temps:          0       0       0       0       0       0       0
  2677 ;;      Totals:         2       0       0       0       0       0       0
  2678 ;;Total ram usage:        2 bytes
  2679 ;; Hardware stack levels used:    1
  2680 ;; Hardware stack levels required when called:    1
  2681 ;; This function calls:
  2682 ;;		_enable_pulse
  2683 ;; This function is called by:
  2684 ;;		_goto_xy
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688                           	psect	text11
  2689  0010D8                     __ptext11:
  2690                           	opt stack 0
  2691  0010D8                     _goto_row:
  2692                           	opt stack 28
  2693                           
  2694                           ;incstack = 0
  2695                           ;goto_row@row stored from wreg
  2696  0010D8  6E01               	movwf	goto_row@row,c
  2697                           
  2698                           ;glcd.h: 117: unsigned char Col_Data;
  2699                           ;glcd.h: 118: PORTBbits.RB0 = 0;
  2700  0010DA  9081               	bcf	3969,0,c	;volatile
  2701                           
  2702                           ;glcd.h: 119: PORTBbits.RB1 = 0;
  2703  0010DC  9281               	bcf	3969,1,c	;volatile
  2704                           
  2705                           ;glcd.h: 120: Col_Data = (row | 0xB8 ) & 0xBF;
  2706  0010DE  5001               	movf	goto_row@row,w,c
  2707  0010E0  09B8               	iorlw	184
  2708  0010E2  0BBF               	andlw	191
  2709  0010E4  6E02               	movwf	goto_row@Col_Data,c
  2710                           
  2711                           ;glcd.h: 121: PORTD = Col_Data;
  2712  0010E6  C002  FF83         	movff	goto_row@Col_Data,3971	;volatile
  2713                           
  2714                           ;glcd.h: 122: enable_pulse();
  2715  0010EA  EC84  F008         	call	_enable_pulse	;wreg free
  2716  0010EE  0012               	return		;funcret
  2717  0010F0                     __end_of_goto_row:
  2718                           	opt stack 0
  2719                           tblptru	equ	0xFF8
  2720                           tblptrh	equ	0xFF7
  2721                           tblptrl	equ	0xFF6
  2722                           tablat	equ	0xFF5
  2723                           prodh	equ	0xFF4
  2724                           prodl	equ	0xFF3
  2725                           wreg	equ	0xFE8
  2726                           indf2	equ	0xFDF
  2727                           fsr2h	equ	0xFDA
  2728                           fsr2l	equ	0xFD9
  2729                           status	equ	0xFD8
  2730                           
  2731 ;; *************** function _goto_col *****************
  2732 ;; Defined at:
  2733 ;;		line 92 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
  2734 ;; Parameters:    Size  Location     Type
  2735 ;;  col             1    wreg     unsigned char 
  2736 ;; Auto vars:     Size  Location     Type
  2737 ;;  col             1    1[COMRAM] unsigned char 
  2738 ;;  Col_Data        1    0[COMRAM] unsigned char 
  2739 ;; Return value:  Size  Location     Type
  2740 ;;                  1    wreg      void 
  2741 ;; Registers used:
  2742 ;;		wreg, status,2, status,0, cstack
  2743 ;; Tracked objects:
  2744 ;;		On entry : 0/0
  2745 ;;		On exit  : 0/0
  2746 ;;		Unchanged: 0/0
  2747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2748 ;;      Params:         0       0       0       0       0       0       0
  2749 ;;      Locals:         2       0       0       0       0       0       0
  2750 ;;      Temps:          0       0       0       0       0       0       0
  2751 ;;      Totals:         2       0       0       0       0       0       0
  2752 ;;Total ram usage:        2 bytes
  2753 ;; Hardware stack levels used:    1
  2754 ;; Hardware stack levels required when called:    1
  2755 ;; This function calls:
  2756 ;;		_enable_pulse
  2757 ;; This function is called by:
  2758 ;;		_goto_xy
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           	psect	text12
  2763  00105C                     __ptext12:
  2764                           	opt stack 0
  2765  00105C                     _goto_col:
  2766                           	opt stack 28
  2767                           
  2768                           ;incstack = 0
  2769                           ;goto_col@col stored from wreg
  2770  00105C  6E02               	movwf	goto_col@col,c
  2771                           
  2772                           ;glcd.h: 94: unsigned char Col_Data;
  2773                           ;glcd.h: 95: PORTBbits.RB0 = 0;
  2774  00105E  9081               	bcf	3969,0,c	;volatile
  2775                           
  2776                           ;glcd.h: 96: PORTBbits.RB1 = 0;
  2777  001060  9281               	bcf	3969,1,c	;volatile
  2778                           
  2779                           ;glcd.h: 97: if(col<64)
  2780  001062  0E40               	movlw	64
  2781  001064  6002               	cpfslt	goto_col@col,c
  2782  001066  D005               	goto	l36
  2783                           
  2784                           ;glcd.h: 98: {
  2785                           ;glcd.h: 99: PORTBbits.RB4 = 1;
  2786  001068  8881               	bsf	3969,4,c	;volatile
  2787                           
  2788                           ;glcd.h: 100: PORTBbits.RB5 = 0;
  2789  00106A  9A81               	bcf	3969,5,c	;volatile
  2790                           
  2791                           ;glcd.h: 101: Col_Data = col;
  2792  00106C  C002  F001         	movff	goto_col@col,goto_col@Col_Data
  2793                           
  2794                           ;glcd.h: 102: }
  2795  001070  D005               	goto	l37
  2796  001072                     l36:
  2797                           
  2798                           ;glcd.h: 103: else
  2799                           ;glcd.h: 104: {
  2800                           ;glcd.h: 106: PORTBbits.RB5 = 1;
  2801  001072  8A81               	bsf	3969,5,c	;volatile
  2802                           
  2803                           ;glcd.h: 107: PORTBbits.RB4 = 0;
  2804  001074  9881               	bcf	3969,4,c	;volatile
  2805                           
  2806                           ;glcd.h: 108: Col_Data = col-64;
  2807  001076  5002               	movf	goto_col@col,w,c
  2808  001078  0FC0               	addlw	192
  2809  00107A  6E01               	movwf	goto_col@Col_Data,c
  2810  00107C                     l37:
  2811                           
  2812                           ;glcd.h: 109: }
  2813                           ;glcd.h: 110: Col_Data = (Col_Data | 0x40 ) & 0x7F;
  2814  00107C  5001               	movf	goto_col@Col_Data,w,c
  2815  00107E  0940               	iorlw	64
  2816  001080  0B7F               	andlw	127
  2817  001082  6E01               	movwf	goto_col@Col_Data,c
  2818                           
  2819                           ;glcd.h: 111: PORTD = Col_Data;
  2820  001084  C001  FF83         	movff	goto_col@Col_Data,3971	;volatile
  2821                           
  2822                           ;glcd.h: 112: enable_pulse();
  2823  001088  EC84  F008         	call	_enable_pulse	;wreg free
  2824  00108C  0012               	return		;funcret
  2825  00108E                     __end_of_goto_col:
  2826                           	opt stack 0
  2827                           tblptru	equ	0xFF8
  2828                           tblptrh	equ	0xFF7
  2829                           tblptrl	equ	0xFF6
  2830                           tablat	equ	0xFF5
  2831                           prodh	equ	0xFF4
  2832                           prodl	equ	0xFF3
  2833                           wreg	equ	0xFE8
  2834                           indf2	equ	0xFDF
  2835                           fsr2h	equ	0xFDA
  2836                           fsr2l	equ	0xFD9
  2837                           status	equ	0xFD8
  2838                           
  2839 ;; *************** function _glcd_write *****************
  2840 ;; Defined at:
  2841 ;;		line 131 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
  2842 ;; Parameters:    Size  Location     Type
  2843 ;;  data            1    wreg     unsigned char 
  2844 ;; Auto vars:     Size  Location     Type
  2845 ;;  data            1    0[COMRAM] unsigned char 
  2846 ;; Return value:  Size  Location     Type
  2847 ;;                  1    wreg      void 
  2848 ;; Registers used:
  2849 ;;		wreg, status,2, cstack
  2850 ;; Tracked objects:
  2851 ;;		On entry : 0/0
  2852 ;;		On exit  : 0/0
  2853 ;;		Unchanged: 0/0
  2854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2855 ;;      Params:         0       0       0       0       0       0       0
  2856 ;;      Locals:         1       0       0       0       0       0       0
  2857 ;;      Temps:          0       0       0       0       0       0       0
  2858 ;;      Totals:         1       0       0       0       0       0       0
  2859 ;;Total ram usage:        1 bytes
  2860 ;; Hardware stack levels used:    1
  2861 ;; Hardware stack levels required when called:    1
  2862 ;; This function calls:
  2863 ;;		_enable_pulse
  2864 ;; This function is called by:
  2865 ;;		_glcd_clear_line
  2866 ;;		_glcd_text
  2867 ;;		_glcd_draw_pixel
  2868 ;; This function uses a non-reentrant model
  2869 ;;
  2870                           
  2871                           	psect	text13
  2872  0010F0                     __ptext13:
  2873                           	opt stack 0
  2874  0010F0                     _glcd_write:
  2875                           	opt stack 27
  2876                           
  2877                           ;incstack = 0
  2878                           ;glcd_write@data stored from wreg
  2879  0010F0  6E01               	movwf	glcd_write@data,c
  2880                           
  2881                           ;glcd.h: 133: PORTBbits.RB0 = 1;
  2882  0010F2  8081               	bsf	3969,0,c	;volatile
  2883                           
  2884                           ;glcd.h: 134: PORTBbits.RB1 = 0;
  2885  0010F4  9281               	bcf	3969,1,c	;volatile
  2886                           
  2887                           ;glcd.h: 135: PORTD = data;
  2888  0010F6  C001  FF83         	movff	glcd_write@data,3971	;volatile
  2889                           
  2890                           ;glcd.h: 136: _delay((unsigned long)((5)*(16000000/4000000.0)));
  2891  0010FA  0E06               	movlw	6
  2892  0010FC                     u787:
  2893  0010FC  2EE8               	decfsz	wreg,f,c
  2894  0010FE  D7FE               	bra	u787
  2895  001100  D000               	nop2	
  2896                           
  2897                           ;glcd.h: 137: enable_pulse();
  2898  001102  EC84  F008         	call	_enable_pulse	;wreg free
  2899  001106  0012               	return		;funcret
  2900  001108                     __end_of_glcd_write:
  2901                           	opt stack 0
  2902                           tblptru	equ	0xFF8
  2903                           tblptrh	equ	0xFF7
  2904                           tblptrl	equ	0xFF6
  2905                           tablat	equ	0xFF5
  2906                           prodh	equ	0xFF4
  2907                           prodl	equ	0xFF3
  2908                           wreg	equ	0xFE8
  2909                           indf2	equ	0xFDF
  2910                           fsr2h	equ	0xFDA
  2911                           fsr2l	equ	0xFD9
  2912                           status	equ	0xFD8
  2913                           
  2914 ;; *************** function _enable_pulse *****************
  2915 ;; Defined at:
  2916 ;;		line 55 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
  2917 ;; Parameters:    Size  Location     Type
  2918 ;;		None
  2919 ;; Auto vars:     Size  Location     Type
  2920 ;;		None
  2921 ;; Return value:  Size  Location     Type
  2922 ;;                  1    wreg      void 
  2923 ;; Registers used:
  2924 ;;		wreg
  2925 ;; Tracked objects:
  2926 ;;		On entry : 0/0
  2927 ;;		On exit  : 0/0
  2928 ;;		Unchanged: 0/0
  2929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2930 ;;      Params:         0       0       0       0       0       0       0
  2931 ;;      Locals:         0       0       0       0       0       0       0
  2932 ;;      Temps:          0       0       0       0       0       0       0
  2933 ;;      Totals:         0       0       0       0       0       0       0
  2934 ;;Total ram usage:        0 bytes
  2935 ;; Hardware stack levels used:    1
  2936 ;; This function calls:
  2937 ;;		Nothing
  2938 ;; This function is called by:
  2939 ;;		_glcd_on
  2940 ;;		_goto_col
  2941 ;;		_goto_row
  2942 ;;		_glcd_write
  2943 ;;		_set_start_line
  2944 ;; This function uses a non-reentrant model
  2945 ;;
  2946                           
  2947                           	psect	text14
  2948  001108                     __ptext14:
  2949                           	opt stack 0
  2950  001108                     _enable_pulse:
  2951                           	opt stack 28
  2952                           
  2953                           ;glcd.h: 57: PORTBbits.RB2 = 1;
  2954                           
  2955                           ;incstack = 0
  2956  001108  8481               	bsf	3969,2,c	;volatile
  2957                           
  2958                           ;glcd.h: 58: _delay((unsigned long)((5)*(16000000/4000000.0)));
  2959  00110A  0E06               	movlw	6
  2960  00110C                     u797:
  2961  00110C  2EE8               	decfsz	wreg,f,c
  2962  00110E  D7FE               	bra	u797
  2963  001110  D000               	nop2	
  2964                           
  2965                           ;glcd.h: 59: PORTBbits.RB2 = 0;
  2966  001112  9481               	bcf	3969,2,c	;volatile
  2967                           
  2968                           ;glcd.h: 60: _delay((unsigned long)((5)*(16000000/4000000.0)));
  2969  001114  0E06               	movlw	6
  2970  001116                     u807:
  2971  001116  2EE8               	decfsz	wreg,f,c
  2972  001118  D7FE               	bra	u807
  2973  00111A  D000               	nop2	
  2974  00111C  0012               	return		;funcret
  2975  00111E                     __end_of_enable_pulse:
  2976                           	opt stack 0
  2977                           tblptru	equ	0xFF8
  2978                           tblptrh	equ	0xFF7
  2979                           tblptrl	equ	0xFF6
  2980                           tablat	equ	0xFF5
  2981                           prodh	equ	0xFF4
  2982                           prodl	equ	0xFF3
  2983                           wreg	equ	0xFE8
  2984                           indf2	equ	0xFDF
  2985                           fsr2h	equ	0xFDA
  2986                           fsr2l	equ	0xFD9
  2987                           status	equ	0xFD8
  2988                           tblptru	equ	0xFF8
  2989                           tblptrh	equ	0xFF7
  2990                           tblptrl	equ	0xFF6
  2991                           tablat	equ	0xFF5
  2992                           prodh	equ	0xFF4
  2993                           prodl	equ	0xFF3
  2994                           wreg	equ	0xFE8
  2995                           indf2	equ	0xFDF
  2996                           fsr2h	equ	0xFDA
  2997                           fsr2l	equ	0xFD9
  2998                           status	equ	0xFD8
  2999                           
  3000                           	psect	rparam
  3001  0000                     tblptru	equ	0xFF8
  3002                           tblptrh	equ	0xFF7
  3003                           tblptrl	equ	0xFF6
  3004                           tablat	equ	0xFF5
  3005                           prodh	equ	0xFF4
  3006                           prodl	equ	0xFF3
  3007                           wreg	equ	0xFE8
  3008                           indf2	equ	0xFDF
  3009                           fsr2h	equ	0xFDA
  3010                           fsr2l	equ	0xFD9
  3011                           status	equ	0xFD8


Data Sizes:
    Strings     8
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     31      31
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    glcd_string@str	PTR unsigned char  size(2) Largest target is 8
		 -> STR_1(CODE[8]), 


Critical Paths under _main in COMRAM

    _main->_glcd_num
    _glcd_string->_glcd_text
    _glcd_num->___lwdiv
    _glcd_text->_glcd_write
    _glcd_clear->_glcd_clear_line
    _glcd_clear_line->_goto_xy
    _goto_xy->_goto_col
    _goto_xy->_goto_row

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3098
                                             29 COMRAM     2     2      0
                         _glcd_clear
                    _glcd_clear_line
                           _glcd_num
                            _glcd_on
                        _glcd_string
                            _goto_xy
                            _keyscan
 ---------------------------------------------------------------------------------
 (1) _keyscan                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _glcd_string                                          5     3      2     184
                                              2 COMRAM     5     3      2
                          _glcd_text
 ---------------------------------------------------------------------------------
 (1) _glcd_on                                              0     0      0       0
                       _enable_pulse
 ---------------------------------------------------------------------------------
 (1) _glcd_num                                            22    20      2    1037
                                              7 COMRAM    22    20      2
                            ___lwdiv
                            ___lwmod
                          _glcd_text
                            _keyscan (ARG)
 ---------------------------------------------------------------------------------
 (2) _glcd_text                                            1     1      0      30
                                              1 COMRAM     1     1      0
                         _glcd_write
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _glcd_clear                                           2     2      0     706
                                              7 COMRAM     2     2      0
                    _glcd_clear_line
 ---------------------------------------------------------------------------------
 (1) _glcd_clear_line                                      3     3      0     638
                                              4 COMRAM     3     3      0
                         _glcd_write
                            _goto_xy
 ---------------------------------------------------------------------------------
 (1) _goto_xy                                              2     1      1     533
                                              2 COMRAM     2     1      1
                           _goto_col
                           _goto_row
 ---------------------------------------------------------------------------------
 (2) _goto_row                                             2     2      0      30
                                              0 COMRAM     2     2      0
                       _enable_pulse
 ---------------------------------------------------------------------------------
 (2) _goto_col                                             2     2      0      75
                                              0 COMRAM     2     2      0
                       _enable_pulse
 ---------------------------------------------------------------------------------
 (3) _glcd_write                                           1     1      0      15
                                              0 COMRAM     1     1      0
                       _enable_pulse
 ---------------------------------------------------------------------------------
 (3) _enable_pulse                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _glcd_clear
     _glcd_clear_line
       _glcd_write
         _enable_pulse
       _goto_xy
         _goto_col
           _enable_pulse
         _goto_row
           _enable_pulse
   _glcd_clear_line
     _glcd_write
       _enable_pulse
     _goto_xy
       _goto_col
         _enable_pulse
       _goto_row
         _enable_pulse
   _glcd_num
     ___lwdiv
     ___lwmod
     _glcd_text
       _glcd_write
         _enable_pulse
     _keyscan (ARG)
   _glcd_on
     _enable_pulse
   _glcd_string
     _glcd_text
       _glcd_write
         _enable_pulse
   _goto_xy
     _goto_col
       _enable_pulse
     _goto_row
       _enable_pulse
   _keyscan

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     1F      1F       1       32.6%
STACK                0      0       0       2        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
ABS                  0      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BIGRAM             5FF      0       0      16        0.0%
DATA                 0      0       0      17        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Jun 20 14:36:16 2017

             glcd_num@num 0008  __size_of_glcd_clear_line 003E                        l36 1072  
                      l52 105A                        l37 107C                        l57 10D6  
                     l191 0EC6                       l186 0EC2                       l608 1014  
                     l911 060E                       l921 06EA                       l913 063A  
                     l931 07C6                       l923 0716                       l915 0666  
                     l941 08A2                       l933 07F2                       l925 0742  
                     l917 0692                       l598 0FD2                       l951 097E  
                     l943 08CE                       l935 081E                       l927 076E  
                     l919 06BE                       l961 0A5A                       l953 09AA  
                     l945 08FA                       l937 084A                       l929 079A  
                     l971 0B36                       l963 0A86                       l955 09D6  
                     l947 0926                       l939 0876                       l981 0C12  
                     l973 0B62                       l965 0AB2                       l957 0A02  
                     l949 0952                       l983 0C3E                       l975 0B8E  
                     l967 0ADE                       l959 0A2E                       l985 0C5E  
                     l977 0BBA                       l969 0B0A                       l993 0CAC  
                     l987 0C7E                       l979 0BE6                       l989 0C86  
                     u807 1116                       u767 0F20                       u777 0E64  
                     u787 10FC                       u797 110C                       prod 000FF3  
                     wreg 000FE8              glcd_string@i 0007                      l1311 0FA8  
                    l1321 0FC8                      l1313 0FAC                      l1331 0FF2  
                    l1309 0FA0                      l1333 0FF6                      l1181 0E8A  
                    l1343 10BE                      l1191 0EA6                      l1175 0E7A  
                    l1167 0E5A                      l1337 100A                      l1329 0FEA  
                    l1185 0E96                      l1505 0EFA                      l1283 104E  
                    l1371 0E0E                      l1355 0DA8                      l1195 0EB2  
                    l1365 0DC8                      l1279 103E                      l1359 0DB0  
                    l1377 0E38                      l1393 0F62                      l1389 0F3C  
                    STR_1 0601                      _LATA 000F89             glcd_text@text 0002  
                    _main 0ECE                      indf2 000FDF                      fsr2l 000FD9  
                    prodh 000FF4                      prodl 000FF3                      start 0000  
          glcd_num@number 000C              ___param_bank 000000                     ?_main 0001  
         __end_of___lwdiv 0FDC           __end_of___lwmod 101E                     _PORTA 000F80  
                   _PORTB 000F81                     _PORTD 000F83                     _TRISA 000F92  
                   _TRISB 000F93                     _TRISD 000F95           __end_of_glcd_on 10B6  
         __end_of_goto_xy 112E           __end_of_keyscan 0ECE                     tablat 000FF5  
                   status 000FD8           __initialization 112E              __end_of_main 0F36  
          glcd_string@str 0003            glcd_write@data 0001                    ??_main 001E  
           __activetblptr 000002      __end_of_enable_pulse 111E         ??_glcd_clear_line 0005  
                  _ANSELA 000F38          __end_of_glcd_num 0E5A      __size_of_glcd_string 0054  
               ??___lwdiv 0005                 ??___lwmod 0005          __end_of_goto_col 108E  
        __end_of_goto_row 10F0                 ??_glcd_on 0001                 ??_goto_xy 0004  
               ??_keyscan 0001              __mediumconst 0000               goto_col@col 0002  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
              __accesstop 0060   __end_of__initialization 112E               goto_row@row 0001  
           ___rparam_used 000001            __pcstackCOMRAM 0001        __size_of_glcd_text 0796  
   __size_of_enable_pulse 0016                _glcd_clear 10B6                _glcd_write 10F0  
               ?_glcd_num 0008          goto_col@Col_Data 0001                 ?_goto_col 0001  
               ?_goto_row 0001              _enable_pulse 1108                   __Hparam 0000  
                 __Lparam 0000         __end_of_glcd_text 0DA0           _glcd_clear_line 101E  
                 ___lwdiv 0F8A                   ___lwmod 0FDC              __psmallconst 0600  
                 __pcinit 112E                   __ramtop 0600                   __ptext0 0ECE  
                 __ptext1 0E5A                   __ptext2 0F36                   __ptext3 108E  
                 __ptext4 0DA0                   __ptext5 060A                   __ptext6 0FDC  
                 __ptext7 0F8A                   __ptext8 10B6                   __ptext9 101E  
                 _glcd_on 108E                   _goto_xy 111E                   _keyscan 0E5A  
              ??_glcd_num 000A      end_of_initialization 112E             __Lmediumconst 0000  
              ??_goto_col 0001                ??_goto_row 0001                 _PORTBbits 000F81  
             ?_glcd_clear 0001               ?_glcd_write 0001   __end_of_glcd_clear_line 105C  
           ??_glcd_string 0005         glcd_clear_line@ln 0005       start_initialization 112E  
     __size_of_glcd_clear 0022       __size_of_glcd_write 0018       __end_of_glcd_string 0F8A  
       __size_of_glcd_num 00BA          ?_glcd_clear_line 0001         __size_of_goto_col 0032  
        ___lwdiv@dividend 0001         __size_of_goto_row 0018                  ?___lwdiv 0001  
                ?___lwmod 0001                 _glcd_text 060A                  ?_glcd_on 0001  
             __smallconst 0600                  ?_goto_xy 0003                  ?_keyscan 0001  
        ___lwdiv@quotient 0005               _glcd_string 0F36                ?_glcd_text 0001  
               glcd_num@i 001C                 glcd_num@j 001D              ??_glcd_clear 0008  
            ??_glcd_write 0001          glcd_clear_line@i 0006                  __Hrparam 0000  
      __end_of_glcd_clear 10D8                  __Lrparam 0000        __end_of_glcd_write 1108  
        __size_of___lwdiv 0052          __size_of___lwmod 0042          __size_of_glcd_on 0028  
        __size_of_goto_xy 0010          __size_of_keyscan 0074           ___lwdiv@divisor 0003  
         ___lwdiv@counter 0007                  __ptext10 111E                  __ptext11 10D8  
                __ptext12 105C                  __ptext13 10F0                  __ptext14 1108  
                _glcd_num 0DA0             __size_of_main 0068                  _goto_col 105C  
                _goto_row 10D8               ??_glcd_text 0002                  goto_xy@x 0004  
                goto_xy@y 0003          ___lwmod@dividend 0001             ?_enable_pulse 0001  
         ___lwmod@divisor 0003           ___lwmod@counter 0005          goto_row@Col_Data 0002  
          ??_enable_pulse 0001              ?_glcd_string 0003               glcd_clear@m 0008  
